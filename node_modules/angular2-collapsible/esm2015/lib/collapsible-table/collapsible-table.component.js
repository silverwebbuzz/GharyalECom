/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, HostListener, ElementRef, ContentChildren } from '@angular/core';
import { CollapsibleTableRowComponent } from '../collapsible-table-row/collapsible-table-row.component';
import { CollapsibleService } from '../services/collapsible.service';
export class CollapsibleTableComponent {
    /**
     * @param {?} el
     * @param {?} collapsibleService
     */
    constructor(el, collapsibleService) {
        this.el = el;
        this.collapsibleService = collapsibleService;
        // allows navigation between table rows using arrow keys
        this.allowKeyboardNavigation = true;
        this.fixedTableHeight = 'auto';
        this.tabindex = 0;
        this.selectedRows = [];
        // specifies collapsible type. Can be either 'accordion' or 'expandable'
        this.type = 'accordion';
        this.mouseDownHold = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // this.updateFixedTableHeight();
        /*
                LOG(`CollapsibleTableComponent::ngOnInit()\n` +
                    `this = {\n` +
                    `bordered = ${this.bordered}\n` +
                    `borderedHorizontally = ${this.borderedHorizontally}\n` +
                    `borderedVertically = ${this.borderedVertically}\n` +
                    `striped = ${this.striped}\n` +
                    `stripedOddColor = ${this.stripedOddColor}\n` +
                    `stripedEvenColor = ${this.stripedEvenColor}\n` +
                    `highlight = ${this.highlight}\n` +
                    `highlightColor = ${this.highlightColor}\n` +
                    `highlightTextColor = ${this.highlightTextColor}\n` +
                    `activeColor = ${this.activeColor}\n` +
                    `activeTextColor = ${this.activeTextColor}\n` +
                    `centered = ${this.centered}\n` +
                    `responsive = ${this.responsive}\n` +
                    `select = ${this.select}\n` +
                    `selectColor = ${this.selectColor}\n` +
                    `selectTextColor = ${this.selectTextColor}\n` +
                    `selectMultipleRows = ${this.selectMultipleRows}\n` +
                    `noTextSelect = ${this.noTextSelect}\n` +
                    `}`);
                    */
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const change in changes) {
            if (changes.hasOwnProperty(change)) {
                if (this.collapsibleTableRows != null) {
                    switch (change) {
                        case 'striped':
                        case 'stripedOddColor':
                        case 'stripedOddTextColor':
                        case 'stripedEvenColor':
                        case 'stripedEvenTextColor':
                            this.updateTable('striped');
                            break;
                        case 'highlight':
                        case 'highlightColor':
                        case 'highlightTextColor':
                            this.updateTable('highlight');
                            break;
                        case 'activeColor':
                        case 'activeTextColor':
                            this.updateTable('active');
                            break;
                        case 'select':
                        case 'selectColor':
                        case 'selectTextColor':
                        case 'selectMultipleRows':
                        case 'allowDeselectingRows':
                            this.updateTable('select');
                            break;
                    }
                }
                // update collapsible table type in CollapsibleService
                if (change === 'type') {
                    this.type = changes["type"].currentValue;
                    this.collapsibleService.setType(this.type);
                }
            }
        }
        this.collapsibleService.setCollapsibleTable(this);
    }
    /**
     * @return {?}
     */
    focus() {
        this.el.nativeElement.focus();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    addSelectedRow(index) {
        switch (true) {
            case this.selectMultipleRows && this.selectedRows.indexOf(index) === -1:
                this.selectedRows.push(index);
                this.selectedRows.sort((a, b) => a - b);
                break;
            case !this.selectMultipleRows:
                this.selectedRows = [];
                this.deselectAllRows();
                this.selectedRows.push(index);
                this.selectedRows.sort((a, b) => a - b);
                break;
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeSelectedRow(index) {
        if (this.selectedRows.indexOf(index) !== -1) {
            this.selectedRows.splice(this.selectedRows.indexOf(index), 1);
        }
    }
    /**
     * @return {?}
     */
    clearSelectedRows() {
        this.selectedRows = [];
    }
    /**
     * @return {?}
     */
    deselectAllRows() {
        this.collapsibleTableRows.forEach(row => {
            row.selected = false;
            row.updateRow();
        });
    }
    /**
     * @param {?} index
     * @return {?}
     */
    selectRow(index) {
        if (this.select) {
            switch (true) {
                case index === 0:
                    this.selectRow(1);
                    break;
                case index === this.collapsibleTableRows.length:
                    this.selectRow(this.collapsibleTableRows.length - 1);
                    break;
                case 0 < index && index <= this.collapsibleTableRows.length - 1:
                    this.addSelectedRow(index);
                    this.collapsibleTableRows.forEach((row, i) => {
                        if (index !== i) {
                            if (!this.selectMultipleRows) {
                                row.selected = false;
                            }
                        }
                        else {
                            row.selected = true;
                        }
                        row.updateRow();
                    });
                    break;
            }
        }
    }
    /**
     * @param {?} firstRowIndex
     * @param {?} lastRowIndex
     * @return {?}
     */
    selectRows(firstRowIndex, lastRowIndex) {
        if (this.selectMultipleRows &&
            0 < firstRowIndex && firstRowIndex < lastRowIndex &&
            lastRowIndex <= this.collapsibleTableRows.length - 1) {
            this.clearSelectedRows();
            this.collapsibleTableRows.forEach((row, i) => {
                if (firstRowIndex <= i && i <= lastRowIndex) {
                    this.addSelectedRow(i);
                    row.selected = true;
                }
                else {
                    row.selected = false;
                }
                row.updateRow();
            });
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    toggleRowSelection(index) {
        if (this.select &&
            0 < index && index <= this.collapsibleTableRows.length - 1) {
            this.collapsibleTableRows.forEach((row, i) => {
                if (index === i) {
                    if (row.selected) {
                        this.removeSelectedRow(index);
                    }
                    else {
                        this.addSelectedRow(index);
                    }
                    row.selected = !row.selected;
                    row.updateRow();
                }
            });
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    updateStriped(row) {
        if (this.striped && row.isBodyRow) {
            row.isParentStriped = true;
            if (row.isOddRow) {
                row.parentStripedRowBackgroundColor = this.stripedOddColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
                row.parentStripedRowTextColor = this.stripedOddTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                row.rowTextColor = row.parentStripedRowTextColor;
            }
            else {
                row.parentStripedRowBackgroundColor = this.stripedEvenColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
                row.parentStripedRowTextColor = this.stripedEvenTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                row.rowTextColor = row.parentStripedRowTextColor;
            }
        }
        else {
            row.isParentStriped = false;
            row.rowBackgroundColor = undefined;
            row.rowTextColor = undefined;
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    updateHighlight(row) {
        row.isParentHighlight = this.highlight;
        row.parentHighlightRowBackgroundColor = this.highlightColor || CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
        row.parentHighlightRowTextColor = this.highlightTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    updateActive(row) {
        row.activeRowBackgroundColor = this.activeColor || CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
        row.activeRowTextColor = this.activeTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    updateSelect(row) {
        row.parentAllowsSelect = this.select;
        row.parentAllowsSelectMultipleRows = this.selectMultipleRows;
        row.parentAllowsDeselectingRows = this.allowDeselectingRows;
        if (row.selected) {
            row.selectedRowBackgroundColor = this.selectColor || CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
            row.selectedRowTextColor = this.selectTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            row.rowBackgroundColor = row.selectedRowBackgroundColor;
            row.rowTextColor = row.selectedRowTextColor;
        }
    }
    /**
     * @param {?=} change
     * @return {?}
     */
    updateTable(change) {
        if (this.collapsibleTableRows != null) {
            if (change != null) {
                switch (change) {
                    case 'striped':
                        // propagate changes to each of the CollapsibleTableRowComponent children
                        this.collapsibleTableRows.forEach(row => { this.updateStriped(row); });
                        break;
                    case 'highlight':
                        this.collapsibleTableRows.forEach(row => { this.updateHighlight(row); });
                        break;
                    case 'active':
                        this.collapsibleTableRows.forEach(row => { this.updateActive(row); });
                        break;
                    case 'select':
                        this.collapsibleTableRows.forEach(row => { this.updateSelect(row); });
                        break;
                }
            }
            else {
                // propagate changes to each of the CollapsibleTableRowComponent children
                this.collapsibleTableRows.forEach(row => {
                    this.updateStriped(row);
                    this.updateHighlight(row);
                    this.updateSelect(row);
                    this.updateActive(row);
                });
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keydown(event) {
        // select a row only if 'select' property is set to 'true'
        if (this.select && this.allowKeyboardNavigation) {
            /** @enum {number} */
            const Key = {
                arrowUp: 38,
                arrowDown: 40,
                home: 36,
                end: 35,
            };
            Key[Key.arrowUp] = 'arrowUp';
            Key[Key.arrowDown] = 'arrowDown';
            Key[Key.home] = 'home';
            Key[Key.end] = 'end';
            /** @type {?} */
            let index = 1;
            /** @type {?} */
            const whichKey = event['which'];
            if (Key[whichKey] != null) {
                event.preventDefault();
                event.stopPropagation();
                switch (whichKey) {
                    case Key.arrowUp:
                        // select previous row
                        if (this.selectedRows.length > 0) {
                            index = this.selectedRows[this.selectedRows.length - 1];
                            index--;
                        }
                        break;
                    case Key.arrowDown:
                        // select next row
                        if (this.selectedRows.length > 0) {
                            index = this.selectedRows[this.selectedRows.length - 1];
                            index++;
                        }
                        break;
                    case Key.home:
                        index = 1;
                        break;
                    case Key.end:
                        index = this.collapsibleTableRows.length - 1;
                        break;
                }
                this.clearSelectedRows();
                this.deselectAllRows();
                this.selectRow(index);
                this.updateTable();
            }
        }
    }
    /**
     * @return {?}
     */
    mousedown() {
        this.mouseDownHold = true;
    }
    /**
     * @return {?}
     */
    mouseup() {
        this.mouseDownHold = false;
    }
}
CollapsibleTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-table',
                template: `<ng-content></ng-content>`,
                providers: [
                    CollapsibleService
                ],
                styles: [`
        :host {
            display: table;
            position: relative;
            width: 100%;
            border-collapse: collapse;
        }

        :host thead {
            border-bottom: 1px solid #d0d0d0;
        }

        :host /deep/ tbody /deep/ collapsible-table-row {
            cursor: pointer;
        }

        :host /deep/ collapsible-table-row th,
        :host /deep/ collapsible-table-row td {
            border-radius: 0;
        }

        :host[bordered='true'] {
            border-top: 1px solid #d0d0d0;
            border-right: 1px solid #d0d0d0;
            border-left: 1px solid #d0d0d0;
        }

        :host[bordered='true'] /deep/ collapsible-table-row,
        :host[borderedHorizontally='true'] /deep/ collapsible-table-row {
            border-bottom: 1px solid #d0d0d0;
        }

        :host[bordered='true'] /deep/ collapsible-table-row th,
        :host[bordered='true'] /deep/ collapsible-table-row td,
        :host[borderedVertically='true'] /deep/ collapsible-table-row th:not(:last-child),
        :host[borderedVertically='true'] /deep/ collapsible-table-row td:not(:last-child) {
            border-right: 1px solid #d0d0d0;
        }

        :host(.centered) /deep/ * {
            text-align: center;
        }

        :host(.noTextSelect) /deep/ collapsible-table-row th,
        :host(.noTextSelect) /deep/ collapsible-table-row td {
            user-select: none;
        }
    `]
            }] }
];
/** @nocollapse */
CollapsibleTableComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CollapsibleService }
];
CollapsibleTableComponent.propDecorators = {
    bordered: [{ type: Input }, { type: HostBinding, args: ['attr.bordered',] }],
    borderedHorizontally: [{ type: Input }, { type: HostBinding, args: ['attr.borderedHorizontally',] }],
    borderedVertically: [{ type: Input }, { type: HostBinding, args: ['attr.borderedVertically',] }],
    striped: [{ type: Input }, { type: HostBinding, args: ['attr.striped',] }],
    stripedOddColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedOddColor',] }],
    stripedOddTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedOddTextColor',] }],
    stripedEvenColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedEvenColor',] }],
    stripedEvenTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedEvenTextColor',] }],
    highlight: [{ type: Input }, { type: HostBinding, args: ['attr.highlight',] }],
    highlightColor: [{ type: Input }, { type: HostBinding, args: ['attr.highlightColor',] }],
    highlightTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.highlightTextColor',] }],
    activeColor: [{ type: Input }, { type: HostBinding, args: ['attr.activeColor',] }],
    activeTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.activeTextColor',] }],
    centered: [{ type: Input }, { type: HostBinding, args: ['class.centered',] }, { type: HostBinding, args: ['attr.centered',] }],
    responsive: [{ type: Input }, { type: HostBinding, args: ['attr.responsive',] }],
    select: [{ type: Input }, { type: HostBinding, args: ['attr.select',] }],
    selectMultipleRows: [{ type: Input }, { type: HostBinding, args: ['attr.selectMultipleRows',] }],
    selectColor: [{ type: Input }, { type: HostBinding, args: ['attr.selectColor',] }],
    selectTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.selectTextColor',] }],
    allowDeselectingRows: [{ type: Input }, { type: HostBinding, args: ['attr.allowDeselectingRows',] }],
    allowKeyboardNavigation: [{ type: Input }, { type: HostBinding, args: ['attr.allowKeyboardNavigation',] }],
    noTextSelect: [{ type: Input }, { type: HostBinding, args: ['class.noTextSelect',] }, { type: HostBinding, args: ['attr.noTextSelect',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    type: [{ type: Input }, { type: HostBinding, args: ['attr.type',] }],
    collapsibleTableRows: [{ type: ContentChildren, args: [CollapsibleTableRowComponent,] }],
    keydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    mousedown: [{ type: HostListener, args: ['mousedown',] }],
    mouseup: [{ type: HostListener, args: ['mouseup',] }]
};
if (false) {
    /** @type {?} */
    CollapsibleTableComponent.prototype.bordered;
    /** @type {?} */
    CollapsibleTableComponent.prototype.borderedHorizontally;
    /** @type {?} */
    CollapsibleTableComponent.prototype.borderedVertically;
    /** @type {?} */
    CollapsibleTableComponent.prototype.striped;
    /** @type {?} */
    CollapsibleTableComponent.prototype.stripedOddColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.stripedOddTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.stripedEvenColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.stripedEvenTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.highlight;
    /** @type {?} */
    CollapsibleTableComponent.prototype.highlightColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.highlightTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.activeColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.activeTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.centered;
    /** @type {?} */
    CollapsibleTableComponent.prototype.responsive;
    /** @type {?} */
    CollapsibleTableComponent.prototype.select;
    /** @type {?} */
    CollapsibleTableComponent.prototype.selectMultipleRows;
    /** @type {?} */
    CollapsibleTableComponent.prototype.selectColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.selectTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.allowDeselectingRows;
    /** @type {?} */
    CollapsibleTableComponent.prototype.allowKeyboardNavigation;
    /** @type {?} */
    CollapsibleTableComponent.prototype.noTextSelect;
    /** @type {?} */
    CollapsibleTableComponent.prototype.fixedTableHeight;
    /** @type {?} */
    CollapsibleTableComponent.prototype.tabindex;
    /** @type {?} */
    CollapsibleTableComponent.prototype.selectedRows;
    /** @type {?} */
    CollapsibleTableComponent.prototype.type;
    /** @type {?} */
    CollapsibleTableComponent.prototype.collapsibleTableRows;
    /** @type {?} */
    CollapsibleTableComponent.prototype.mouseDownHold;
    /** @type {?} */
    CollapsibleTableComponent.prototype.el;
    /** @type {?} */
    CollapsibleTableComponent.prototype.collapsibleService;
}

//# sourceMappingURL=data:application/json;base64,