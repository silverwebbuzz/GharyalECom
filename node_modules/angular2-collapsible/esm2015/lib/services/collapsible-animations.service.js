/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
export class CollapsibleAnimationsService {
    /**
     * @param {?} triggerName
     * @return {?}
     */
    static collapsibleBodyAnimations(triggerName) {
        return [
            trigger(triggerName, [
                state('*', style({
                    height: 0,
                    paddingTop: 0,
                    paddingBottom: 0,
                    borderBottom: 'none',
                    boxShadow: 'none',
                    overflow: 'hidden'
                })),
                state('true', style({
                    boxShadow: 'inset 0 4px 4px -2px rgb(208, 208, 208), inset 0 -3px 2px -1px rgb(208, 208, 208)',
                    overflow: 'inherit'
                })),
                transition('* => true', animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeInQuad)),
                transition('* => false', animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeOutQuad))
            ])
        ];
    }
}
CollapsibleAnimationsService.collapsibleBodyAnimationDuration = '0.2s';
CollapsibleAnimationsService.easeInQuad = 'cubic-bezier(0.55, 0.085, 0.68, 0.53)';
CollapsibleAnimationsService.easeOutQuad = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
CollapsibleAnimationsService.collapsibleTableRowAnimationDuration = '0.2s';
CollapsibleAnimationsService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    CollapsibleAnimationsService.collapsibleBodyAnimationDuration;
    /** @type {?} */
    CollapsibleAnimationsService.easeInQuad;
    /** @type {?} */
    CollapsibleAnimationsService.easeOutQuad;
    /** @type {?} */
    CollapsibleAnimationsService.collapsibleTableRowAnimationDuration;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2libGUtYW5pbWF0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItY29sbGFwc2libGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY29sbGFwc2libGUtYW5pbWF0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBNEIsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzNHLE1BQU07Ozs7O0lBUUYsTUFBTSxDQUFDLHlCQUF5QixDQUFDLFdBQW1CO1FBQ2hELE9BQU87WUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFO2dCQUNqQixLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQztvQkFDYixNQUFNLEVBQUUsQ0FBQztvQkFDVCxVQUFVLEVBQUUsQ0FBQztvQkFDYixhQUFhLEVBQUUsQ0FBQztvQkFDaEIsWUFBWSxFQUFFLE1BQU07b0JBQ3BCLFNBQVMsRUFBRSxNQUFNO29CQUNqQixRQUFRLEVBQUUsUUFBUTtpQkFDckIsQ0FBQyxDQUFDO2dCQUNILEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO29CQUNoQixTQUFTLEVBQUUsbUZBQW1GO29CQUM5RixRQUFRLEVBQUUsU0FBUztpQkFDdEIsQ0FBQyxDQUFDO2dCQUNILFVBQVUsQ0FBQyxXQUFXLEVBQ2xCLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxnQ0FBZ0MsR0FBRyxHQUFHO29CQUN2RSw0QkFBNEIsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDakQsVUFBVSxDQUFDLFlBQVksRUFDbkIsT0FBTyxDQUFDLDRCQUE0QixDQUFDLGdDQUFnQyxHQUFHLEdBQUc7b0JBQ3ZFLDRCQUE0QixDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3JELENBQUM7U0FDTCxDQUFDO0tBQ0w7O2dFQTdCeUMsTUFBTTswQ0FDNUIsdUNBQXVDOzJDQUN0QyxzQ0FBc0M7b0VBRWIsTUFBTTs7WUFQdkQsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLCB0cmlnZ2VyLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIGFuaW1hdGUgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2Uge1xuXG4gICAgc3RhdGljIGNvbGxhcHNpYmxlQm9keUFuaW1hdGlvbkR1cmF0aW9uID0gJzAuMnMnO1xuICAgIHN0YXRpYyBlYXNlSW5RdWFkID0gJ2N1YmljLWJlemllcigwLjU1LCAwLjA4NSwgMC42OCwgMC41MyknO1xuICAgIHN0YXRpYyBlYXNlT3V0UXVhZCA9ICdjdWJpYy1iZXppZXIoMC4yNSwgMC40NiwgMC40NSwgMC45NCknO1xuXG4gICAgc3RhdGljIGNvbGxhcHNpYmxlVGFibGVSb3dBbmltYXRpb25EdXJhdGlvbiA9ICcwLjJzJztcblxuICAgIHN0YXRpYyBjb2xsYXBzaWJsZUJvZHlBbmltYXRpb25zKHRyaWdnZXJOYW1lOiBzdHJpbmcpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGFbXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0cmlnZ2VyKHRyaWdnZXJOYW1lLCBbXG4gICAgICAgICAgICAgICAgc3RhdGUoJyonLCBzdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgc3RhdGUoJ3RydWUnLCBzdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgNHB4IDRweCAtMnB4IHJnYigyMDgsIDIwOCwgMjA4KSwgaW5zZXQgMCAtM3B4IDJweCAtMXB4IHJnYigyMDgsIDIwOCwgMjA4KScsXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaW5oZXJpdCdcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbignKiA9PiB0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZShDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmNvbGxhcHNpYmxlQm9keUFuaW1hdGlvbkR1cmF0aW9uICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuZWFzZUluUXVhZCkpLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24oJyogPT4gZmFsc2UnLFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlKENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuY29sbGFwc2libGVCb2R5QW5pbWF0aW9uRHVyYXRpb24gKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgQ29sbGFwc2libGVBbmltYXRpb25zU2VydmljZS5lYXNlT3V0UXVhZCkpXG4gICAgICAgICAgICBdKVxuICAgICAgICBdO1xuICAgIH1cblxuICAgIC8qXG4gICAgc3RhdGljIGNvbGxhcHNpYmxlVGFibGVSb3dBbmltYXRpb25zKHRyaWdnZXJOYW1lOiBzdHJpbmcpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGFbXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0cmlnZ2VyKHRyaWdnZXJOYW1lLCBbXG4gICAgICAgICAgICAgICAgc3RhdGUoJ2FjdGl2ZScsIHN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xNSknXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgIHN0YXRlKCdpbmFjdGl2ZScsIHN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uKCcqID0+IGFjdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGUoQ29sbGFwc2libGVBbmltYXRpb25zU2VydmljZS5jb2xsYXBzaWJsZVRhYmxlUm93QW5pbWF0aW9uRHVyYXRpb24gKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgQ29sbGFwc2libGVBbmltYXRpb25zU2VydmljZS5lYXNlT3V0UXVhZCkpLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24oJyogPT4gaW5hY3RpdmUnLFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlKENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuY29sbGFwc2libGVUYWJsZVJvd0FuaW1hdGlvbkR1cmF0aW9uICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuZWFzZU91dFF1YWQpKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXTtcbiAgICB9XG4gICAgKi9cbn1cbiJdfQ==