/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class CollapsibleService {
    constructor() {
        this.headers = new Array();
        this.bodies = new Array();
    }
    /**
     * @return {?}
     */
    getType() {
        return this.type;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    setType(type) {
        this.type = type;
    }
    /**
     * @return {?}
     */
    getCollapsibleTable() {
        return this.collapsibleTable;
    }
    /**
     * @param {?} table
     * @return {?}
     */
    setCollapsibleTable(table) {
        this.collapsibleTable = table;
    }
    /**
     * @param {?} header
     * @return {?}
     */
    addListHeader(header) {
        this.headers.push(header);
    }
    /**
     * @param {?} body
     * @return {?}
     */
    addListBody(body) {
        this.bodies.push(body);
    }
    /**
     * @return {?}
     */
    collapseAll() {
        this.bodies.forEach((collapsibleBodyComponent) => {
            // set 'expanded' properties of all the CollapsibleBodyComponents to 'false'
            collapsibleBodyComponent.expanded = false;
            collapsibleBodyComponent.expandedState = collapsibleBodyComponent.expanded.toString();
            // emit 'toggleState' event for all the CollapsibleBodyComponents
            collapsibleBodyComponent.toggleState.emit(false);
        });
    }
}
CollapsibleService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    CollapsibleService.prototype.type;
    /** @type {?} */
    CollapsibleService.prototype.collapsibleTable;
    /** @type {?} */
    CollapsibleService.prototype.headers;
    /** @type {?} */
    CollapsibleService.prototype.bodies;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2libGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLWNvbGxhcHNpYmxlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2NvbGxhcHNpYmxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPM0MsTUFBTTs7dUJBSTJDLElBQUksS0FBSyxFQUE4QjtzQkFDMUMsSUFBSSxLQUFLLEVBQTRCOzs7OztJQUUvRSxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ3BCOzs7OztJQUVELE9BQU8sQ0FBQyxJQUFnQztRQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztLQUNwQjs7OztJQUVELG1CQUFtQjtRQUNmLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0tBQ2hDOzs7OztJQUVELG1CQUFtQixDQUFDLEtBQWdDO1FBQ2hELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7S0FDakM7Ozs7O0lBRUQsYUFBYSxDQUFDLE1BQWtDO1FBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzdCOzs7OztJQUVELFdBQVcsQ0FBQyxJQUE4QjtRQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxQjs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLHdCQUF3QixFQUFFLEVBQUU7O1lBRTdDLHdCQUF3QixDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDMUMsd0JBQXdCLENBQUMsYUFBYSxHQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs7WUFHdEYsd0JBQXdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwRCxDQUFDLENBQUM7S0FDTjs7O1lBekNKLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbGxhcHNpYmxlVGFibGVDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS10YWJsZS9jb2xsYXBzaWJsZS10YWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVIZWFkZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS1oZWFkZXIvY29sbGFwc2libGUtaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZUJvZHlDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS1ib2R5L2NvbGxhcHNpYmxlLWJvZHkuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlU2VydmljZSB7XG4gICAgdHlwZTogJ2FjY29yZGlvbicgfCAnZXhwYW5kYWJsZSc7XG5cbiAgICBjb2xsYXBzaWJsZVRhYmxlOiBDb2xsYXBzaWJsZVRhYmxlQ29tcG9uZW50O1xuICAgIGhlYWRlcnM6IEFycmF5PENvbGxhcHNpYmxlSGVhZGVyQ29tcG9uZW50PiA9IG5ldyBBcnJheTxDb2xsYXBzaWJsZUhlYWRlckNvbXBvbmVudD4oKTtcbiAgICBib2RpZXM6IEFycmF5PENvbGxhcHNpYmxlQm9keUNvbXBvbmVudD4gPSBuZXcgQXJyYXk8Q29sbGFwc2libGVCb2R5Q29tcG9uZW50PigpO1xuXG4gICAgZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9XG5cbiAgICBzZXRUeXBlKHR5cGU6ICdhY2NvcmRpb24nIHwgJ2V4cGFuZGFibGUnKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuXG4gICAgZ2V0Q29sbGFwc2libGVUYWJsZSgpOiBDb2xsYXBzaWJsZVRhYmxlQ29tcG9uZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGFwc2libGVUYWJsZTtcbiAgICB9XG5cbiAgICBzZXRDb2xsYXBzaWJsZVRhYmxlKHRhYmxlOiBDb2xsYXBzaWJsZVRhYmxlQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuY29sbGFwc2libGVUYWJsZSA9IHRhYmxlO1xuICAgIH1cblxuICAgIGFkZExpc3RIZWFkZXIoaGVhZGVyOiBDb2xsYXBzaWJsZUhlYWRlckNvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmhlYWRlcnMucHVzaChoZWFkZXIpO1xuICAgIH1cblxuICAgIGFkZExpc3RCb2R5KGJvZHk6IENvbGxhcHNpYmxlQm9keUNvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJvZGllcy5wdXNoKGJvZHkpO1xuICAgIH1cblxuICAgIGNvbGxhcHNlQWxsKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJvZGllcy5mb3JFYWNoKChjb2xsYXBzaWJsZUJvZHlDb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgIC8vIHNldCAnZXhwYW5kZWQnIHByb3BlcnRpZXMgb2YgYWxsIHRoZSBDb2xsYXBzaWJsZUJvZHlDb21wb25lbnRzIHRvICdmYWxzZSdcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlQm9keUNvbXBvbmVudC5leHBhbmRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29sbGFwc2libGVCb2R5Q29tcG9uZW50LmV4cGFuZGVkU3RhdGUgPSBjb2xsYXBzaWJsZUJvZHlDb21wb25lbnQuZXhwYW5kZWQudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgLy8gZW1pdCAndG9nZ2xlU3RhdGUnIGV2ZW50IGZvciBhbGwgdGhlIENvbGxhcHNpYmxlQm9keUNvbXBvbmVudHNcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlQm9keUNvbXBvbmVudC50b2dnbGVTdGF0ZS5lbWl0KGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19