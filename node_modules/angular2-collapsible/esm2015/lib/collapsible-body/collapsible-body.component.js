/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, HostBinding, Output, EventEmitter } from '@angular/core';
import { CollapsibleService } from '../services/collapsible.service';
import { CollapsibleEventService } from '../services/collapsible-event.service';
import { CollapsibleAnimationsService } from '../services/collapsible-animations.service';
export class CollapsibleBodyComponent {
    /**
     * @param {?} el
     * @param {?} collapsibleService
     * @param {?} eventService
     */
    constructor(el, collapsibleService, eventService) {
        this.el = el;
        this.collapsibleService = collapsibleService;
        this.eventService = eventService;
        this.toggleState = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.eventService.toggleCollapsibleItem$.subscribe(() => {
            this.toggleCollapsibleItem();
        });
    }
    /**
     * @return {?}
     */
    hasContent() {
        for (const child of this.el.nativeElement.childNodes) {
            if ((/** @type {?} */ (child)).tagName != null) {
                return true;
            }
        }
        return false;
    }
    /**
     * @return {?}
     */
    toggleCollapsibleItem() {
        // toggle body's state only if it has any childs
        if (this.hasContent()) {
            if (this.collapsibleService.getType() === 'accordion') {
                /** @type {?} */
                const tempExpanded = this.expanded;
                this.collapsibleService.collapseAll();
                this.expanded = tempExpanded;
            }
            this.expanded = !this.expanded;
            this.expandedState = this.expanded.toString();
            // emit 'toggleState' event
            this.toggleState.emit(this.expanded);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.hasContent()) {
            for (const key of Object.keys(changes)) {
                if (key === 'expanded' &&
                    changes["expanded"].currentValue != null) {
                    // this.expanded = changes.expanded.currentValue;
                    this.expandedState = this.expanded.toString();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.eventService.unsubscribe();
    }
}
CollapsibleBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-body',
                template: `<ng-content></ng-content>`,
                animations: CollapsibleAnimationsService.collapsibleBodyAnimations('collapsibleBodyState'),
                styles: [`
        :host {
            display: block;
            border-bottom: 1px solid #ddd;
            box-sizing: border-box;
            padding: 2rem;
        }

        .side-nav :host {
            padding: 0;
        }

        .side-nav :host,
        .side-nav.fixed :host {
            border: 0;
            background-color: #fff;
        }
    `]
            }] }
];
/** @nocollapse */
CollapsibleBodyComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CollapsibleService },
    { type: CollapsibleEventService }
];
CollapsibleBodyComponent.propDecorators = {
    expandedState: [{ type: HostBinding, args: ['@collapsibleBodyState',] }],
    expanded: [{ type: Input }],
    toggleState: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CollapsibleBodyComponent.prototype.expandedState;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.expanded;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.toggleState;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.el;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.collapsibleService;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.eventService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2libGUtYm9keS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi1jb2xsYXBzaWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jb2xsYXBzaWJsZS1ib2R5L2NvbGxhcHNpYmxlLWJvZHkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUVULEtBQUssRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUM5QixNQUFNLEVBQUUsWUFBWSxFQUN2QixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQXlCMUYsTUFBTTs7Ozs7O0lBUUYsWUFDWSxJQUNBLG9CQUNBO1FBRkEsT0FBRSxHQUFGLEVBQUU7UUFDRix1QkFBa0IsR0FBbEIsa0JBQWtCO1FBQ2xCLGlCQUFZLEdBQVosWUFBWTsyQkFMQSxJQUFJLFlBQVksRUFBVztLQUtHOzs7O0lBRXRELFFBQVE7UUFDSixJQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDcEQsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7U0FDaEMsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCxVQUFVO1FBQ04sS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUU7WUFDbEQsSUFBSSxtQkFBVSxLQUFLLEVBQUMsQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO2dCQUNsQyxPQUFPLElBQUksQ0FBQzthQUNmO1NBQ0o7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNoQjs7OztJQUVELHFCQUFxQjs7UUFFakIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDbkIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLEtBQUssV0FBVyxFQUFFOztnQkFDbkQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQzthQUNoQztZQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQy9CLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs7WUFHOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3hDO0tBQ0o7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ25CLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDcEMsSUFBSSxHQUFHLEtBQUssVUFBVTtvQkFDbEIsT0FBTyxhQUFVLFlBQVksSUFBSSxJQUFJLEVBQUU7O29CQUV2QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7aUJBQ2pEO2FBQ0o7U0FDSjtLQUNKOzs7O0lBSUQsV0FBVztRQUNQLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDbkM7OztZQW5GSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFLDJCQUEyQjtnQkFtQnJDLFVBQVUsRUFBRSw0QkFBNEIsQ0FBQyx5QkFBeUIsQ0FBQyxzQkFBc0IsQ0FBQzt5QkFsQmpGOzs7Ozs7Ozs7Ozs7Ozs7OztLQWlCUjthQUVKOzs7O1lBOUJVLFVBQVU7WUFJWixrQkFBa0I7WUFDbEIsdUJBQXVCOzs7NEJBMkIzQixXQUFXLFNBQUMsdUJBQXVCO3VCQUduQyxLQUFLOzBCQUVMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLFxuICAgIElucHV0LCBFbGVtZW50UmVmLCBIb3N0QmluZGluZyxcbiAgICBPdXRwdXQsIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29sbGFwc2libGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29sbGFwc2libGUuc2VydmljZSc7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZUV2ZW50U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbGxhcHNpYmxlLWV2ZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVBbmltYXRpb25zU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbGxhcHNpYmxlLWFuaW1hdGlvbnMuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnY29sbGFwc2libGUtYm9keScsXG4gICAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgcGFkZGluZzogMnJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5zaWRlLW5hdiA6aG9zdCB7XG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLnNpZGUtbmF2IDpob3N0LFxuICAgICAgICAuc2lkZS1uYXYuZml4ZWQgOmhvc3Qge1xuICAgICAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuICAgIGBdLFxuICAgIGFuaW1hdGlvbnM6IENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuY29sbGFwc2libGVCb2R5QW5pbWF0aW9ucygnY29sbGFwc2libGVCb2R5U3RhdGUnKVxufSlcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZUJvZHlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBASG9zdEJpbmRpbmcoJ0Bjb2xsYXBzaWJsZUJvZHlTdGF0ZScpXG4gICAgZXhwYW5kZWRTdGF0ZTogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgZXhwYW5kZWQ6IGJvb2xlYW47XG5cbiAgICBAT3V0cHV0KCkgdG9nZ2xlU3RhdGUgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSBjb2xsYXBzaWJsZVNlcnZpY2U6IENvbGxhcHNpYmxlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBldmVudFNlcnZpY2U6IENvbGxhcHNpYmxlRXZlbnRTZXJ2aWNlKSB7IH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmV2ZW50U2VydmljZS50b2dnbGVDb2xsYXBzaWJsZUl0ZW0kLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUNvbGxhcHNpYmxlSXRlbSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYXNDb250ZW50KCk6IGJvb2xlYW4ge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jaGlsZE5vZGVzKSB7XG4gICAgICAgICAgICBpZiAoKDxFbGVtZW50PmNoaWxkKS50YWdOYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdG9nZ2xlQ29sbGFwc2libGVJdGVtKCkge1xuICAgICAgICAvLyB0b2dnbGUgYm9keSdzIHN0YXRlIG9ubHkgaWYgaXQgaGFzIGFueSBjaGlsZHNcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29udGVudCgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xsYXBzaWJsZVNlcnZpY2UuZ2V0VHlwZSgpID09PSAnYWNjb3JkaW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBFeHBhbmRlZCA9IHRoaXMuZXhwYW5kZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzaWJsZVNlcnZpY2UuY29sbGFwc2VBbGwoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZGVkID0gdGVtcEV4cGFuZGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuICAgICAgICAgICAgdGhpcy5leHBhbmRlZFN0YXRlID0gdGhpcy5leHBhbmRlZC50b1N0cmluZygpO1xuXG4gICAgICAgICAgICAvLyBlbWl0ICd0b2dnbGVTdGF0ZScgZXZlbnRcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlU3RhdGUuZW1pdCh0aGlzLmV4cGFuZGVkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29udGVudCgpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhjaGFuZ2VzKSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdleHBhbmRlZCcgJiZcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5leHBhbmRlZC5jdXJyZW50VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmV4cGFuZGVkID0gY2hhbmdlcy5leHBhbmRlZC5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kZWRTdGF0ZSA9IHRoaXMuZXhwYW5kZWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNYWtlcyBzdXJlIHdlIGRvbid0IGhhdmUgYSBtZW1vcnkgbGVhayBieSBkZXN0cm95aW5nIHRoZVxuICAgIC8vIFN1YnNjcmlwdGlvbiB3aGVuIG91ciBjb21wb25lbnQgaXMgZGVzdHJveWVkXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG59XG4iXX0=