/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, ViewChildren } from '@angular/core';
import { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';
import { CollapsibleService } from '../services/collapsible.service';
import { Subject } from 'rxjs';
export class CollapsibleTableRowDetailComponent {
    /**
     * @param {?} collapsibleService
     */
    constructor(collapsibleService) {
        this.collapsibleService = collapsibleService;
        this.subject = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subject.asObservable().subscribe(() => {
            this.viewListBodies.forEach((item) => {
                item.toggleCollapsibleItem();
            });
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // store list bodies in 'CollapsibleService'
        this.viewListBodies.forEach((item) => {
            this.collapsibleService.addListBody(item);
        });
    }
}
CollapsibleTableRowDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-table-row-detail',
                template: `
        <td colspan="100%">
            <collapsible-list-item>
                <collapsible-body>
                    <ng-content></ng-content>
                </collapsible-body>
            </collapsible-list-item>
        </td>
    `,
                styles: [`
        :host {
            display: table-row;
        }

        :host collapsible-body,
        :host td {
            padding: 0;
        }
    `]
            }] }
];
/** @nocollapse */
CollapsibleTableRowDetailComponent.ctorParameters = () => [
    { type: CollapsibleService }
];
CollapsibleTableRowDetailComponent.propDecorators = {
    expanded: [{ type: Input }],
    viewListBodies: [{ type: ViewChildren, args: [CollapsibleBodyComponent,] }]
};
if (false) {
    /** @type {?} */
    CollapsibleTableRowDetailComponent.prototype.subject;
    /** @type {?} */
    CollapsibleTableRowDetailComponent.prototype.expanded;
    /** @type {?} */
    CollapsibleTableRowDetailComponent.prototype.viewListBodies;
    /** @type {?} */
    CollapsibleTableRowDetailComponent.prototype.collapsibleService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2libGUtdGFibGUtcm93LWRldGFpbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi1jb2xsYXBzaWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jb2xsYXBzaWJsZS10YWJsZS1yb3ctZGV0YWlsL2NvbGxhcHNpYmxlLXRhYmxlLXJvdy1kZXRhaWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUVULEtBQUssRUFDTCxZQUFZLEVBQ2YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFFMUYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFckUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQXdCL0IsTUFBTTs7OztJQU9GLFlBQW9CLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO3VCQU5sQyxJQUFJLE9BQU8sRUFBTztLQU1xQjs7OztJQUUvRCxRQUFRO1FBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2FBQ2hDLENBQUMsQ0FBQztTQUNOLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsZUFBZTs7UUFFWCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0MsQ0FBQyxDQUFDO0tBQ047OztZQTVDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDhCQUE4QjtnQkFDeEMsUUFBUSxFQUFFOzs7Ozs7OztLQVFUO3lCQUNROzs7Ozs7Ozs7S0FTUjthQUNKOzs7O1lBekJRLGtCQUFrQjs7O3VCQTZCdEIsS0FBSzs2QkFFTCxZQUFZLFNBQUMsd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgT25Jbml0LCBBZnRlclZpZXdJbml0LFxuICAgIElucHV0LFxuICAgIFZpZXdDaGlsZHJlblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29sbGFwc2libGVCb2R5Q29tcG9uZW50IH0gZnJvbSAnLi4vY29sbGFwc2libGUtYm9keS9jb2xsYXBzaWJsZS1ib2R5LmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IENvbGxhcHNpYmxlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbGxhcHNpYmxlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnY29sbGFwc2libGUtdGFibGUtcm93LWRldGFpbCcsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPHRkIGNvbHNwYW49XCIxMDAlXCI+XG4gICAgICAgICAgICA8Y29sbGFwc2libGUtbGlzdC1pdGVtPlxuICAgICAgICAgICAgICAgIDxjb2xsYXBzaWJsZS1ib2R5PlxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPC9jb2xsYXBzaWJsZS1ib2R5PlxuICAgICAgICAgICAgPC9jb2xsYXBzaWJsZS1saXN0LWl0ZW0+XG4gICAgICAgIDwvdGQ+XG4gICAgYCxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlLXJvdztcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3N0IGNvbGxhcHNpYmxlLWJvZHksXG4gICAgICAgIDpob3N0IHRkIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIH1cbiAgICBgXVxufSlcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZVRhYmxlUm93RGV0YWlsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgICBzdWJqZWN0OiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgICBASW5wdXQoKSBleHBhbmRlZDogYm9vbGVhbjtcblxuICAgIEBWaWV3Q2hpbGRyZW4oQ29sbGFwc2libGVCb2R5Q29tcG9uZW50KSB2aWV3TGlzdEJvZGllczogQXJyYXk8Q29sbGFwc2libGVCb2R5Q29tcG9uZW50PjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29sbGFwc2libGVTZXJ2aWNlOiBDb2xsYXBzaWJsZVNlcnZpY2UpIHsgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc3ViamVjdC5hc09ic2VydmFibGUoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3TGlzdEJvZGllcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS50b2dnbGVDb2xsYXBzaWJsZUl0ZW0oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIC8vIHN0b3JlIGxpc3QgYm9kaWVzIGluICdDb2xsYXBzaWJsZVNlcnZpY2UnXG4gICAgICAgIHRoaXMudmlld0xpc3RCb2RpZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb2xsYXBzaWJsZVNlcnZpY2UuYWRkTGlzdEJvZHkoaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==