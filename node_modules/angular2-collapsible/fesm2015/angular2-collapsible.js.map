{"version":3,"file":"angular2-collapsible.js.map","sources":["ng://angular2-collapsible/lib/services/collapsible.service.ts","ng://angular2-collapsible/lib/services/collapsible-event.service.ts","ng://angular2-collapsible/lib/services/collapsible-animations.service.ts","ng://angular2-collapsible/lib/collapsible-body/collapsible-body.component.ts","ng://angular2-collapsible/lib/collapsible-list-item/collapsible-list-item.component.ts","ng://angular2-collapsible/lib/collapsible-list/collapsible-list.component.ts","ng://angular2-collapsible/lib/collapsible-header/collapsible-header.component.ts","ng://angular2-collapsible/lib/collapsible-table-row-detail/collapsible-table-row-detail.component.ts","ng://angular2-collapsible/lib/collapsible-table-row/collapsible-table-row.component.ts","ng://angular2-collapsible/lib/collapsible-table/collapsible-table.component.ts","ng://angular2-collapsible/lib/collapsible.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { CollapsibleTableComponent } from '../collapsible-table/collapsible-table.component';\nimport { CollapsibleHeaderComponent } from '../collapsible-header/collapsible-header.component';\nimport { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';\n\n@Injectable()\nexport class CollapsibleService {\n    type: 'accordion' | 'expandable';\n\n    collapsibleTable: CollapsibleTableComponent;\n    headers: Array<CollapsibleHeaderComponent> = new Array<CollapsibleHeaderComponent>();\n    bodies: Array<CollapsibleBodyComponent> = new Array<CollapsibleBodyComponent>();\n\n    getType() {\n        return this.type;\n    }\n\n    setType(type: 'accordion' | 'expandable') {\n        this.type = type;\n    }\n\n    getCollapsibleTable(): CollapsibleTableComponent {\n        return this.collapsibleTable;\n    }\n\n    setCollapsibleTable(table: CollapsibleTableComponent) {\n        this.collapsibleTable = table;\n    }\n\n    addListHeader(header: CollapsibleHeaderComponent): void {\n        this.headers.push(header);\n    }\n\n    addListBody(body: CollapsibleBodyComponent): void {\n        this.bodies.push(body);\n    }\n\n    collapseAll(): void {\n        this.bodies.forEach((collapsibleBodyComponent) => {\n            // set 'expanded' properties of all the CollapsibleBodyComponents to 'false'\n            collapsibleBodyComponent.expanded = false;\n            collapsibleBodyComponent.expandedState = collapsibleBodyComponent.expanded.toString();\n\n            // emit 'toggleState' event for all the CollapsibleBodyComponents\n            collapsibleBodyComponent.toggleState.emit(false);\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nexport class CollapsibleEvent {\n    type: string;\n}\n\n@Injectable()\nexport class CollapsibleEventService {\n    type: 'accordion' | 'expandable';\n    // Observable string sources\n    private toggleCollapsibleItemSource = new Subject<any>();\n\n    // Observable string streams\n    toggleCollapsibleItem$ = this.toggleCollapsibleItemSource.asObservable();\n\n    // Toggle collapsible item\n    toggleCollapsibleItem(event?: CollapsibleEvent) {\n        this.toggleCollapsibleItemSource.next(event);\n    }\n\n    unsubscribe() {\n        this.toggleCollapsibleItemSource.unsubscribe();\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { AnimationTriggerMetadata, trigger, state, style, transition, animate } from '@angular/animations';\n\n@Injectable()\nexport class CollapsibleAnimationsService {\n\n    static collapsibleBodyAnimationDuration = '0.2s';\n    static easeInQuad = 'cubic-bezier(0.55, 0.085, 0.68, 0.53)';\n    static easeOutQuad = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n\n    static collapsibleTableRowAnimationDuration = '0.2s';\n\n    static collapsibleBodyAnimations(triggerName: string): AnimationTriggerMetadata[] {\n        return [\n            trigger(triggerName, [\n                state('*', style({\n                    height: 0,\n                    paddingTop: 0,\n                    paddingBottom: 0,\n                    borderBottom: 'none',\n                    boxShadow: 'none',\n                    overflow: 'hidden'\n                })),\n                state('true', style({\n                    boxShadow: 'inset 0 4px 4px -2px rgb(208, 208, 208), inset 0 -3px 2px -1px rgb(208, 208, 208)',\n                    overflow: 'inherit'\n                })),\n                transition('* => true',\n                    animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeInQuad)),\n                transition('* => false',\n                    animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeOutQuad))\n            ])\n        ];\n    }\n\n    /*\n    static collapsibleTableRowAnimations(triggerName: string): AnimationTriggerMetadata[] {\n        return [\n            trigger(triggerName, [\n                state('active', style({\n                    background: 'rgba(0, 0, 0, 0.15)'\n                })),\n                state('inactive', style({\n                    background: 'transparent'\n                })),\n                transition('* => active',\n                    animate(CollapsibleAnimationsService.collapsibleTableRowAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeOutQuad)),\n                transition('* => inactive',\n                    animate(CollapsibleAnimationsService.collapsibleTableRowAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeOutQuad))\n            ])\n        ];\n    }\n    */\n}\n","import {\n    Component,\n    OnInit, OnDestroy, OnChanges, SimpleChanges,\n    Input, ElementRef, HostBinding,\n    Output, EventEmitter\n} from '@angular/core';\n\nimport { CollapsibleService } from '../services/collapsible.service';\nimport { CollapsibleEventService } from '../services/collapsible-event.service';\nimport { CollapsibleAnimationsService } from '../services/collapsible-animations.service';\n\n@Component({\n    selector: 'collapsible-body',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: block;\n            border-bottom: 1px solid #ddd;\n            box-sizing: border-box;\n            padding: 2rem;\n        }\n\n        .side-nav :host {\n            padding: 0;\n        }\n\n        .side-nav :host,\n        .side-nav.fixed :host {\n            border: 0;\n            background-color: #fff;\n        }\n    `],\n    animations: CollapsibleAnimationsService.collapsibleBodyAnimations('collapsibleBodyState')\n})\nexport class CollapsibleBodyComponent implements OnInit, OnChanges, OnDestroy {\n    @HostBinding('@collapsibleBodyState')\n    expandedState: string;\n\n    @Input() expanded: boolean;\n\n    @Output() toggleState = new EventEmitter<boolean>();\n\n    constructor(\n        private el: ElementRef,\n        private collapsibleService: CollapsibleService,\n        private eventService: CollapsibleEventService) { }\n\n    ngOnInit() {\n        this.eventService.toggleCollapsibleItem$.subscribe(() => {\n            this.toggleCollapsibleItem();\n        });\n    }\n\n    hasContent(): boolean {\n        for (const child of this.el.nativeElement.childNodes) {\n            if ((<Element>child).tagName != null) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    toggleCollapsibleItem() {\n        // toggle body's state only if it has any childs\n        if (this.hasContent()) {\n            if (this.collapsibleService.getType() === 'accordion') {\n                const tempExpanded = this.expanded;\n                this.collapsibleService.collapseAll();\n                this.expanded = tempExpanded;\n            }\n            this.expanded = !this.expanded;\n            this.expandedState = this.expanded.toString();\n\n            // emit 'toggleState' event\n            this.toggleState.emit(this.expanded);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.hasContent()) {\n            for (const key of Object.keys(changes)) {\n                if (key === 'expanded' &&\n                    changes.expanded.currentValue != null) {\n                    // this.expanded = changes.expanded.currentValue;\n                    this.expandedState = this.expanded.toString();\n                }\n            }\n        }\n    }\n\n    // Makes sure we don't have a memory leak by destroying the\n    // Subscription when our component is destroyed\n    ngOnDestroy() {\n        this.eventService.unsubscribe();\n    }\n\n}\n","import {\n    Component,\n    AfterContentInit,\n    ContentChildren\n} from '@angular/core';\n\nimport { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';\n\nimport { CollapsibleService } from '../services/collapsible.service';\nimport { CollapsibleEventService } from '../services/collapsible-event.service';\n\n@Component({\n    selector: 'collapsible-list-item',\n    template: `\n        <ng-content select=\"collapsible-header\"></ng-content>\n        <ng-content select=\"collapsible-body\"></ng-content>\n    `,\n    providers: [CollapsibleEventService]\n})\nexport class CollapsibleListItemComponent implements AfterContentInit {\n\n    @ContentChildren(CollapsibleBodyComponent) contentListBodies: Array<CollapsibleBodyComponent>;\n\n    constructor(private collapsibleService: CollapsibleService) { }\n\n    ngAfterContentInit() {\n        // store list bodies in 'CollapsibleService'\n        this.contentListBodies.forEach((item) => {\n            this.collapsibleService.addListBody(item);\n        });\n    }\n\n}\n","import {\n  Component,\n  OnInit, OnChanges, SimpleChanges,\n  Input,\n  ContentChildren\n} from '@angular/core';\n\nimport { CollapsibleListItemComponent } from '../collapsible-list-item/collapsible-list-item.component';\n\nimport { CollapsibleService } from '../services/collapsible.service';\n\n@Component({\n  selector: 'collapsible-list',\n  template: `<ng-content select=\"collapsible-list-item\"></ng-content>`,\n  styles: [`\n    :host {\n      display: block;\n      margin: 0.5rem 0 1rem 0;\n      border-top: 1px solid #ddd;\n      border-right: 1px solid #ddd;\n      border-left: 1px solid #ddd;\n      box-shadow:\n        0 2px 2px 0 rgba(0, 0, 0, 0.14),\n        0 1px 5px 0 rgba(0, 0, 0, 0.12),\n        0 3px 1px -2px rgba(0, 0, 0, 0.2);\n    }\n\n    .side-nav :host,\n    .side-nav.fixed :host {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) > li {\n      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\n      margin: 0 24px;\n      transition: margin 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    }\n\n    .side-nav :host {\n      margin: 0;\n    }\n  `],\n  providers: [CollapsibleService]\n})\nexport class CollapsibleListComponent implements OnInit, OnChanges {\n  // component options\n  //\n  // describes the type of the collapsible list: 'accordion' or 'expandable'\n  @Input() type: 'accordion' | 'expandable' = 'accordion';\n\n  @ContentChildren(CollapsibleListItemComponent) contentListItems: Array<CollapsibleListItemComponent>;\n\n  constructor(private collapsibleService: CollapsibleService) { }\n\n  ngOnInit(): void {\n    this.collapsibleService.setType(this.type);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    for (const change in changes) {\n      if (change === 'type') {\n        this.type = changes.type.currentValue;\n        this.collapsibleService.setType(this.type);\n      }\n    }\n  }\n}\n","import { Component, HostListener } from '@angular/core';\n\nimport { CollapsibleEventService } from '../services/collapsible-event.service';\n\n@Component({\n    selector: 'collapsible-header',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: block;\n            cursor: pointer;\n            min-height: 3rem;\n            line-height: 3rem;\n            padding: 0 1rem;\n            background-color: #fff;\n            border-bottom: 1px solid #ddd;\n        }\n    `]\n})\nexport class CollapsibleHeaderComponent {\n\n    constructor(private eventService: CollapsibleEventService) { }\n\n    @HostListener('click')\n    click() {\n        this.eventService.toggleCollapsibleItem();\n    }\n\n}\n","import {\n    Component,\n    OnInit, AfterViewInit,\n    Input,\n    ViewChildren\n} from '@angular/core';\n\nimport { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';\n\nimport { CollapsibleService } from '../services/collapsible.service';\n\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'collapsible-table-row-detail',\n    template: `\n        <td colspan=\"100%\">\n            <collapsible-list-item>\n                <collapsible-body>\n                    <ng-content></ng-content>\n                </collapsible-body>\n            </collapsible-list-item>\n        </td>\n    `,\n    styles: [`\n        :host {\n            display: table-row;\n        }\n\n        :host collapsible-body,\n        :host td {\n            padding: 0;\n        }\n    `]\n})\nexport class CollapsibleTableRowDetailComponent implements OnInit, AfterViewInit {\n    subject: Subject<any> = new Subject<any>();\n\n    @Input() expanded: boolean;\n\n    @ViewChildren(CollapsibleBodyComponent) viewListBodies: Array<CollapsibleBodyComponent>;\n\n    constructor(private collapsibleService: CollapsibleService) { }\n\n    ngOnInit() {\n        this.subject.asObservable().subscribe(() => {\n            this.viewListBodies.forEach((item) => {\n                item.toggleCollapsibleItem();\n            });\n        });\n    }\n\n    ngAfterViewInit() {\n        // store list bodies in 'CollapsibleService'\n        this.viewListBodies.forEach((item) => {\n            this.collapsibleService.addListBody(item);\n        });\n    }\n}\n","import {\n    Component,\n    OnInit, AfterContentInit,\n    Input, HostBinding, HostListener,\n    ElementRef\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { CollapsibleTableRowDetailComponent } from '../collapsible-table-row-detail/collapsible-table-row-detail.component';\nimport { CollapsibleTableComponent } from '../collapsible-table/collapsible-table.component';\nimport { CollapsibleService } from '../services/collapsible.service';\n\n@Component({\n    selector: 'collapsible-table-row',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: table-row;\n            transition-property: background-color, color;\n        }\n    `],\n})\nexport class CollapsibleTableRowComponent implements OnInit, AfterContentInit {\n\n    private static EASE_OUT_QUAD = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n\n    public static DEFAULT_STRIPED_ODD_ROW_COLOR = 'rgba(242,242,242,0.8)';\n    public static DEFAULT_STRIPED_EVEN_ROW_COLOR = 'transparent';\n    public static DEFAULT_HIGHLIGHT_ROW_COLOR = 'rgba(222,222,222, 0.8)';\n    public static DEFAULT_ACTIVE_ROW_COLOR = 'rgba(212,212,212, 0.8)';\n    public static DEFAULT_SELECTED_ROW_COLOR = 'rgba(212,212,212, 0.8)';\n\n    public static DEFAULT_ROW_TEXT_COLOR = 'black';\n\n    @Input() detail: CollapsibleTableRowDetailComponent;\n\n    @HostBinding('style.color') rowTextColor: string;\n\n    @HostBinding('style.background-color') rowBackgroundColor: string;\n\n    @HostBinding('style.transition-duration') backgroundTransitionDuration = '0.3s';\n    // transition-timing-function: easeInQuad\n    @HostBinding('style.transition-timing-function')\n    backgroundTransitionTimingFunction = this.sanitizer\n        .bypassSecurityTrustStyle(CollapsibleTableRowComponent.EASE_OUT_QUAD);\n\n    @HostBinding('class.selected') selected: boolean;\n\n    isHeadRow = false;\n    isBodyRow = false;\n    isOddRow = false;\n    isEvenRow = false;\n    isParentStriped = false;\n    isParentHighlight = false;\n    parentAllowsSelect = false;\n    parentAllowsSelectMultipleRows = false;\n\n    parentStripedRowBackgroundColor: string;\n    parentStripedRowTextColor: string;\n    parentHighlightRowBackgroundColor: string;\n    parentHighlightRowTextColor: string;\n    activeRowBackgroundColor: string;\n    activeRowTextColor: string;\n    selectedRowBackgroundColor: string;\n    selectedRowTextColor: string;\n    parentAllowsDeselectingRows = false;\n\n    index: number;\n\n    private parentCollapsibleTable: CollapsibleTableComponent;\n    private prevSelectedRows: Array<number>;\n    private dragSelection = false;\n\n    constructor(\n        private el: ElementRef,\n        private sanitizer: DomSanitizer,\n        private collapsibleService: CollapsibleService) { }\n\n    ngOnInit() {\n        const elem: Element = this.el.nativeElement;\n        const tbody: Element = elem.parentElement;\n        if (tbody.tagName === 'TBODY') {\n            const collapsibleTableRows: NodeListOf<Element> = tbody.querySelectorAll('collapsible-table-row');\n            for (let i = 0; i < collapsibleTableRows.length; i++) {\n                const collapsibleTableRow: Element = collapsibleTableRows[i];\n                if (collapsibleTableRow === elem) {\n                    this.index = i + 1;\n                    break;\n                }\n            }\n        }\n\n        // retrieve parent CollapsibleTableComponent through the CollapsibleService\n        this.parentCollapsibleTable = this.collapsibleService.getCollapsibleTable();\n\n        if (this.parentCollapsibleTable != null) {\n            // check if collapsible-table is marked to show striped table\n            this.isParentStriped = this.parentCollapsibleTable.striped;\n\n            // check if collapsible-table is marked to highlight current row\n            this.isParentHighlight = this.parentCollapsibleTable.highlight;\n            this.parentHighlightRowBackgroundColor = this.parentCollapsibleTable.highlightColor ||\n                CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;\n            this.parentHighlightRowTextColor = this.parentCollapsibleTable.highlightTextColor ||\n                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n\n            // check if collapsible-table specifies the active row color\n            this.activeRowBackgroundColor = this.parentCollapsibleTable.activeColor ||\n                CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;\n            this.activeRowTextColor = this.parentCollapsibleTable.activeTextColor ||\n                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n\n            // check if collapsible-table allows selecting rows\n            this.parentAllowsSelect = this.parentCollapsibleTable.select;\n            this.parentAllowsSelectMultipleRows = this.parentCollapsibleTable.selectMultipleRows;\n\n            // check if collapsible-table specifies a color for the selected row\n            this.selectedRowBackgroundColor = this.parentCollapsibleTable.selectColor ||\n                CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;\n            this.selectedRowTextColor = this.parentCollapsibleTable.selectTextColor ||\n                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n\n            // check if collapsible-table allows to deselect rows\n            this.parentAllowsDeselectingRows = this.parentCollapsibleTable.allowDeselectingRows != null ?\n                this.parentCollapsibleTable.allowDeselectingRows : false;\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this.updateRow();\n    }\n\n    updateRow(): void {\n        const elem: Element = this.el.nativeElement;\n\n        // determine if the row is inside the 'thead'\n        const th = elem.querySelector('th');\n        if (th != null) {\n            this.isHeadRow = true;\n        }\n\n        // determine if the row is inside the 'tbody'\n        const td = elem.querySelector('td');\n        if (td != null) {\n            this.isBodyRow = true;\n            // determine if the row is 'odd' or 'event'\n            if (this.index % 2 === 0) {\n                this.isEvenRow = true;\n                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedEvenColor ||\n                    CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;\n                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedEvenTextColor ||\n                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n            } else {\n                this.isOddRow = true;\n                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedOddColor ||\n                    CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;\n                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedOddTextColor ||\n                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n            }\n\n            switch (true) {\n                case this.parentAllowsSelect && this.selected:\n                    this.rowBackgroundColor = this.selectedRowBackgroundColor;\n                    this.rowTextColor = this.selectedRowTextColor;\n                    break;\n                case this.isParentStriped:\n                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;\n                    this.rowTextColor = this.parentStripedRowTextColor;\n                    break;\n            }\n\n        }\n    }\n\n    getHeight(): number {\n        return this.el.nativeElement.offsetHeight;\n    }\n\n    private isLeftMouseButton(event: MouseEvent): boolean {\n        const button: number = event.button;\n        const which: number = event['which'];\n        const target = <HTMLElement>(event.target || event.srcElement || event.currentTarget);\n\n        if (['TR', 'TD'].indexOf(target.tagName) > -1) {\n            if ('button' in event) {\n                return button === 0;\n            } else {\n                return (which || button) === 1;\n            }\n        }\n\n        return false;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    mousedown(event: MouseEvent) {\n        // handle only if the Left mouse button pressed\n        // and the row is a body row\n        if (this.isLeftMouseButton(event) && this.isBodyRow) {\n            if (this.parentCollapsibleTable.noTextSelect) {\n                event.preventDefault();\n            }\n            if (this.isBodyRow) {\n                if (this.parentAllowsSelect && !this.parentAllowsDeselectingRows) {\n                    this.prevSelectedRows = this.parentCollapsibleTable.selectedRows;\n                    this.parentCollapsibleTable.clearSelectedRows();\n                    this.parentCollapsibleTable.deselectAllRows();\n                }\n                this.rowBackgroundColor = this.activeRowBackgroundColor;\n                this.rowTextColor = this.activeRowTextColor;\n            }\n        }\n    }\n\n    @HostListener('mouseup', ['$event'])\n    mouseup(event: MouseEvent) {\n        // handle only if the Left mouse button pressed\n        // and the row is a body row\n        if (this.isLeftMouseButton(event) && this.isBodyRow) {\n            // handle selection\n            if (this.parentAllowsSelect) {\n                if (!this.parentAllowsDeselectingRows) {\n                    this.parentCollapsibleTable.selectRow(this.index);\n                } else {\n                    if (!this.dragSelection) {\n                        this.parentCollapsibleTable.toggleRowSelection(this.index);\n                    }\n                }\n            }\n\n            // check row state\n            this.parentCollapsibleTable.updateTable();\n            /*switch (true) {\n                // parent allows selecting rows and the row is selected\n                case this.parentAllowsSelect && this.selected:\n                    this.rowBackgroundColor = this.selectedRowBackgroundColor;\n                    this.rowTextColor = this.selectedRowTextColor;\n                    this.parentCollapsibleTable.updateTable();\n                    break;\n                // highlighted\n                case this.isParentHighlight:\n                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;\n                    this.rowTextColor = this.parentHighlightRowTextColor;\n                    break;\n                // striped\n                case this.isParentStriped:\n                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;\n                    this.rowTextColor = this.parentStripedRowTextColor;\n                    break;\n                default:\n                    this.rowBackgroundColor = undefined;\n                    this.rowTextColor = undefined;\n                    break;\n            }*/\n\n            // select multiple rows using the 'Shift' key\n            if (this.parentAllowsSelect &&\n                this.parentAllowsSelectMultipleRows &&\n                event != null && event.shiftKey) {\n                if (this.prevSelectedRows != null &&\n                    this.prevSelectedRows.length > 0 &&\n                    this.parentCollapsibleTable.selectedRows.length > 0) {\n                    const rangeSelectedRows = this.prevSelectedRows.concat(this.parentCollapsibleTable.selectedRows);\n                    rangeSelectedRows.sort((a, b) => a - b);\n                    const firstRowIndex = Math.min.apply(null, rangeSelectedRows);\n                    const lastRowIndex = Math.max.apply(null, rangeSelectedRows);\n\n                    this.parentCollapsibleTable.selectRows(firstRowIndex, lastRowIndex);\n                }\n            }\n\n            // set dragSelection flag to false. Prevents selection drag behavior\n            this.dragSelection = false;\n\n            // focus the collapsible table\n            this.parentCollapsibleTable.focus();\n        }\n    }\n\n    @HostListener('mouseenter', ['$event'])\n    mouseenter(event: MouseEvent) {\n        // handle only if the row is a body row\n        if (this.isBodyRow) {\n            switch (true) {\n                // the use is trying to select multiple rows by holding a mouse button\n                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:\n                    this.parentCollapsibleTable.selectRow(this.index);\n                    this.dragSelection = true;\n                    break;\n                // parent allows selecting rows and the row is selected\n                case this.parentAllowsSelect && this.selected:\n                    break;\n                // highlighted\n                case this.isParentHighlight:\n                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;\n                    this.rowTextColor = this.parentHighlightRowTextColor;\n                    break;\n            }\n        }\n    }\n\n    @HostListener('mouseleave', ['$event'])\n    mouseleave(event: MouseEvent) {\n        // handle only if the row is a body row\n        if (this.isBodyRow) {\n            // check row state\n            switch (true) {\n                // the use is trying to select multiple rows by holding a mouse button\n                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:\n                    this.parentCollapsibleTable.selectRow(this.index);\n                    this.dragSelection = false;\n                    break;\n                // parent allows selecting rows and the row is selected\n                case this.parentAllowsSelect && this.selected:\n                    break;\n                // stripped\n                case this.isParentStriped:\n                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;\n                    this.rowTextColor = this.parentStripedRowTextColor;\n                    break;\n                default:\n                    this.rowBackgroundColor = undefined;\n                    this.rowTextColor = undefined;\n                    break;\n            }\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    click(event: MouseEvent) {\n        if (this.detail != null) {\n            const target = <HTMLElement>(event.target || event.srcElement || event.currentTarget);\n\n            if (target != null && ['TR', 'TD'].indexOf(target.tagName) > -1) {\n                this.detail.subject.next();\n            }\n        }\n    }\n\n}\n","import {\n    Component,\n    OnInit, OnChanges, SimpleChanges, AfterContentInit,\n    Input, HostBinding, HostListener,\n    ElementRef, ContentChildren\n} from '@angular/core';\n\nimport { CollapsibleTableRowComponent } from '../collapsible-table-row/collapsible-table-row.component';\nimport { CollapsibleService } from '../services/collapsible.service';\n\n@Component({\n    selector: 'collapsible-table',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: table;\n            position: relative;\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        :host thead {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host /deep/ tbody /deep/ collapsible-table-row {\n            cursor: pointer;\n        }\n\n        :host /deep/ collapsible-table-row th,\n        :host /deep/ collapsible-table-row td {\n            border-radius: 0;\n        }\n\n        :host[bordered='true'] {\n            border-top: 1px solid #d0d0d0;\n            border-right: 1px solid #d0d0d0;\n            border-left: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row,\n        :host[borderedHorizontally='true'] /deep/ collapsible-table-row {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row th,\n        :host[bordered='true'] /deep/ collapsible-table-row td,\n        :host[borderedVertically='true'] /deep/ collapsible-table-row th:not(:last-child),\n        :host[borderedVertically='true'] /deep/ collapsible-table-row td:not(:last-child) {\n            border-right: 1px solid #d0d0d0;\n        }\n\n        :host(.centered) /deep/ * {\n            text-align: center;\n        }\n\n        :host(.noTextSelect) /deep/ collapsible-table-row th,\n        :host(.noTextSelect) /deep/ collapsible-table-row td {\n            user-select: none;\n        }\n    `],\n    providers: [\n        CollapsibleService\n    ]\n})\nexport class CollapsibleTableComponent implements OnInit, OnChanges, AfterContentInit {\n    // component options\n    //\n    // makes the table bordered\n    @Input()\n    @HostBinding('attr.bordered') bordered: boolean;\n\n    // makes the table bordered horizontally only\n    @Input()\n    @HostBinding('attr.borderedHorizontally') borderedHorizontally: boolean;\n\n    // makes the table bordered vertically only\n    @Input()\n    @HostBinding('attr.borderedVertically') borderedVertically: boolean;\n\n    // makes the table striped\n    @Input()\n    @HostBinding('attr.striped') striped: boolean;\n\n    // a color of an odd striped row\n    @Input()\n    @HostBinding('attr.stripedOddColor') stripedOddColor: string;\n\n    // a text color of an odd striped row\n    @Input()\n    @HostBinding('attr.stripedOddTextColor') stripedOddTextColor: string;\n\n    // a color of an even striped row\n    @Input()\n    @HostBinding('attr.stripedEvenColor') stripedEvenColor: string;\n\n    // a text color of an even striped row\n    @Input()\n    @HostBinding('attr.stripedEvenTextColor') stripedEvenTextColor: string;\n\n    // highlight table rows on mouse hover\n    @Input()\n    @HostBinding('attr.highlight') highlight: boolean;\n\n    // a color of a highlighted row\n    @Input()\n    @HostBinding('attr.highlightColor') highlightColor: string;\n\n    // a text color of a highlighted row\n    @Input()\n    @HostBinding('attr.highlightTextColor') highlightTextColor: string;\n\n    // a color of an active row\n    @Input()\n    @HostBinding('attr.activeColor') activeColor: string;\n\n    // a text color of an active row\n    @Input()\n    @HostBinding('attr.activeTextColor') activeTextColor: string;\n\n    // center align all the text in the table\n    @Input()\n    @HostBinding('class.centered')\n    @HostBinding('attr.centered') centered: boolean;\n\n    // makes the table horizontally scrollable on smaller screen widths\n    @Input()\n    @HostBinding('attr.responsive') responsive: boolean;\n\n    // allows to select rows\n    @Input()\n    @HostBinding('attr.select') select: boolean;\n\n    // allows to select multiple rows\n    @Input()\n    @HostBinding('attr.selectMultipleRows') selectMultipleRows: boolean;\n\n    // a color of a selected row\n    @Input()\n    @HostBinding('attr.selectColor') selectColor: string;\n\n    // a text color of a selected row\n    @Input()\n    @HostBinding('attr.selectTextColor') selectTextColor: string;\n\n    // allows deselecting selected rows\n    @Input()\n    @HostBinding('attr.allowDeselectingRows') allowDeselectingRows: boolean;\n\n    // allows navigation between table rows using arrow keys\n    @Input()\n    @HostBinding('attr.allowKeyboardNavigation')\n    allowKeyboardNavigation = true;\n\n    // disables user select withing the table\n    @Input()\n    @HostBinding('class.noTextSelect')\n    @HostBinding('attr.noTextSelect') noTextSelect: boolean;\n\n    fixedTableHeight = 'auto';\n\n    @HostBinding('attr.tabindex') tabindex = 0;\n\n    selectedRows: Array<number> = [];\n\n    // specifies collapsible type. Can be either 'accordion' or 'expandable'\n    @Input()\n    @HostBinding('attr.type') type: 'accordion' | 'expandable' = 'accordion';\n\n    @ContentChildren(CollapsibleTableRowComponent) collapsibleTableRows: Array<CollapsibleTableRowComponent>;\n\n    mouseDownHold = false;\n\n    constructor(\n        private el: ElementRef,\n        private collapsibleService: CollapsibleService) { }\n\n    ngOnInit() {\n    }\n\n    ngAfterContentInit() {\n        // this.updateFixedTableHeight();\n        /*\n        LOG(`CollapsibleTableComponent::ngOnInit()\\n` +\n            `this = {\\n` +\n            `bordered = ${this.bordered}\\n` +\n            `borderedHorizontally = ${this.borderedHorizontally}\\n` +\n            `borderedVertically = ${this.borderedVertically}\\n` +\n            `striped = ${this.striped}\\n` +\n            `stripedOddColor = ${this.stripedOddColor}\\n` +\n            `stripedEvenColor = ${this.stripedEvenColor}\\n` +\n            `highlight = ${this.highlight}\\n` +\n            `highlightColor = ${this.highlightColor}\\n` +\n            `highlightTextColor = ${this.highlightTextColor}\\n` +\n            `activeColor = ${this.activeColor}\\n` +\n            `activeTextColor = ${this.activeTextColor}\\n` +\n            `centered = ${this.centered}\\n` +\n            `responsive = ${this.responsive}\\n` +\n            `select = ${this.select}\\n` +\n            `selectColor = ${this.selectColor}\\n` +\n            `selectTextColor = ${this.selectTextColor}\\n` +\n            `selectMultipleRows = ${this.selectMultipleRows}\\n` +\n            `noTextSelect = ${this.noTextSelect}\\n` +\n            `}`);\n            */\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                if (this.collapsibleTableRows != null) {\n                    switch (change) {\n                        case 'striped':\n                        case 'stripedOddColor':\n                        case 'stripedOddTextColor':\n                        case 'stripedEvenColor':\n                        case 'stripedEvenTextColor':\n                            this.updateTable('striped');\n                            break;\n                        case 'highlight':\n                        case 'highlightColor':\n                        case 'highlightTextColor':\n                            this.updateTable('highlight');\n                            break;\n                        case 'activeColor':\n                        case 'activeTextColor':\n                            this.updateTable('active');\n                            break;\n                        case 'select':\n                        case 'selectColor':\n                        case 'selectTextColor':\n                        case 'selectMultipleRows':\n                        case 'allowDeselectingRows':\n                            this.updateTable('select');\n                            break;\n                    }\n                }\n\n                // update collapsible table type in CollapsibleService\n                if (change === 'type') {\n                    this.type = changes.type.currentValue;\n                    this.collapsibleService.setType(this.type);\n                }\n            }\n        }\n        this.collapsibleService.setCollapsibleTable(this);\n    }\n\n    focus() {\n        this.el.nativeElement.focus();\n    }\n\n    addSelectedRow(index: number): void {\n        switch (true) {\n            case this.selectMultipleRows && this.selectedRows.indexOf(index) === -1:\n                this.selectedRows.push(index);\n                this.selectedRows.sort((a, b) => a - b);\n                break;\n            case !this.selectMultipleRows:\n                this.selectedRows = [];\n                this.deselectAllRows();\n                this.selectedRows.push(index);\n                this.selectedRows.sort((a, b) => a - b);\n                break;\n        }\n    }\n\n    removeSelectedRow(index: number): void {\n        if (this.selectedRows.indexOf(index) !== -1) {\n            this.selectedRows.splice(this.selectedRows.indexOf(index), 1);\n        }\n    }\n\n    clearSelectedRows() {\n        this.selectedRows = [];\n    }\n\n    deselectAllRows() {\n        this.collapsibleTableRows.forEach(row => {\n            row.selected = false;\n            row.updateRow();\n        });\n    }\n\n    selectRow(index: number) {\n        if (this.select) {\n            switch (true) {\n                case index === 0:\n                    this.selectRow(1);\n                    break;\n                case index === this.collapsibleTableRows.length:\n                    this.selectRow(this.collapsibleTableRows.length - 1);\n                    break;\n                case 0 < index && index <= this.collapsibleTableRows.length - 1:\n                    this.addSelectedRow(index);\n                    this.collapsibleTableRows.forEach((row, i) => {\n                        if (index !== i) {\n                            if (!this.selectMultipleRows) {\n                                row.selected = false;\n                            }\n                        } else {\n                            row.selected = true;\n                        }\n                        row.updateRow();\n                    });\n                    break;\n            }\n        }\n\n    }\n\n    selectRows(firstRowIndex: number, lastRowIndex: number) {\n        if (this.selectMultipleRows &&\n            0 < firstRowIndex && firstRowIndex < lastRowIndex &&\n            lastRowIndex <= this.collapsibleTableRows.length - 1) {\n            this.clearSelectedRows();\n            this.collapsibleTableRows.forEach((row, i) => {\n                if (firstRowIndex <= i && i <= lastRowIndex) {\n                    this.addSelectedRow(i);\n                    row.selected = true;\n                } else {\n                    row.selected = false;\n                }\n                row.updateRow();\n            });\n        }\n    }\n\n    toggleRowSelection(index: number) {\n        if (this.select &&\n            0 < index && index <= this.collapsibleTableRows.length - 1) {\n            this.collapsibleTableRows.forEach((row, i) => {\n                if (index === i) {\n                    if (row.selected) {\n                        this.removeSelectedRow(index);\n                    } else {\n                        this.addSelectedRow(index);\n                    }\n                    row.selected = !row.selected;\n                    row.updateRow();\n                }\n            });\n        }\n    }\n\n    /*updateFixedTableHeight() {\n        this.fixedTableHeight = this.el.nativeElement.offsetHeight + 'px';\n        let elem: Element = this.el.nativeElement;\n        let rowHeights = 0;\n        if (this.collapsibleTableRowComponent != null) {\n            this.collapsibleTableRowComponent.forEach(row => {\n            });\n        }\n    }*/\n\n    updateStriped(row: CollapsibleTableRowComponent): void {\n        if (this.striped && row.isBodyRow) {\n            row.isParentStriped = true;\n            if (row.isOddRow) {\n                row.parentStripedRowBackgroundColor = this.stripedOddColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;\n                row.parentStripedRowTextColor = this.stripedOddTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;\n                row.rowTextColor = row.parentStripedRowTextColor;\n            } else {\n                row.parentStripedRowBackgroundColor = this.stripedEvenColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;\n                row.parentStripedRowTextColor = this.stripedEvenTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;\n                row.rowTextColor = row.parentStripedRowTextColor;\n            }\n        } else {\n            row.isParentStriped = false;\n            row.rowBackgroundColor = undefined;\n            row.rowTextColor = undefined;\n        }\n    }\n\n    updateHighlight(row: CollapsibleTableRowComponent): void {\n        row.isParentHighlight = this.highlight;\n        row.parentHighlightRowBackgroundColor = this.highlightColor || CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;\n        row.parentHighlightRowTextColor = this.highlightTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n    }\n\n    updateActive(row: CollapsibleTableRowComponent): void {\n        row.activeRowBackgroundColor = this.activeColor || CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;\n        row.activeRowTextColor = this.activeTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n    }\n\n    updateSelect(row: CollapsibleTableRowComponent): void {\n        row.parentAllowsSelect = this.select;\n        row.parentAllowsSelectMultipleRows = this.selectMultipleRows;\n        row.parentAllowsDeselectingRows = this.allowDeselectingRows;\n        if (row.selected) {\n            row.selectedRowBackgroundColor = this.selectColor || CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;\n            row.selectedRowTextColor = this.selectTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n            row.rowBackgroundColor = row.selectedRowBackgroundColor;\n            row.rowTextColor = row.selectedRowTextColor;\n        }\n    }\n\n    updateTable(change?: string): void {\n        if (this.collapsibleTableRows != null) {\n            if (change != null) {\n                switch (change) {\n                    case 'striped':\n                        // propagate changes to each of the CollapsibleTableRowComponent children\n                        this.collapsibleTableRows.forEach(row => { this.updateStriped(row); });\n                        break;\n                    case 'highlight':\n                        this.collapsibleTableRows.forEach(row => { this.updateHighlight(row); });\n                        break;\n                    case 'active':\n                        this.collapsibleTableRows.forEach(row => { this.updateActive(row); });\n                        break;\n                    case 'select':\n                        this.collapsibleTableRows.forEach(row => { this.updateSelect(row); });\n                        break;\n                }\n            } else {\n                // propagate changes to each of the CollapsibleTableRowComponent children\n                this.collapsibleTableRows.forEach(row => {\n                    this.updateStriped(row);\n                    this.updateHighlight(row);\n                    this.updateSelect(row);\n                    this.updateActive(row);\n                });\n            }\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydown(event: KeyboardEvent) {\n        // select a row only if 'select' property is set to 'true'\n        if (this.select && this.allowKeyboardNavigation) {\n            enum Key {\n                arrowUp = 38,\n                arrowDown = 40,\n                home = 36,\n                end = 35\n            }\n\n            let index = 1;\n            const whichKey = event['which'];\n            if (Key[whichKey] != null) {\n\n                event.preventDefault();\n                event.stopPropagation();\n\n                switch (whichKey) {\n                    case Key.arrowUp:\n                        // select previous row\n                        if (this.selectedRows.length > 0) {\n                            index = this.selectedRows[this.selectedRows.length - 1];\n                            index--;\n                        }\n                        break;\n                    case Key.arrowDown:\n                        // select next row\n                        if (this.selectedRows.length > 0) {\n                            index = this.selectedRows[this.selectedRows.length - 1];\n                            index++;\n                        }\n                        break;\n                    case Key.home:\n                        index = 1;\n                        break;\n                    case Key.end:\n                        index = this.collapsibleTableRows.length - 1;\n                        break;\n                }\n\n                this.clearSelectedRows();\n                this.deselectAllRows();\n                this.selectRow(index);\n                this.updateTable();\n            }\n        }\n    }\n\n    @HostListener('mousedown')\n    mousedown() {\n        this.mouseDownHold = true;\n    }\n\n    @HostListener('mouseup')\n    mouseup() {\n        this.mouseDownHold = false;\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CollapsibleListComponent } from './collapsible-list/collapsible-list.component';\nimport { CollapsibleListItemComponent } from './collapsible-list-item/collapsible-list-item.component';\nimport { CollapsibleHeaderComponent } from './collapsible-header/collapsible-header.component';\nimport { CollapsibleBodyComponent } from './collapsible-body/collapsible-body.component';\n\nimport { CollapsibleTableComponent } from './collapsible-table/collapsible-table.component';\nimport { CollapsibleTableRowComponent } from './collapsible-table-row/collapsible-table-row.component';\nimport { CollapsibleTableRowDetailComponent } from './collapsible-table-row-detail/collapsible-table-row-detail.component';\n\nimport { CollapsibleService } from './services/collapsible.service';\nimport { CollapsibleEventService } from './services/collapsible-event.service';\nimport { CollapsibleAnimationsService } from './services/collapsible-animations.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    CollapsibleListComponent,\n    CollapsibleListItemComponent,\n    CollapsibleHeaderComponent,\n    CollapsibleBodyComponent,\n    CollapsibleTableComponent,\n    CollapsibleTableRowComponent,\n    CollapsibleTableRowDetailComponent\n  ],\n  exports: [\n    CollapsibleListComponent,\n    CollapsibleListItemComponent,\n    CollapsibleHeaderComponent,\n    CollapsibleBodyComponent,\n    CollapsibleTableComponent,\n    CollapsibleTableRowComponent,\n    CollapsibleTableRowDetailComponent\n  ],\n  providers: [\n    CollapsibleService,\n    CollapsibleEventService,\n    CollapsibleAnimationsService\n  ]\n})\nexport class CollapsibleModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CollapsibleModule,\n      providers: [CollapsibleModule]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
