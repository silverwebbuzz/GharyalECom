import { Injectable, Component, Input, ElementRef, HostBinding, Output, EventEmitter, ContentChildren, HostListener, ViewChildren, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { DomSanitizer } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleService {
    constructor() {
        this.headers = new Array();
        this.bodies = new Array();
    }
    /**
     * @return {?}
     */
    getType() {
        return this.type;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    setType(type) {
        this.type = type;
    }
    /**
     * @return {?}
     */
    getCollapsibleTable() {
        return this.collapsibleTable;
    }
    /**
     * @param {?} table
     * @return {?}
     */
    setCollapsibleTable(table) {
        this.collapsibleTable = table;
    }
    /**
     * @param {?} header
     * @return {?}
     */
    addListHeader(header) {
        this.headers.push(header);
    }
    /**
     * @param {?} body
     * @return {?}
     */
    addListBody(body) {
        this.bodies.push(body);
    }
    /**
     * @return {?}
     */
    collapseAll() {
        this.bodies.forEach((collapsibleBodyComponent) => {
            // set 'expanded' properties of all the CollapsibleBodyComponents to 'false'
            collapsibleBodyComponent.expanded = false;
            collapsibleBodyComponent.expandedState = collapsibleBodyComponent.expanded.toString();
            // emit 'toggleState' event for all the CollapsibleBodyComponents
            collapsibleBodyComponent.toggleState.emit(false);
        });
    }
}
CollapsibleService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleEvent {
}
class CollapsibleEventService {
    constructor() {
        this.toggleCollapsibleItemSource = new Subject();
        // Observable string streams
        this.toggleCollapsibleItem$ = this.toggleCollapsibleItemSource.asObservable();
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    toggleCollapsibleItem(event) {
        this.toggleCollapsibleItemSource.next(event);
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        this.toggleCollapsibleItemSource.unsubscribe();
    }
}
CollapsibleEventService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleAnimationsService {
    /**
     * @param {?} triggerName
     * @return {?}
     */
    static collapsibleBodyAnimations(triggerName) {
        return [
            trigger(triggerName, [
                state('*', style({
                    height: 0,
                    paddingTop: 0,
                    paddingBottom: 0,
                    borderBottom: 'none',
                    boxShadow: 'none',
                    overflow: 'hidden'
                })),
                state('true', style({
                    boxShadow: 'inset 0 4px 4px -2px rgb(208, 208, 208), inset 0 -3px 2px -1px rgb(208, 208, 208)',
                    overflow: 'inherit'
                })),
                transition('* => true', animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeInQuad)),
                transition('* => false', animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeOutQuad))
            ])
        ];
    }
}
CollapsibleAnimationsService.collapsibleBodyAnimationDuration = '0.2s';
CollapsibleAnimationsService.easeInQuad = 'cubic-bezier(0.55, 0.085, 0.68, 0.53)';
CollapsibleAnimationsService.easeOutQuad = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
CollapsibleAnimationsService.collapsibleTableRowAnimationDuration = '0.2s';
CollapsibleAnimationsService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleBodyComponent {
    /**
     * @param {?} el
     * @param {?} collapsibleService
     * @param {?} eventService
     */
    constructor(el, collapsibleService, eventService) {
        this.el = el;
        this.collapsibleService = collapsibleService;
        this.eventService = eventService;
        this.toggleState = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.eventService.toggleCollapsibleItem$.subscribe(() => {
            this.toggleCollapsibleItem();
        });
    }
    /**
     * @return {?}
     */
    hasContent() {
        for (const child of this.el.nativeElement.childNodes) {
            if ((/** @type {?} */ (child)).tagName != null) {
                return true;
            }
        }
        return false;
    }
    /**
     * @return {?}
     */
    toggleCollapsibleItem() {
        // toggle body's state only if it has any childs
        if (this.hasContent()) {
            if (this.collapsibleService.getType() === 'accordion') {
                /** @type {?} */
                const tempExpanded = this.expanded;
                this.collapsibleService.collapseAll();
                this.expanded = tempExpanded;
            }
            this.expanded = !this.expanded;
            this.expandedState = this.expanded.toString();
            // emit 'toggleState' event
            this.toggleState.emit(this.expanded);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.hasContent()) {
            for (const key of Object.keys(changes)) {
                if (key === 'expanded' &&
                    changes["expanded"].currentValue != null) {
                    // this.expanded = changes.expanded.currentValue;
                    this.expandedState = this.expanded.toString();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.eventService.unsubscribe();
    }
}
CollapsibleBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-body',
                template: `<ng-content></ng-content>`,
                animations: CollapsibleAnimationsService.collapsibleBodyAnimations('collapsibleBodyState'),
                styles: [`
        :host {
            display: block;
            border-bottom: 1px solid #ddd;
            box-sizing: border-box;
            padding: 2rem;
        }

        .side-nav :host {
            padding: 0;
        }

        .side-nav :host,
        .side-nav.fixed :host {
            border: 0;
            background-color: #fff;
        }
    `]
            }] }
];
/** @nocollapse */
CollapsibleBodyComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CollapsibleService },
    { type: CollapsibleEventService }
];
CollapsibleBodyComponent.propDecorators = {
    expandedState: [{ type: HostBinding, args: ['@collapsibleBodyState',] }],
    expanded: [{ type: Input }],
    toggleState: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleListItemComponent {
    /**
     * @param {?} collapsibleService
     */
    constructor(collapsibleService) {
        this.collapsibleService = collapsibleService;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // store list bodies in 'CollapsibleService'
        this.contentListBodies.forEach((item) => {
            this.collapsibleService.addListBody(item);
        });
    }
}
CollapsibleListItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-list-item',
                template: `
        <ng-content select="collapsible-header"></ng-content>
        <ng-content select="collapsible-body"></ng-content>
    `,
                providers: [CollapsibleEventService]
            }] }
];
/** @nocollapse */
CollapsibleListItemComponent.ctorParameters = () => [
    { type: CollapsibleService }
];
CollapsibleListItemComponent.propDecorators = {
    contentListBodies: [{ type: ContentChildren, args: [CollapsibleBodyComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleListComponent {
    /**
     * @param {?} collapsibleService
     */
    constructor(collapsibleService) {
        this.collapsibleService = collapsibleService;
        // component options
        //
        // describes the type of the collapsible list: 'accordion' or 'expandable'
        this.type = 'accordion';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.collapsibleService.setType(this.type);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const change in changes) {
            if (change === 'type') {
                this.type = changes["type"].currentValue;
                this.collapsibleService.setType(this.type);
            }
        }
    }
}
CollapsibleListComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-list',
                template: `<ng-content select="collapsible-list-item"></ng-content>`,
                providers: [CollapsibleService],
                styles: [`
    :host {
      display: block;
      margin: 0.5rem 0 1rem 0;
      border-top: 1px solid #ddd;
      border-right: 1px solid #ddd;
      border-left: 1px solid #ddd;
      box-shadow:
        0 2px 2px 0 rgba(0, 0, 0, 0.14),
        0 1px 5px 0 rgba(0, 0, 0, 0.12),
        0 3px 1px -2px rgba(0, 0, 0, 0.2);
    }

    .side-nav :host,
    .side-nav.fixed :host {
      border: none;
      box-shadow: none;
    }

    :host(.popout) {
      border: none;
      box-shadow: none;
    }

    :host(.popout) > li {
      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
      margin: 0 24px;
      transition: margin 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }

    .side-nav :host {
      margin: 0;
    }
  `]
            }] }
];
/** @nocollapse */
CollapsibleListComponent.ctorParameters = () => [
    { type: CollapsibleService }
];
CollapsibleListComponent.propDecorators = {
    type: [{ type: Input }],
    contentListItems: [{ type: ContentChildren, args: [CollapsibleListItemComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleHeaderComponent {
    /**
     * @param {?} eventService
     */
    constructor(eventService) {
        this.eventService = eventService;
    }
    /**
     * @return {?}
     */
    click() {
        this.eventService.toggleCollapsibleItem();
    }
}
CollapsibleHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-header',
                template: `<ng-content></ng-content>`,
                styles: [`
        :host {
            display: block;
            cursor: pointer;
            min-height: 3rem;
            line-height: 3rem;
            padding: 0 1rem;
            background-color: #fff;
            border-bottom: 1px solid #ddd;
        }
    `]
            }] }
];
/** @nocollapse */
CollapsibleHeaderComponent.ctorParameters = () => [
    { type: CollapsibleEventService }
];
CollapsibleHeaderComponent.propDecorators = {
    click: [{ type: HostListener, args: ['click',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleTableRowDetailComponent {
    /**
     * @param {?} collapsibleService
     */
    constructor(collapsibleService) {
        this.collapsibleService = collapsibleService;
        this.subject = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subject.asObservable().subscribe(() => {
            this.viewListBodies.forEach((item) => {
                item.toggleCollapsibleItem();
            });
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // store list bodies in 'CollapsibleService'
        this.viewListBodies.forEach((item) => {
            this.collapsibleService.addListBody(item);
        });
    }
}
CollapsibleTableRowDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-table-row-detail',
                template: `
        <td colspan="100%">
            <collapsible-list-item>
                <collapsible-body>
                    <ng-content></ng-content>
                </collapsible-body>
            </collapsible-list-item>
        </td>
    `,
                styles: [`
        :host {
            display: table-row;
        }

        :host collapsible-body,
        :host td {
            padding: 0;
        }
    `]
            }] }
];
/** @nocollapse */
CollapsibleTableRowDetailComponent.ctorParameters = () => [
    { type: CollapsibleService }
];
CollapsibleTableRowDetailComponent.propDecorators = {
    expanded: [{ type: Input }],
    viewListBodies: [{ type: ViewChildren, args: [CollapsibleBodyComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleTableRowComponent {
    /**
     * @param {?} el
     * @param {?} sanitizer
     * @param {?} collapsibleService
     */
    constructor(el, sanitizer, collapsibleService) {
        this.el = el;
        this.sanitizer = sanitizer;
        this.collapsibleService = collapsibleService;
        this.backgroundTransitionDuration = '0.3s';
        // transition-timing-function: easeInQuad
        this.backgroundTransitionTimingFunction = this.sanitizer
            .bypassSecurityTrustStyle(CollapsibleTableRowComponent.EASE_OUT_QUAD);
        this.isHeadRow = false;
        this.isBodyRow = false;
        this.isOddRow = false;
        this.isEvenRow = false;
        this.isParentStriped = false;
        this.isParentHighlight = false;
        this.parentAllowsSelect = false;
        this.parentAllowsSelectMultipleRows = false;
        this.parentAllowsDeselectingRows = false;
        this.dragSelection = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const elem = this.el.nativeElement;
        /** @type {?} */
        const tbody = elem.parentElement;
        if (tbody.tagName === 'TBODY') {
            /** @type {?} */
            const collapsibleTableRows = tbody.querySelectorAll('collapsible-table-row');
            for (let i = 0; i < collapsibleTableRows.length; i++) {
                /** @type {?} */
                const collapsibleTableRow = collapsibleTableRows[i];
                if (collapsibleTableRow === elem) {
                    this.index = i + 1;
                    break;
                }
            }
        }
        // retrieve parent CollapsibleTableComponent through the CollapsibleService
        this.parentCollapsibleTable = this.collapsibleService.getCollapsibleTable();
        if (this.parentCollapsibleTable != null) {
            // check if collapsible-table is marked to show striped table
            this.isParentStriped = this.parentCollapsibleTable.striped;
            // check if collapsible-table is marked to highlight current row
            this.isParentHighlight = this.parentCollapsibleTable.highlight;
            this.parentHighlightRowBackgroundColor = this.parentCollapsibleTable.highlightColor ||
                CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
            this.parentHighlightRowTextColor = this.parentCollapsibleTable.highlightTextColor ||
                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            // check if collapsible-table specifies the active row color
            this.activeRowBackgroundColor = this.parentCollapsibleTable.activeColor ||
                CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
            this.activeRowTextColor = this.parentCollapsibleTable.activeTextColor ||
                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            // check if collapsible-table allows selecting rows
            this.parentAllowsSelect = this.parentCollapsibleTable.select;
            this.parentAllowsSelectMultipleRows = this.parentCollapsibleTable.selectMultipleRows;
            // check if collapsible-table specifies a color for the selected row
            this.selectedRowBackgroundColor = this.parentCollapsibleTable.selectColor ||
                CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
            this.selectedRowTextColor = this.parentCollapsibleTable.selectTextColor ||
                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            // check if collapsible-table allows to deselect rows
            this.parentAllowsDeselectingRows = this.parentCollapsibleTable.allowDeselectingRows != null ?
                this.parentCollapsibleTable.allowDeselectingRows : false;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.updateRow();
    }
    /**
     * @return {?}
     */
    updateRow() {
        /** @type {?} */
        const elem = this.el.nativeElement;
        /** @type {?} */
        const th = elem.querySelector('th');
        if (th != null) {
            this.isHeadRow = true;
        }
        /** @type {?} */
        const td = elem.querySelector('td');
        if (td != null) {
            this.isBodyRow = true;
            // determine if the row is 'odd' or 'event'
            if (this.index % 2 === 0) {
                this.isEvenRow = true;
                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedEvenColor ||
                    CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedEvenTextColor ||
                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            }
            else {
                this.isOddRow = true;
                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedOddColor ||
                    CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedOddTextColor ||
                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            }
            switch (true) {
                case this.parentAllowsSelect && this.selected:
                    this.rowBackgroundColor = this.selectedRowBackgroundColor;
                    this.rowTextColor = this.selectedRowTextColor;
                    break;
                case this.isParentStriped:
                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                    this.rowTextColor = this.parentStripedRowTextColor;
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    getHeight() {
        return this.el.nativeElement.offsetHeight;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    isLeftMouseButton(event) {
        /** @type {?} */
        const button = event.button;
        /** @type {?} */
        const which = event['which'];
        /** @type {?} */
        const target = /** @type {?} */ ((event.target || event.srcElement || event.currentTarget));
        if (['TR', 'TD'].indexOf(target.tagName) > -1) {
            if ('button' in event) {
                return button === 0;
            }
            else {
                return (which || button) === 1;
            }
        }
        return false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    mousedown(event) {
        // handle only if the Left mouse button pressed
        // and the row is a body row
        if (this.isLeftMouseButton(event) && this.isBodyRow) {
            if (this.parentCollapsibleTable.noTextSelect) {
                event.preventDefault();
            }
            if (this.isBodyRow) {
                if (this.parentAllowsSelect && !this.parentAllowsDeselectingRows) {
                    this.prevSelectedRows = this.parentCollapsibleTable.selectedRows;
                    this.parentCollapsibleTable.clearSelectedRows();
                    this.parentCollapsibleTable.deselectAllRows();
                }
                this.rowBackgroundColor = this.activeRowBackgroundColor;
                this.rowTextColor = this.activeRowTextColor;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    mouseup(event) {
        // handle only if the Left mouse button pressed
        // and the row is a body row
        if (this.isLeftMouseButton(event) && this.isBodyRow) {
            // handle selection
            if (this.parentAllowsSelect) {
                if (!this.parentAllowsDeselectingRows) {
                    this.parentCollapsibleTable.selectRow(this.index);
                }
                else {
                    if (!this.dragSelection) {
                        this.parentCollapsibleTable.toggleRowSelection(this.index);
                    }
                }
            }
            // check row state
            this.parentCollapsibleTable.updateTable();
            /*switch (true) {
                            // parent allows selecting rows and the row is selected
                            case this.parentAllowsSelect && this.selected:
                                this.rowBackgroundColor = this.selectedRowBackgroundColor;
                                this.rowTextColor = this.selectedRowTextColor;
                                this.parentCollapsibleTable.updateTable();
                                break;
                            // highlighted
                            case this.isParentHighlight:
                                this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;
                                this.rowTextColor = this.parentHighlightRowTextColor;
                                break;
                            // striped
                            case this.isParentStriped:
                                this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                                this.rowTextColor = this.parentStripedRowTextColor;
                                break;
                            default:
                                this.rowBackgroundColor = undefined;
                                this.rowTextColor = undefined;
                                break;
                        }*/
            // select multiple rows using the 'Shift' key
            if (this.parentAllowsSelect &&
                this.parentAllowsSelectMultipleRows &&
                event != null && event.shiftKey) {
                if (this.prevSelectedRows != null &&
                    this.prevSelectedRows.length > 0 &&
                    this.parentCollapsibleTable.selectedRows.length > 0) {
                    /** @type {?} */
                    const rangeSelectedRows = this.prevSelectedRows.concat(this.parentCollapsibleTable.selectedRows);
                    rangeSelectedRows.sort((a, b) => a - b);
                    /** @type {?} */
                    const firstRowIndex = Math.min.apply(null, rangeSelectedRows);
                    /** @type {?} */
                    const lastRowIndex = Math.max.apply(null, rangeSelectedRows);
                    this.parentCollapsibleTable.selectRows(firstRowIndex, lastRowIndex);
                }
            }
            // set dragSelection flag to false. Prevents selection drag behavior
            this.dragSelection = false;
            // focus the collapsible table
            this.parentCollapsibleTable.focus();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    mouseenter(event) {
        // handle only if the row is a body row
        if (this.isBodyRow) {
            switch (true) {
                // the use is trying to select multiple rows by holding a mouse button
                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:
                    this.parentCollapsibleTable.selectRow(this.index);
                    this.dragSelection = true;
                    break;
                // parent allows selecting rows and the row is selected
                case this.parentAllowsSelect && this.selected:
                    break;
                // highlighted
                case this.isParentHighlight:
                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;
                    this.rowTextColor = this.parentHighlightRowTextColor;
                    break;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    mouseleave(event) {
        // handle only if the row is a body row
        if (this.isBodyRow) {
            // check row state
            switch (true) {
                // the use is trying to select multiple rows by holding a mouse button
                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:
                    this.parentCollapsibleTable.selectRow(this.index);
                    this.dragSelection = false;
                    break;
                // parent allows selecting rows and the row is selected
                case this.parentAllowsSelect && this.selected:
                    break;
                // stripped
                case this.isParentStriped:
                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                    this.rowTextColor = this.parentStripedRowTextColor;
                    break;
                default:
                    this.rowBackgroundColor = undefined;
                    this.rowTextColor = undefined;
                    break;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    click(event) {
        if (this.detail != null) {
            /** @type {?} */
            const target = /** @type {?} */ ((event.target || event.srcElement || event.currentTarget));
            if (target != null && ['TR', 'TD'].indexOf(target.tagName) > -1) {
                this.detail.subject.next();
            }
        }
    }
}
CollapsibleTableRowComponent.EASE_OUT_QUAD = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR = 'rgba(242,242,242,0.8)';
CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR = 'transparent';
CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR = 'rgba(222,222,222, 0.8)';
CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR = 'rgba(212,212,212, 0.8)';
CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR = 'rgba(212,212,212, 0.8)';
CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR = 'black';
CollapsibleTableRowComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-table-row',
                template: `<ng-content></ng-content>`,
                styles: [`
        :host {
            display: table-row;
            transition-property: background-color, color;
        }
    `]
            }] }
];
/** @nocollapse */
CollapsibleTableRowComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DomSanitizer },
    { type: CollapsibleService }
];
CollapsibleTableRowComponent.propDecorators = {
    detail: [{ type: Input }],
    rowTextColor: [{ type: HostBinding, args: ['style.color',] }],
    rowBackgroundColor: [{ type: HostBinding, args: ['style.background-color',] }],
    backgroundTransitionDuration: [{ type: HostBinding, args: ['style.transition-duration',] }],
    backgroundTransitionTimingFunction: [{ type: HostBinding, args: ['style.transition-timing-function',] }],
    selected: [{ type: HostBinding, args: ['class.selected',] }],
    mousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    mouseup: [{ type: HostListener, args: ['mouseup', ['$event'],] }],
    mouseenter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    mouseleave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }],
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleTableComponent {
    /**
     * @param {?} el
     * @param {?} collapsibleService
     */
    constructor(el, collapsibleService) {
        this.el = el;
        this.collapsibleService = collapsibleService;
        // allows navigation between table rows using arrow keys
        this.allowKeyboardNavigation = true;
        this.fixedTableHeight = 'auto';
        this.tabindex = 0;
        this.selectedRows = [];
        // specifies collapsible type. Can be either 'accordion' or 'expandable'
        this.type = 'accordion';
        this.mouseDownHold = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // this.updateFixedTableHeight();
        /*
                LOG(`CollapsibleTableComponent::ngOnInit()\n` +
                    `this = {\n` +
                    `bordered = ${this.bordered}\n` +
                    `borderedHorizontally = ${this.borderedHorizontally}\n` +
                    `borderedVertically = ${this.borderedVertically}\n` +
                    `striped = ${this.striped}\n` +
                    `stripedOddColor = ${this.stripedOddColor}\n` +
                    `stripedEvenColor = ${this.stripedEvenColor}\n` +
                    `highlight = ${this.highlight}\n` +
                    `highlightColor = ${this.highlightColor}\n` +
                    `highlightTextColor = ${this.highlightTextColor}\n` +
                    `activeColor = ${this.activeColor}\n` +
                    `activeTextColor = ${this.activeTextColor}\n` +
                    `centered = ${this.centered}\n` +
                    `responsive = ${this.responsive}\n` +
                    `select = ${this.select}\n` +
                    `selectColor = ${this.selectColor}\n` +
                    `selectTextColor = ${this.selectTextColor}\n` +
                    `selectMultipleRows = ${this.selectMultipleRows}\n` +
                    `noTextSelect = ${this.noTextSelect}\n` +
                    `}`);
                    */
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const change in changes) {
            if (changes.hasOwnProperty(change)) {
                if (this.collapsibleTableRows != null) {
                    switch (change) {
                        case 'striped':
                        case 'stripedOddColor':
                        case 'stripedOddTextColor':
                        case 'stripedEvenColor':
                        case 'stripedEvenTextColor':
                            this.updateTable('striped');
                            break;
                        case 'highlight':
                        case 'highlightColor':
                        case 'highlightTextColor':
                            this.updateTable('highlight');
                            break;
                        case 'activeColor':
                        case 'activeTextColor':
                            this.updateTable('active');
                            break;
                        case 'select':
                        case 'selectColor':
                        case 'selectTextColor':
                        case 'selectMultipleRows':
                        case 'allowDeselectingRows':
                            this.updateTable('select');
                            break;
                    }
                }
                // update collapsible table type in CollapsibleService
                if (change === 'type') {
                    this.type = changes["type"].currentValue;
                    this.collapsibleService.setType(this.type);
                }
            }
        }
        this.collapsibleService.setCollapsibleTable(this);
    }
    /**
     * @return {?}
     */
    focus() {
        this.el.nativeElement.focus();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    addSelectedRow(index) {
        switch (true) {
            case this.selectMultipleRows && this.selectedRows.indexOf(index) === -1:
                this.selectedRows.push(index);
                this.selectedRows.sort((a, b) => a - b);
                break;
            case !this.selectMultipleRows:
                this.selectedRows = [];
                this.deselectAllRows();
                this.selectedRows.push(index);
                this.selectedRows.sort((a, b) => a - b);
                break;
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeSelectedRow(index) {
        if (this.selectedRows.indexOf(index) !== -1) {
            this.selectedRows.splice(this.selectedRows.indexOf(index), 1);
        }
    }
    /**
     * @return {?}
     */
    clearSelectedRows() {
        this.selectedRows = [];
    }
    /**
     * @return {?}
     */
    deselectAllRows() {
        this.collapsibleTableRows.forEach(row => {
            row.selected = false;
            row.updateRow();
        });
    }
    /**
     * @param {?} index
     * @return {?}
     */
    selectRow(index) {
        if (this.select) {
            switch (true) {
                case index === 0:
                    this.selectRow(1);
                    break;
                case index === this.collapsibleTableRows.length:
                    this.selectRow(this.collapsibleTableRows.length - 1);
                    break;
                case 0 < index && index <= this.collapsibleTableRows.length - 1:
                    this.addSelectedRow(index);
                    this.collapsibleTableRows.forEach((row, i) => {
                        if (index !== i) {
                            if (!this.selectMultipleRows) {
                                row.selected = false;
                            }
                        }
                        else {
                            row.selected = true;
                        }
                        row.updateRow();
                    });
                    break;
            }
        }
    }
    /**
     * @param {?} firstRowIndex
     * @param {?} lastRowIndex
     * @return {?}
     */
    selectRows(firstRowIndex, lastRowIndex) {
        if (this.selectMultipleRows &&
            0 < firstRowIndex && firstRowIndex < lastRowIndex &&
            lastRowIndex <= this.collapsibleTableRows.length - 1) {
            this.clearSelectedRows();
            this.collapsibleTableRows.forEach((row, i) => {
                if (firstRowIndex <= i && i <= lastRowIndex) {
                    this.addSelectedRow(i);
                    row.selected = true;
                }
                else {
                    row.selected = false;
                }
                row.updateRow();
            });
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    toggleRowSelection(index) {
        if (this.select &&
            0 < index && index <= this.collapsibleTableRows.length - 1) {
            this.collapsibleTableRows.forEach((row, i) => {
                if (index === i) {
                    if (row.selected) {
                        this.removeSelectedRow(index);
                    }
                    else {
                        this.addSelectedRow(index);
                    }
                    row.selected = !row.selected;
                    row.updateRow();
                }
            });
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    updateStriped(row) {
        if (this.striped && row.isBodyRow) {
            row.isParentStriped = true;
            if (row.isOddRow) {
                row.parentStripedRowBackgroundColor = this.stripedOddColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
                row.parentStripedRowTextColor = this.stripedOddTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                row.rowTextColor = row.parentStripedRowTextColor;
            }
            else {
                row.parentStripedRowBackgroundColor = this.stripedEvenColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
                row.parentStripedRowTextColor = this.stripedEvenTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                row.rowTextColor = row.parentStripedRowTextColor;
            }
        }
        else {
            row.isParentStriped = false;
            row.rowBackgroundColor = undefined;
            row.rowTextColor = undefined;
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    updateHighlight(row) {
        row.isParentHighlight = this.highlight;
        row.parentHighlightRowBackgroundColor = this.highlightColor || CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
        row.parentHighlightRowTextColor = this.highlightTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    updateActive(row) {
        row.activeRowBackgroundColor = this.activeColor || CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
        row.activeRowTextColor = this.activeTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    updateSelect(row) {
        row.parentAllowsSelect = this.select;
        row.parentAllowsSelectMultipleRows = this.selectMultipleRows;
        row.parentAllowsDeselectingRows = this.allowDeselectingRows;
        if (row.selected) {
            row.selectedRowBackgroundColor = this.selectColor || CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
            row.selectedRowTextColor = this.selectTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            row.rowBackgroundColor = row.selectedRowBackgroundColor;
            row.rowTextColor = row.selectedRowTextColor;
        }
    }
    /**
     * @param {?=} change
     * @return {?}
     */
    updateTable(change) {
        if (this.collapsibleTableRows != null) {
            if (change != null) {
                switch (change) {
                    case 'striped':
                        // propagate changes to each of the CollapsibleTableRowComponent children
                        this.collapsibleTableRows.forEach(row => { this.updateStriped(row); });
                        break;
                    case 'highlight':
                        this.collapsibleTableRows.forEach(row => { this.updateHighlight(row); });
                        break;
                    case 'active':
                        this.collapsibleTableRows.forEach(row => { this.updateActive(row); });
                        break;
                    case 'select':
                        this.collapsibleTableRows.forEach(row => { this.updateSelect(row); });
                        break;
                }
            }
            else {
                // propagate changes to each of the CollapsibleTableRowComponent children
                this.collapsibleTableRows.forEach(row => {
                    this.updateStriped(row);
                    this.updateHighlight(row);
                    this.updateSelect(row);
                    this.updateActive(row);
                });
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keydown(event) {
        // select a row only if 'select' property is set to 'true'
        if (this.select && this.allowKeyboardNavigation) {
            /** @enum {number} */
            const Key = {
                arrowUp: 38,
                arrowDown: 40,
                home: 36,
                end: 35,
            };
            Key[Key.arrowUp] = 'arrowUp';
            Key[Key.arrowDown] = 'arrowDown';
            Key[Key.home] = 'home';
            Key[Key.end] = 'end';
            /** @type {?} */
            let index = 1;
            /** @type {?} */
            const whichKey = event['which'];
            if (Key[whichKey] != null) {
                event.preventDefault();
                event.stopPropagation();
                switch (whichKey) {
                    case Key.arrowUp:
                        // select previous row
                        if (this.selectedRows.length > 0) {
                            index = this.selectedRows[this.selectedRows.length - 1];
                            index--;
                        }
                        break;
                    case Key.arrowDown:
                        // select next row
                        if (this.selectedRows.length > 0) {
                            index = this.selectedRows[this.selectedRows.length - 1];
                            index++;
                        }
                        break;
                    case Key.home:
                        index = 1;
                        break;
                    case Key.end:
                        index = this.collapsibleTableRows.length - 1;
                        break;
                }
                this.clearSelectedRows();
                this.deselectAllRows();
                this.selectRow(index);
                this.updateTable();
            }
        }
    }
    /**
     * @return {?}
     */
    mousedown() {
        this.mouseDownHold = true;
    }
    /**
     * @return {?}
     */
    mouseup() {
        this.mouseDownHold = false;
    }
}
CollapsibleTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-table',
                template: `<ng-content></ng-content>`,
                providers: [
                    CollapsibleService
                ],
                styles: [`
        :host {
            display: table;
            position: relative;
            width: 100%;
            border-collapse: collapse;
        }

        :host thead {
            border-bottom: 1px solid #d0d0d0;
        }

        :host /deep/ tbody /deep/ collapsible-table-row {
            cursor: pointer;
        }

        :host /deep/ collapsible-table-row th,
        :host /deep/ collapsible-table-row td {
            border-radius: 0;
        }

        :host[bordered='true'] {
            border-top: 1px solid #d0d0d0;
            border-right: 1px solid #d0d0d0;
            border-left: 1px solid #d0d0d0;
        }

        :host[bordered='true'] /deep/ collapsible-table-row,
        :host[borderedHorizontally='true'] /deep/ collapsible-table-row {
            border-bottom: 1px solid #d0d0d0;
        }

        :host[bordered='true'] /deep/ collapsible-table-row th,
        :host[bordered='true'] /deep/ collapsible-table-row td,
        :host[borderedVertically='true'] /deep/ collapsible-table-row th:not(:last-child),
        :host[borderedVertically='true'] /deep/ collapsible-table-row td:not(:last-child) {
            border-right: 1px solid #d0d0d0;
        }

        :host(.centered) /deep/ * {
            text-align: center;
        }

        :host(.noTextSelect) /deep/ collapsible-table-row th,
        :host(.noTextSelect) /deep/ collapsible-table-row td {
            user-select: none;
        }
    `]
            }] }
];
/** @nocollapse */
CollapsibleTableComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CollapsibleService }
];
CollapsibleTableComponent.propDecorators = {
    bordered: [{ type: Input }, { type: HostBinding, args: ['attr.bordered',] }],
    borderedHorizontally: [{ type: Input }, { type: HostBinding, args: ['attr.borderedHorizontally',] }],
    borderedVertically: [{ type: Input }, { type: HostBinding, args: ['attr.borderedVertically',] }],
    striped: [{ type: Input }, { type: HostBinding, args: ['attr.striped',] }],
    stripedOddColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedOddColor',] }],
    stripedOddTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedOddTextColor',] }],
    stripedEvenColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedEvenColor',] }],
    stripedEvenTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedEvenTextColor',] }],
    highlight: [{ type: Input }, { type: HostBinding, args: ['attr.highlight',] }],
    highlightColor: [{ type: Input }, { type: HostBinding, args: ['attr.highlightColor',] }],
    highlightTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.highlightTextColor',] }],
    activeColor: [{ type: Input }, { type: HostBinding, args: ['attr.activeColor',] }],
    activeTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.activeTextColor',] }],
    centered: [{ type: Input }, { type: HostBinding, args: ['class.centered',] }, { type: HostBinding, args: ['attr.centered',] }],
    responsive: [{ type: Input }, { type: HostBinding, args: ['attr.responsive',] }],
    select: [{ type: Input }, { type: HostBinding, args: ['attr.select',] }],
    selectMultipleRows: [{ type: Input }, { type: HostBinding, args: ['attr.selectMultipleRows',] }],
    selectColor: [{ type: Input }, { type: HostBinding, args: ['attr.selectColor',] }],
    selectTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.selectTextColor',] }],
    allowDeselectingRows: [{ type: Input }, { type: HostBinding, args: ['attr.allowDeselectingRows',] }],
    allowKeyboardNavigation: [{ type: Input }, { type: HostBinding, args: ['attr.allowKeyboardNavigation',] }],
    noTextSelect: [{ type: Input }, { type: HostBinding, args: ['class.noTextSelect',] }, { type: HostBinding, args: ['attr.noTextSelect',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    type: [{ type: Input }, { type: HostBinding, args: ['attr.type',] }],
    collapsibleTableRows: [{ type: ContentChildren, args: [CollapsibleTableRowComponent,] }],
    keydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    mousedown: [{ type: HostListener, args: ['mousedown',] }],
    mouseup: [{ type: HostListener, args: ['mouseup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CollapsibleModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: CollapsibleModule,
            providers: [CollapsibleModule]
        };
    }
}
CollapsibleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    CollapsibleListComponent,
                    CollapsibleListItemComponent,
                    CollapsibleHeaderComponent,
                    CollapsibleBodyComponent,
                    CollapsibleTableComponent,
                    CollapsibleTableRowComponent,
                    CollapsibleTableRowDetailComponent
                ],
                exports: [
                    CollapsibleListComponent,
                    CollapsibleListItemComponent,
                    CollapsibleHeaderComponent,
                    CollapsibleBodyComponent,
                    CollapsibleTableComponent,
                    CollapsibleTableRowComponent,
                    CollapsibleTableRowDetailComponent
                ],
                providers: [
                    CollapsibleService,
                    CollapsibleEventService,
                    CollapsibleAnimationsService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { CollapsibleModule, CollapsibleService, CollapsibleEvent, CollapsibleEventService, CollapsibleAnimationsService, CollapsibleHeaderComponent, CollapsibleBodyComponent, CollapsibleListComponent, CollapsibleListItemComponent, CollapsibleTableComponent, CollapsibleTableRowComponent, CollapsibleTableRowDetailComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjItY29sbGFwc2libGUuanMubWFwIiwic291cmNlcyI6WyJuZzovL2FuZ3VsYXIyLWNvbGxhcHNpYmxlL2xpYi9zZXJ2aWNlcy9jb2xsYXBzaWJsZS5zZXJ2aWNlLnRzIiwibmc6Ly9hbmd1bGFyMi1jb2xsYXBzaWJsZS9saWIvc2VydmljZXMvY29sbGFwc2libGUtZXZlbnQuc2VydmljZS50cyIsIm5nOi8vYW5ndWxhcjItY29sbGFwc2libGUvbGliL3NlcnZpY2VzL2NvbGxhcHNpYmxlLWFuaW1hdGlvbnMuc2VydmljZS50cyIsIm5nOi8vYW5ndWxhcjItY29sbGFwc2libGUvbGliL2NvbGxhcHNpYmxlLWJvZHkvY29sbGFwc2libGUtYm9keS5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXIyLWNvbGxhcHNpYmxlL2xpYi9jb2xsYXBzaWJsZS1saXN0LWl0ZW0vY29sbGFwc2libGUtbGlzdC1pdGVtLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhcjItY29sbGFwc2libGUvbGliL2NvbGxhcHNpYmxlLWxpc3QvY29sbGFwc2libGUtbGlzdC5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXIyLWNvbGxhcHNpYmxlL2xpYi9jb2xsYXBzaWJsZS1oZWFkZXIvY29sbGFwc2libGUtaGVhZGVyLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhcjItY29sbGFwc2libGUvbGliL2NvbGxhcHNpYmxlLXRhYmxlLXJvdy1kZXRhaWwvY29sbGFwc2libGUtdGFibGUtcm93LWRldGFpbC5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXIyLWNvbGxhcHNpYmxlL2xpYi9jb2xsYXBzaWJsZS10YWJsZS1yb3cvY29sbGFwc2libGUtdGFibGUtcm93LmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhcjItY29sbGFwc2libGUvbGliL2NvbGxhcHNpYmxlLXRhYmxlL2NvbGxhcHNpYmxlLXRhYmxlLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhcjItY29sbGFwc2libGUvbGliL2NvbGxhcHNpYmxlLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbGxhcHNpYmxlVGFibGVDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS10YWJsZS9jb2xsYXBzaWJsZS10YWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVIZWFkZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS1oZWFkZXIvY29sbGFwc2libGUtaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZUJvZHlDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS1ib2R5L2NvbGxhcHNpYmxlLWJvZHkuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlU2VydmljZSB7XG4gICAgdHlwZTogJ2FjY29yZGlvbicgfCAnZXhwYW5kYWJsZSc7XG5cbiAgICBjb2xsYXBzaWJsZVRhYmxlOiBDb2xsYXBzaWJsZVRhYmxlQ29tcG9uZW50O1xuICAgIGhlYWRlcnM6IEFycmF5PENvbGxhcHNpYmxlSGVhZGVyQ29tcG9uZW50PiA9IG5ldyBBcnJheTxDb2xsYXBzaWJsZUhlYWRlckNvbXBvbmVudD4oKTtcbiAgICBib2RpZXM6IEFycmF5PENvbGxhcHNpYmxlQm9keUNvbXBvbmVudD4gPSBuZXcgQXJyYXk8Q29sbGFwc2libGVCb2R5Q29tcG9uZW50PigpO1xuXG4gICAgZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9XG5cbiAgICBzZXRUeXBlKHR5cGU6ICdhY2NvcmRpb24nIHwgJ2V4cGFuZGFibGUnKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuXG4gICAgZ2V0Q29sbGFwc2libGVUYWJsZSgpOiBDb2xsYXBzaWJsZVRhYmxlQ29tcG9uZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGFwc2libGVUYWJsZTtcbiAgICB9XG5cbiAgICBzZXRDb2xsYXBzaWJsZVRhYmxlKHRhYmxlOiBDb2xsYXBzaWJsZVRhYmxlQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuY29sbGFwc2libGVUYWJsZSA9IHRhYmxlO1xuICAgIH1cblxuICAgIGFkZExpc3RIZWFkZXIoaGVhZGVyOiBDb2xsYXBzaWJsZUhlYWRlckNvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmhlYWRlcnMucHVzaChoZWFkZXIpO1xuICAgIH1cblxuICAgIGFkZExpc3RCb2R5KGJvZHk6IENvbGxhcHNpYmxlQm9keUNvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJvZGllcy5wdXNoKGJvZHkpO1xuICAgIH1cblxuICAgIGNvbGxhcHNlQWxsKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJvZGllcy5mb3JFYWNoKChjb2xsYXBzaWJsZUJvZHlDb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgIC8vIHNldCAnZXhwYW5kZWQnIHByb3BlcnRpZXMgb2YgYWxsIHRoZSBDb2xsYXBzaWJsZUJvZHlDb21wb25lbnRzIHRvICdmYWxzZSdcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlQm9keUNvbXBvbmVudC5leHBhbmRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29sbGFwc2libGVCb2R5Q29tcG9uZW50LmV4cGFuZGVkU3RhdGUgPSBjb2xsYXBzaWJsZUJvZHlDb21wb25lbnQuZXhwYW5kZWQudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgLy8gZW1pdCAndG9nZ2xlU3RhdGUnIGV2ZW50IGZvciBhbGwgdGhlIENvbGxhcHNpYmxlQm9keUNvbXBvbmVudHNcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlQm9keUNvbXBvbmVudC50b2dnbGVTdGF0ZS5lbWl0KGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZUV2ZW50IHtcbiAgICB0eXBlOiBzdHJpbmc7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZUV2ZW50U2VydmljZSB7XG4gICAgdHlwZTogJ2FjY29yZGlvbicgfCAnZXhwYW5kYWJsZSc7XG4gICAgLy8gT2JzZXJ2YWJsZSBzdHJpbmcgc291cmNlc1xuICAgIHByaXZhdGUgdG9nZ2xlQ29sbGFwc2libGVJdGVtU291cmNlID0gbmV3IFN1YmplY3Q8YW55PigpO1xuXG4gICAgLy8gT2JzZXJ2YWJsZSBzdHJpbmcgc3RyZWFtc1xuICAgIHRvZ2dsZUNvbGxhcHNpYmxlSXRlbSQgPSB0aGlzLnRvZ2dsZUNvbGxhcHNpYmxlSXRlbVNvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICAgIC8vIFRvZ2dsZSBjb2xsYXBzaWJsZSBpdGVtXG4gICAgdG9nZ2xlQ29sbGFwc2libGVJdGVtKGV2ZW50PzogQ29sbGFwc2libGVFdmVudCkge1xuICAgICAgICB0aGlzLnRvZ2dsZUNvbGxhcHNpYmxlSXRlbVNvdXJjZS5uZXh0KGV2ZW50KTtcbiAgICB9XG5cbiAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgdGhpcy50b2dnbGVDb2xsYXBzaWJsZUl0ZW1Tb3VyY2UudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSwgdHJpZ2dlciwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlIHtcblxuICAgIHN0YXRpYyBjb2xsYXBzaWJsZUJvZHlBbmltYXRpb25EdXJhdGlvbiA9ICcwLjJzJztcbiAgICBzdGF0aWMgZWFzZUluUXVhZCA9ICdjdWJpYy1iZXppZXIoMC41NSwgMC4wODUsIDAuNjgsIDAuNTMpJztcbiAgICBzdGF0aWMgZWFzZU91dFF1YWQgPSAnY3ViaWMtYmV6aWVyKDAuMjUsIDAuNDYsIDAuNDUsIDAuOTQpJztcblxuICAgIHN0YXRpYyBjb2xsYXBzaWJsZVRhYmxlUm93QW5pbWF0aW9uRHVyYXRpb24gPSAnMC4ycyc7XG5cbiAgICBzdGF0aWMgY29sbGFwc2libGVCb2R5QW5pbWF0aW9ucyh0cmlnZ2VyTmFtZTogc3RyaW5nKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdHJpZ2dlcih0cmlnZ2VyTmFtZSwgW1xuICAgICAgICAgICAgICAgIHN0YXRlKCcqJywgc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDAsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgIHN0YXRlKCd0cnVlJywgc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDRweCA0cHggLTJweCByZ2IoMjA4LCAyMDgsIDIwOCksIGluc2V0IDAgLTNweCAycHggLTFweCByZ2IoMjA4LCAyMDgsIDIwOCknLFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2luaGVyaXQnXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24oJyogPT4gdHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGUoQ29sbGFwc2libGVBbmltYXRpb25zU2VydmljZS5jb2xsYXBzaWJsZUJvZHlBbmltYXRpb25EdXJhdGlvbiArICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmVhc2VJblF1YWQpKSxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uKCcqID0+IGZhbHNlJyxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZShDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmNvbGxhcHNpYmxlQm9keUFuaW1hdGlvbkR1cmF0aW9uICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuZWFzZU91dFF1YWQpKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICAvKlxuICAgIHN0YXRpYyBjb2xsYXBzaWJsZVRhYmxlUm93QW5pbWF0aW9ucyh0cmlnZ2VyTmFtZTogc3RyaW5nKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdHJpZ2dlcih0cmlnZ2VyTmFtZSwgW1xuICAgICAgICAgICAgICAgIHN0YXRlKCdhY3RpdmUnLCBzdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTUpJ1xuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICBzdGF0ZSgnaW5hY3RpdmUnLCBzdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbignKiA9PiBhY3RpdmUnLFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlKENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuY29sbGFwc2libGVUYWJsZVJvd0FuaW1hdGlvbkR1cmF0aW9uICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuZWFzZU91dFF1YWQpKSxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uKCcqID0+IGluYWN0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZShDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmNvbGxhcHNpYmxlVGFibGVSb3dBbmltYXRpb25EdXJhdGlvbiArICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmVhc2VPdXRRdWFkKSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF07XG4gICAgfVxuICAgICovXG59XG4iLCJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLFxuICAgIElucHV0LCBFbGVtZW50UmVmLCBIb3N0QmluZGluZyxcbiAgICBPdXRwdXQsIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29sbGFwc2libGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29sbGFwc2libGUuc2VydmljZSc7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZUV2ZW50U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbGxhcHNpYmxlLWV2ZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVBbmltYXRpb25zU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbGxhcHNpYmxlLWFuaW1hdGlvbnMuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnY29sbGFwc2libGUtYm9keScsXG4gICAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgcGFkZGluZzogMnJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5zaWRlLW5hdiA6aG9zdCB7XG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLnNpZGUtbmF2IDpob3N0LFxuICAgICAgICAuc2lkZS1uYXYuZml4ZWQgOmhvc3Qge1xuICAgICAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuICAgIGBdLFxuICAgIGFuaW1hdGlvbnM6IENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuY29sbGFwc2libGVCb2R5QW5pbWF0aW9ucygnY29sbGFwc2libGVCb2R5U3RhdGUnKVxufSlcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZUJvZHlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBASG9zdEJpbmRpbmcoJ0Bjb2xsYXBzaWJsZUJvZHlTdGF0ZScpXG4gICAgZXhwYW5kZWRTdGF0ZTogc3RyaW5nO1xuXG4gICAgQElucHV0KCkgZXhwYW5kZWQ6IGJvb2xlYW47XG5cbiAgICBAT3V0cHV0KCkgdG9nZ2xlU3RhdGUgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSBjb2xsYXBzaWJsZVNlcnZpY2U6IENvbGxhcHNpYmxlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBldmVudFNlcnZpY2U6IENvbGxhcHNpYmxlRXZlbnRTZXJ2aWNlKSB7IH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmV2ZW50U2VydmljZS50b2dnbGVDb2xsYXBzaWJsZUl0ZW0kLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUNvbGxhcHNpYmxlSXRlbSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYXNDb250ZW50KCk6IGJvb2xlYW4ge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jaGlsZE5vZGVzKSB7XG4gICAgICAgICAgICBpZiAoKDxFbGVtZW50PmNoaWxkKS50YWdOYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdG9nZ2xlQ29sbGFwc2libGVJdGVtKCkge1xuICAgICAgICAvLyB0b2dnbGUgYm9keSdzIHN0YXRlIG9ubHkgaWYgaXQgaGFzIGFueSBjaGlsZHNcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29udGVudCgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xsYXBzaWJsZVNlcnZpY2UuZ2V0VHlwZSgpID09PSAnYWNjb3JkaW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBFeHBhbmRlZCA9IHRoaXMuZXhwYW5kZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzaWJsZVNlcnZpY2UuY29sbGFwc2VBbGwoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZGVkID0gdGVtcEV4cGFuZGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuICAgICAgICAgICAgdGhpcy5leHBhbmRlZFN0YXRlID0gdGhpcy5leHBhbmRlZC50b1N0cmluZygpO1xuXG4gICAgICAgICAgICAvLyBlbWl0ICd0b2dnbGVTdGF0ZScgZXZlbnRcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlU3RhdGUuZW1pdCh0aGlzLmV4cGFuZGVkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29udGVudCgpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhjaGFuZ2VzKSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdleHBhbmRlZCcgJiZcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5leHBhbmRlZC5jdXJyZW50VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmV4cGFuZGVkID0gY2hhbmdlcy5leHBhbmRlZC5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kZWRTdGF0ZSA9IHRoaXMuZXhwYW5kZWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNYWtlcyBzdXJlIHdlIGRvbid0IGhhdmUgYSBtZW1vcnkgbGVhayBieSBkZXN0cm95aW5nIHRoZVxuICAgIC8vIFN1YnNjcmlwdGlvbiB3aGVuIG91ciBjb21wb25lbnQgaXMgZGVzdHJveWVkXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBBZnRlckNvbnRlbnRJbml0LFxuICAgIENvbnRlbnRDaGlsZHJlblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29sbGFwc2libGVCb2R5Q29tcG9uZW50IH0gZnJvbSAnLi4vY29sbGFwc2libGUtYm9keS9jb2xsYXBzaWJsZS1ib2R5LmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IENvbGxhcHNpYmxlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbGxhcHNpYmxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVFdmVudFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb2xsYXBzaWJsZS1ldmVudC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjb2xsYXBzaWJsZS1saXN0LWl0ZW0nLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImNvbGxhcHNpYmxlLWhlYWRlclwiPjwvbmctY29udGVudD5cbiAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiY29sbGFwc2libGUtYm9keVwiPjwvbmctY29udGVudD5cbiAgICBgLFxuICAgIHByb3ZpZGVyczogW0NvbGxhcHNpYmxlRXZlbnRTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZUxpc3RJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKENvbGxhcHNpYmxlQm9keUNvbXBvbmVudCkgY29udGVudExpc3RCb2RpZXM6IEFycmF5PENvbGxhcHNpYmxlQm9keUNvbXBvbmVudD47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbGxhcHNpYmxlU2VydmljZTogQ29sbGFwc2libGVTZXJ2aWNlKSB7IH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgLy8gc3RvcmUgbGlzdCBib2RpZXMgaW4gJ0NvbGxhcHNpYmxlU2VydmljZSdcbiAgICAgICAgdGhpcy5jb250ZW50TGlzdEJvZGllcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbGxhcHNpYmxlU2VydmljZS5hZGRMaXN0Qm9keShpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLFxuICBJbnB1dCxcbiAgQ29udGVudENoaWxkcmVuXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb2xsYXBzaWJsZUxpc3RJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sbGFwc2libGUtbGlzdC1pdGVtL2NvbGxhcHNpYmxlLWxpc3QtaXRlbS5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBDb2xsYXBzaWJsZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb2xsYXBzaWJsZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY29sbGFwc2libGUtbGlzdCcsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQgc2VsZWN0PVwiY29sbGFwc2libGUtbGlzdC1pdGVtXCI+PC9uZy1jb250ZW50PmAsXG4gIHN0eWxlczogW2BcbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIG1hcmdpbjogMC41cmVtIDAgMXJlbSAwO1xuICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkZGQ7XG4gICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZGRkO1xuICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZGRkO1xuICAgICAgYm94LXNoYWRvdzpcbiAgICAgICAgMCAycHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjE0KSxcbiAgICAgICAgMCAxcHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjEyKSxcbiAgICAgICAgMCAzcHggMXB4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgIH1cblxuICAgIC5zaWRlLW5hdiA6aG9zdCxcbiAgICAuc2lkZS1uYXYuZml4ZWQgOmhvc3Qge1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICB9XG5cbiAgICA6aG9zdCgucG9wb3V0KSB7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBib3gtc2hhZG93OiBub25lO1xuICAgIH1cblxuICAgIDpob3N0KC5wb3BvdXQpID4gbGkge1xuICAgICAgYm94LXNoYWRvdzogMCAycHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE2KSwgMCAycHggMTBweCAwIHJnYmEoMCwgMCwgMCwgMC4xMik7XG4gICAgICBtYXJnaW46IDAgMjRweDtcbiAgICAgIHRyYW5zaXRpb246IG1hcmdpbiAwLjM1cyBjdWJpYy1iZXppZXIoMC4yNSwgMC40NiwgMC40NSwgMC45NCk7XG4gICAgfVxuXG4gICAgLnNpZGUtbmF2IDpob3N0IHtcbiAgICAgIG1hcmdpbjogMDtcbiAgICB9XG4gIGBdLFxuICBwcm92aWRlcnM6IFtDb2xsYXBzaWJsZVNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgLy8gY29tcG9uZW50IG9wdGlvbnNcbiAgLy9cbiAgLy8gZGVzY3JpYmVzIHRoZSB0eXBlIG9mIHRoZSBjb2xsYXBzaWJsZSBsaXN0OiAnYWNjb3JkaW9uJyBvciAnZXhwYW5kYWJsZSdcbiAgQElucHV0KCkgdHlwZTogJ2FjY29yZGlvbicgfCAnZXhwYW5kYWJsZScgPSAnYWNjb3JkaW9uJztcblxuICBAQ29udGVudENoaWxkcmVuKENvbGxhcHNpYmxlTGlzdEl0ZW1Db21wb25lbnQpIGNvbnRlbnRMaXN0SXRlbXM6IEFycmF5PENvbGxhcHNpYmxlTGlzdEl0ZW1Db21wb25lbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29sbGFwc2libGVTZXJ2aWNlOiBDb2xsYXBzaWJsZVNlcnZpY2UpIHsgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY29sbGFwc2libGVTZXJ2aWNlLnNldFR5cGUodGhpcy50eXBlKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IGNoYW5nZSBpbiBjaGFuZ2VzKSB7XG4gICAgICBpZiAoY2hhbmdlID09PSAndHlwZScpIHtcbiAgICAgICAgdGhpcy50eXBlID0gY2hhbmdlcy50eXBlLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgdGhpcy5jb2xsYXBzaWJsZVNlcnZpY2Uuc2V0VHlwZSh0aGlzLnR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29sbGFwc2libGVFdmVudFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb2xsYXBzaWJsZS1ldmVudC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjb2xsYXBzaWJsZS1oZWFkZXInLFxuICAgIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gICAgc3R5bGVzOiBbYFxuICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDNyZW07XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogM3JlbTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgMXJlbTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDtcbiAgICAgICAgfVxuICAgIGBdXG59KVxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlSGVhZGVyQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZXZlbnRTZXJ2aWNlOiBDb2xsYXBzaWJsZUV2ZW50U2VydmljZSkgeyB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gICAgY2xpY2soKSB7XG4gICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLnRvZ2dsZUNvbGxhcHNpYmxlSXRlbSgpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgT25Jbml0LCBBZnRlclZpZXdJbml0LFxuICAgIElucHV0LFxuICAgIFZpZXdDaGlsZHJlblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29sbGFwc2libGVCb2R5Q29tcG9uZW50IH0gZnJvbSAnLi4vY29sbGFwc2libGUtYm9keS9jb2xsYXBzaWJsZS1ib2R5LmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IENvbGxhcHNpYmxlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbGxhcHNpYmxlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnY29sbGFwc2libGUtdGFibGUtcm93LWRldGFpbCcsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPHRkIGNvbHNwYW49XCIxMDAlXCI+XG4gICAgICAgICAgICA8Y29sbGFwc2libGUtbGlzdC1pdGVtPlxuICAgICAgICAgICAgICAgIDxjb2xsYXBzaWJsZS1ib2R5PlxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPC9jb2xsYXBzaWJsZS1ib2R5PlxuICAgICAgICAgICAgPC9jb2xsYXBzaWJsZS1saXN0LWl0ZW0+XG4gICAgICAgIDwvdGQ+XG4gICAgYCxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlLXJvdztcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3N0IGNvbGxhcHNpYmxlLWJvZHksXG4gICAgICAgIDpob3N0IHRkIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIH1cbiAgICBgXVxufSlcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZVRhYmxlUm93RGV0YWlsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgICBzdWJqZWN0OiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgICBASW5wdXQoKSBleHBhbmRlZDogYm9vbGVhbjtcblxuICAgIEBWaWV3Q2hpbGRyZW4oQ29sbGFwc2libGVCb2R5Q29tcG9uZW50KSB2aWV3TGlzdEJvZGllczogQXJyYXk8Q29sbGFwc2libGVCb2R5Q29tcG9uZW50PjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29sbGFwc2libGVTZXJ2aWNlOiBDb2xsYXBzaWJsZVNlcnZpY2UpIHsgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc3ViamVjdC5hc09ic2VydmFibGUoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3TGlzdEJvZGllcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS50b2dnbGVDb2xsYXBzaWJsZUl0ZW0oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIC8vIHN0b3JlIGxpc3QgYm9kaWVzIGluICdDb2xsYXBzaWJsZVNlcnZpY2UnXG4gICAgICAgIHRoaXMudmlld0xpc3RCb2RpZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb2xsYXBzaWJsZVNlcnZpY2UuYWRkTGlzdEJvZHkoaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCxcbiAgICBJbnB1dCwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lcixcbiAgICBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IENvbGxhcHNpYmxlVGFibGVSb3dEZXRhaWxDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS10YWJsZS1yb3ctZGV0YWlsL2NvbGxhcHNpYmxlLXRhYmxlLXJvdy1kZXRhaWwuY29tcG9uZW50JztcbmltcG9ydCB7IENvbGxhcHNpYmxlVGFibGVDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS10YWJsZS9jb2xsYXBzaWJsZS10YWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29sbGFwc2libGUuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnY29sbGFwc2libGUtdGFibGUtcm93JyxcbiAgICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICAgIHN0eWxlczogW2BcbiAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgZGlzcGxheTogdGFibGUtcm93O1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogYmFja2dyb3VuZC1jb2xvciwgY29sb3I7XG4gICAgICAgIH1cbiAgICBgXSxcbn0pXG5leHBvcnQgY2xhc3MgQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgICBwcml2YXRlIHN0YXRpYyBFQVNFX09VVF9RVUFEID0gJ2N1YmljLWJlemllcigwLjI1LCAwLjQ2LCAwLjQ1LCAwLjk0KSc7XG5cbiAgICBwdWJsaWMgc3RhdGljIERFRkFVTFRfU1RSSVBFRF9PRERfUk9XX0NPTE9SID0gJ3JnYmEoMjQyLDI0MiwyNDIsMC44KSc7XG4gICAgcHVibGljIHN0YXRpYyBERUZBVUxUX1NUUklQRURfRVZFTl9ST1dfQ09MT1IgPSAndHJhbnNwYXJlbnQnO1xuICAgIHB1YmxpYyBzdGF0aWMgREVGQVVMVF9ISUdITElHSFRfUk9XX0NPTE9SID0gJ3JnYmEoMjIyLDIyMiwyMjIsIDAuOCknO1xuICAgIHB1YmxpYyBzdGF0aWMgREVGQVVMVF9BQ1RJVkVfUk9XX0NPTE9SID0gJ3JnYmEoMjEyLDIxMiwyMTIsIDAuOCknO1xuICAgIHB1YmxpYyBzdGF0aWMgREVGQVVMVF9TRUxFQ1RFRF9ST1dfQ09MT1IgPSAncmdiYSgyMTIsMjEyLDIxMiwgMC44KSc7XG5cbiAgICBwdWJsaWMgc3RhdGljIERFRkFVTFRfUk9XX1RFWFRfQ09MT1IgPSAnYmxhY2snO1xuXG4gICAgQElucHV0KCkgZGV0YWlsOiBDb2xsYXBzaWJsZVRhYmxlUm93RGV0YWlsQ29tcG9uZW50O1xuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5jb2xvcicpIHJvd1RleHRDb2xvcjogc3RyaW5nO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5iYWNrZ3JvdW5kLWNvbG9yJykgcm93QmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLnRyYW5zaXRpb24tZHVyYXRpb24nKSBiYWNrZ3JvdW5kVHJhbnNpdGlvbkR1cmF0aW9uID0gJzAuM3MnO1xuICAgIC8vIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlSW5RdWFkXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS50cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbicpXG4gICAgYmFja2dyb3VuZFRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiA9IHRoaXMuc2FuaXRpemVyXG4gICAgICAgIC5ieXBhc3NTZWN1cml0eVRydXN0U3R5bGUoQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5FQVNFX09VVF9RVUFEKTtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3Muc2VsZWN0ZWQnKSBzZWxlY3RlZDogYm9vbGVhbjtcblxuICAgIGlzSGVhZFJvdyA9IGZhbHNlO1xuICAgIGlzQm9keVJvdyA9IGZhbHNlO1xuICAgIGlzT2RkUm93ID0gZmFsc2U7XG4gICAgaXNFdmVuUm93ID0gZmFsc2U7XG4gICAgaXNQYXJlbnRTdHJpcGVkID0gZmFsc2U7XG4gICAgaXNQYXJlbnRIaWdobGlnaHQgPSBmYWxzZTtcbiAgICBwYXJlbnRBbGxvd3NTZWxlY3QgPSBmYWxzZTtcbiAgICBwYXJlbnRBbGxvd3NTZWxlY3RNdWx0aXBsZVJvd3MgPSBmYWxzZTtcblxuICAgIHBhcmVudFN0cmlwZWRSb3dCYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBwYXJlbnRTdHJpcGVkUm93VGV4dENvbG9yOiBzdHJpbmc7XG4gICAgcGFyZW50SGlnaGxpZ2h0Um93QmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgcGFyZW50SGlnaGxpZ2h0Um93VGV4dENvbG9yOiBzdHJpbmc7XG4gICAgYWN0aXZlUm93QmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgYWN0aXZlUm93VGV4dENvbG9yOiBzdHJpbmc7XG4gICAgc2VsZWN0ZWRSb3dCYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBzZWxlY3RlZFJvd1RleHRDb2xvcjogc3RyaW5nO1xuICAgIHBhcmVudEFsbG93c0Rlc2VsZWN0aW5nUm93cyA9IGZhbHNlO1xuXG4gICAgaW5kZXg6IG51bWJlcjtcblxuICAgIHByaXZhdGUgcGFyZW50Q29sbGFwc2libGVUYWJsZTogQ29sbGFwc2libGVUYWJsZUNvbXBvbmVudDtcbiAgICBwcml2YXRlIHByZXZTZWxlY3RlZFJvd3M6IEFycmF5PG51bWJlcj47XG4gICAgcHJpdmF0ZSBkcmFnU2VsZWN0aW9uID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICAgICAgcHJpdmF0ZSBjb2xsYXBzaWJsZVNlcnZpY2U6IENvbGxhcHNpYmxlU2VydmljZSkgeyB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgY29uc3QgZWxlbTogRWxlbWVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICAgICAgY29uc3QgdGJvZHk6IEVsZW1lbnQgPSBlbGVtLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGlmICh0Ym9keS50YWdOYW1lID09PSAnVEJPRFknKSB7XG4gICAgICAgICAgICBjb25zdCBjb2xsYXBzaWJsZVRhYmxlUm93czogTm9kZUxpc3RPZjxFbGVtZW50PiA9IHRib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoJ2NvbGxhcHNpYmxlLXRhYmxlLXJvdycpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xsYXBzaWJsZVRhYmxlUm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxhcHNpYmxlVGFibGVSb3c6IEVsZW1lbnQgPSBjb2xsYXBzaWJsZVRhYmxlUm93c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2libGVUYWJsZVJvdyA9PT0gZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHJpZXZlIHBhcmVudCBDb2xsYXBzaWJsZVRhYmxlQ29tcG9uZW50IHRocm91Z2ggdGhlIENvbGxhcHNpYmxlU2VydmljZVxuICAgICAgICB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUgPSB0aGlzLmNvbGxhcHNpYmxlU2VydmljZS5nZXRDb2xsYXBzaWJsZVRhYmxlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiBjb2xsYXBzaWJsZS10YWJsZSBpcyBtYXJrZWQgdG8gc2hvdyBzdHJpcGVkIHRhYmxlXG4gICAgICAgICAgICB0aGlzLmlzUGFyZW50U3RyaXBlZCA9IHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS5zdHJpcGVkO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBjb2xsYXBzaWJsZS10YWJsZSBpcyBtYXJrZWQgdG8gaGlnaGxpZ2h0IGN1cnJlbnQgcm93XG4gICAgICAgICAgICB0aGlzLmlzUGFyZW50SGlnaGxpZ2h0ID0gdGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLmhpZ2hsaWdodDtcbiAgICAgICAgICAgIHRoaXMucGFyZW50SGlnaGxpZ2h0Um93QmFja2dyb3VuZENvbG9yID0gdGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLmhpZ2hsaWdodENvbG9yIHx8XG4gICAgICAgICAgICAgICAgQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5ERUZBVUxUX0hJR0hMSUdIVF9ST1dfQ09MT1I7XG4gICAgICAgICAgICB0aGlzLnBhcmVudEhpZ2hsaWdodFJvd1RleHRDb2xvciA9IHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS5oaWdobGlnaHRUZXh0Q29sb3IgfHxcbiAgICAgICAgICAgICAgICBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50LkRFRkFVTFRfUk9XX1RFWFRfQ09MT1I7XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGNvbGxhcHNpYmxlLXRhYmxlIHNwZWNpZmllcyB0aGUgYWN0aXZlIHJvdyBjb2xvclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVSb3dCYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuYWN0aXZlQ29sb3IgfHxcbiAgICAgICAgICAgICAgICBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50LkRFRkFVTFRfQUNUSVZFX1JPV19DT0xPUjtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlUm93VGV4dENvbG9yID0gdGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLmFjdGl2ZVRleHRDb2xvciB8fFxuICAgICAgICAgICAgICAgIENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQuREVGQVVMVF9ST1dfVEVYVF9DT0xPUjtcblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgY29sbGFwc2libGUtdGFibGUgYWxsb3dzIHNlbGVjdGluZyByb3dzXG4gICAgICAgICAgICB0aGlzLnBhcmVudEFsbG93c1NlbGVjdCA9IHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS5zZWxlY3Q7XG4gICAgICAgICAgICB0aGlzLnBhcmVudEFsbG93c1NlbGVjdE11bHRpcGxlUm93cyA9IHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS5zZWxlY3RNdWx0aXBsZVJvd3M7XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGNvbGxhcHNpYmxlLXRhYmxlIHNwZWNpZmllcyBhIGNvbG9yIGZvciB0aGUgc2VsZWN0ZWQgcm93XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93QmFja2dyb3VuZENvbG9yID0gdGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLnNlbGVjdENvbG9yIHx8XG4gICAgICAgICAgICAgICAgQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5ERUZBVUxUX1NFTEVDVEVEX1JPV19DT0xPUjtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dUZXh0Q29sb3IgPSB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuc2VsZWN0VGV4dENvbG9yIHx8XG4gICAgICAgICAgICAgICAgQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5ERUZBVUxUX1JPV19URVhUX0NPTE9SO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBjb2xsYXBzaWJsZS10YWJsZSBhbGxvd3MgdG8gZGVzZWxlY3Qgcm93c1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRBbGxvd3NEZXNlbGVjdGluZ1Jvd3MgPSB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuYWxsb3dEZXNlbGVjdGluZ1Jvd3MgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLmFsbG93RGVzZWxlY3RpbmdSb3dzIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlUm93KCk7XG4gICAgfVxuXG4gICAgdXBkYXRlUm93KCk6IHZvaWQge1xuICAgICAgICBjb25zdCBlbGVtOiBFbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuXG4gICAgICAgIC8vIGRldGVybWluZSBpZiB0aGUgcm93IGlzIGluc2lkZSB0aGUgJ3RoZWFkJ1xuICAgICAgICBjb25zdCB0aCA9IGVsZW0ucXVlcnlTZWxlY3RvcigndGgnKTtcbiAgICAgICAgaWYgKHRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaXNIZWFkUm93ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRldGVybWluZSBpZiB0aGUgcm93IGlzIGluc2lkZSB0aGUgJ3Rib2R5J1xuICAgICAgICBjb25zdCB0ZCA9IGVsZW0ucXVlcnlTZWxlY3RvcigndGQnKTtcbiAgICAgICAgaWYgKHRkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaXNCb2R5Um93ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGRldGVybWluZSBpZiB0aGUgcm93IGlzICdvZGQnIG9yICdldmVudCdcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNFdmVuUm93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFN0cmlwZWRSb3dCYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuc3RyaXBlZEV2ZW5Db2xvciB8fFxuICAgICAgICAgICAgICAgICAgICBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50LkRFRkFVTFRfU1RSSVBFRF9FVkVOX1JPV19DT0xPUjtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFN0cmlwZWRSb3dUZXh0Q29sb3IgPSB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuc3RyaXBlZEV2ZW5UZXh0Q29sb3IgfHxcbiAgICAgICAgICAgICAgICAgICAgQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5ERUZBVUxUX1JPV19URVhUX0NPTE9SO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzT2RkUm93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudFN0cmlwZWRSb3dCYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuc3RyaXBlZE9kZENvbG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQuREVGQVVMVF9TVFJJUEVEX09ERF9ST1dfQ09MT1I7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRTdHJpcGVkUm93VGV4dENvbG9yID0gdGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLnN0cmlwZWRPZGRUZXh0Q29sb3IgfHxcbiAgICAgICAgICAgICAgICAgICAgQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5ERUZBVUxUX1JPV19URVhUX0NPTE9SO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMucGFyZW50QWxsb3dzU2VsZWN0ICYmIHRoaXMuc2VsZWN0ZWQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm93QmFja2dyb3VuZENvbG9yID0gdGhpcy5zZWxlY3RlZFJvd0JhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dUZXh0Q29sb3IgPSB0aGlzLnNlbGVjdGVkUm93VGV4dENvbG9yO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuaXNQYXJlbnRTdHJpcGVkOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd0JhY2tncm91bmRDb2xvciA9IHRoaXMucGFyZW50U3RyaXBlZFJvd0JhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dUZXh0Q29sb3IgPSB0aGlzLnBhcmVudFN0cmlwZWRSb3dUZXh0Q29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0xlZnRNb3VzZUJ1dHRvbihldmVudDogTW91c2VFdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBidXR0b246IG51bWJlciA9IGV2ZW50LmJ1dHRvbjtcbiAgICAgICAgY29uc3Qgd2hpY2g6IG51bWJlciA9IGV2ZW50Wyd3aGljaCddO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSA8SFRNTEVsZW1lbnQ+KGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgIGlmIChbJ1RSJywgJ1REJ10uaW5kZXhPZih0YXJnZXQudGFnTmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgaWYgKCdidXR0b24nIGluIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbiA9PT0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh3aGljaCB8fCBidXR0b24pID09PSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bicsIFsnJGV2ZW50J10pXG4gICAgbW91c2Vkb3duKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIC8vIGhhbmRsZSBvbmx5IGlmIHRoZSBMZWZ0IG1vdXNlIGJ1dHRvbiBwcmVzc2VkXG4gICAgICAgIC8vIGFuZCB0aGUgcm93IGlzIGEgYm9keSByb3dcbiAgICAgICAgaWYgKHRoaXMuaXNMZWZ0TW91c2VCdXR0b24oZXZlbnQpICYmIHRoaXMuaXNCb2R5Um93KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLm5vVGV4dFNlbGVjdCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pc0JvZHlSb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJlbnRBbGxvd3NTZWxlY3QgJiYgIXRoaXMucGFyZW50QWxsb3dzRGVzZWxlY3RpbmdSb3dzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldlNlbGVjdGVkUm93cyA9IHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS5zZWxlY3RlZFJvd3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS5jbGVhclNlbGVjdGVkUm93cygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuZGVzZWxlY3RBbGxSb3dzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucm93QmFja2dyb3VuZENvbG9yID0gdGhpcy5hY3RpdmVSb3dCYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3dUZXh0Q29sb3IgPSB0aGlzLmFjdGl2ZVJvd1RleHRDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNldXAnLCBbJyRldmVudCddKVxuICAgIG1vdXNldXAoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgLy8gaGFuZGxlIG9ubHkgaWYgdGhlIExlZnQgbW91c2UgYnV0dG9uIHByZXNzZWRcbiAgICAgICAgLy8gYW5kIHRoZSByb3cgaXMgYSBib2R5IHJvd1xuICAgICAgICBpZiAodGhpcy5pc0xlZnRNb3VzZUJ1dHRvbihldmVudCkgJiYgdGhpcy5pc0JvZHlSb3cpIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBzZWxlY3Rpb25cbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudEFsbG93c1NlbGVjdCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnRBbGxvd3NEZXNlbGVjdGluZ1Jvd3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLnNlbGVjdFJvdyh0aGlzLmluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZHJhZ1NlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLnRvZ2dsZVJvd1NlbGVjdGlvbih0aGlzLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2hlY2sgcm93IHN0YXRlXG4gICAgICAgICAgICB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUudXBkYXRlVGFibGUoKTtcbiAgICAgICAgICAgIC8qc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgLy8gcGFyZW50IGFsbG93cyBzZWxlY3Rpbmcgcm93cyBhbmQgdGhlIHJvdyBpcyBzZWxlY3RlZFxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5wYXJlbnRBbGxvd3NTZWxlY3QgJiYgdGhpcy5zZWxlY3RlZDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dCYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLnNlbGVjdGVkUm93QmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd1RleHRDb2xvciA9IHRoaXMuc2VsZWN0ZWRSb3dUZXh0Q29sb3I7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS51cGRhdGVUYWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvLyBoaWdobGlnaHRlZFxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5pc1BhcmVudEhpZ2hsaWdodDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dCYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLnBhcmVudEhpZ2hsaWdodFJvd0JhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dUZXh0Q29sb3IgPSB0aGlzLnBhcmVudEhpZ2hsaWdodFJvd1RleHRDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy8gc3RyaXBlZFxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5pc1BhcmVudFN0cmlwZWQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm93QmFja2dyb3VuZENvbG9yID0gdGhpcy5wYXJlbnRTdHJpcGVkUm93QmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd1RleHRDb2xvciA9IHRoaXMucGFyZW50U3RyaXBlZFJvd1RleHRDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dCYWNrZ3JvdW5kQ29sb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm93VGV4dENvbG9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0qL1xuXG4gICAgICAgICAgICAvLyBzZWxlY3QgbXVsdGlwbGUgcm93cyB1c2luZyB0aGUgJ1NoaWZ0JyBrZXlcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudEFsbG93c1NlbGVjdCAmJlxuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50QWxsb3dzU2VsZWN0TXVsdGlwbGVSb3dzICYmXG4gICAgICAgICAgICAgICAgZXZlbnQgIT0gbnVsbCAmJiBldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByZXZTZWxlY3RlZFJvd3MgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZTZWxlY3RlZFJvd3MubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuc2VsZWN0ZWRSb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFuZ2VTZWxlY3RlZFJvd3MgPSB0aGlzLnByZXZTZWxlY3RlZFJvd3MuY29uY2F0KHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS5zZWxlY3RlZFJvd3MpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZVNlbGVjdGVkUm93cy5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Um93SW5kZXggPSBNYXRoLm1pbi5hcHBseShudWxsLCByYW5nZVNlbGVjdGVkUm93cyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RSb3dJbmRleCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIHJhbmdlU2VsZWN0ZWRSb3dzKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuc2VsZWN0Um93cyhmaXJzdFJvd0luZGV4LCBsYXN0Um93SW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2V0IGRyYWdTZWxlY3Rpb24gZmxhZyB0byBmYWxzZS4gUHJldmVudHMgc2VsZWN0aW9uIGRyYWcgYmVoYXZpb3JcbiAgICAgICAgICAgIHRoaXMuZHJhZ1NlbGVjdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBmb2N1cyB0aGUgY29sbGFwc2libGUgdGFibGVcbiAgICAgICAgICAgIHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicsIFsnJGV2ZW50J10pXG4gICAgbW91c2VlbnRlcihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICAvLyBoYW5kbGUgb25seSBpZiB0aGUgcm93IGlzIGEgYm9keSByb3dcbiAgICAgICAgaWYgKHRoaXMuaXNCb2R5Um93KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGUgdXNlIGlzIHRyeWluZyB0byBzZWxlY3QgbXVsdGlwbGUgcm93cyBieSBob2xkaW5nIGEgbW91c2UgYnV0dG9uXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnBhcmVudEFsbG93c1NlbGVjdCAmJiB0aGlzLnBhcmVudEFsbG93c1NlbGVjdE11bHRpcGxlUm93cyAmJiB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUubW91c2VEb3duSG9sZDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRDb2xsYXBzaWJsZVRhYmxlLnNlbGVjdFJvdyh0aGlzLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy8gcGFyZW50IGFsbG93cyBzZWxlY3Rpbmcgcm93cyBhbmQgdGhlIHJvdyBpcyBzZWxlY3RlZFxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5wYXJlbnRBbGxvd3NTZWxlY3QgJiYgdGhpcy5zZWxlY3RlZDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy8gaGlnaGxpZ2h0ZWRcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuaXNQYXJlbnRIaWdobGlnaHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm93QmFja2dyb3VuZENvbG9yID0gdGhpcy5wYXJlbnRIaWdobGlnaHRSb3dCYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm93VGV4dENvbG9yID0gdGhpcy5wYXJlbnRIaWdobGlnaHRSb3dUZXh0Q29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScsIFsnJGV2ZW50J10pXG4gICAgbW91c2VsZWF2ZShldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICAvLyBoYW5kbGUgb25seSBpZiB0aGUgcm93IGlzIGEgYm9keSByb3dcbiAgICAgICAgaWYgKHRoaXMuaXNCb2R5Um93KSB7XG4gICAgICAgICAgICAvLyBjaGVjayByb3cgc3RhdGVcbiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIC8vIHRoZSB1c2UgaXMgdHJ5aW5nIHRvIHNlbGVjdCBtdWx0aXBsZSByb3dzIGJ5IGhvbGRpbmcgYSBtb3VzZSBidXR0b25cbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMucGFyZW50QWxsb3dzU2VsZWN0ICYmIHRoaXMucGFyZW50QWxsb3dzU2VsZWN0TXVsdGlwbGVSb3dzICYmIHRoaXMucGFyZW50Q29sbGFwc2libGVUYWJsZS5tb3VzZURvd25Ib2xkOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudENvbGxhcHNpYmxlVGFibGUuc2VsZWN0Um93KHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYWdTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy8gcGFyZW50IGFsbG93cyBzZWxlY3Rpbmcgcm93cyBhbmQgdGhlIHJvdyBpcyBzZWxlY3RlZFxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5wYXJlbnRBbGxvd3NTZWxlY3QgJiYgdGhpcy5zZWxlY3RlZDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy8gc3RyaXBwZWRcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuaXNQYXJlbnRTdHJpcGVkOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd0JhY2tncm91bmRDb2xvciA9IHRoaXMucGFyZW50U3RyaXBlZFJvd0JhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dUZXh0Q29sb3IgPSB0aGlzLnBhcmVudFN0cmlwZWRSb3dUZXh0Q29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm93QmFja2dyb3VuZENvbG9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd1RleHRDb2xvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gICAgY2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuZGV0YWlsICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IDxIVE1MRWxlbWVudD4oZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQgfHwgZXZlbnQuY3VycmVudFRhcmdldCk7XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiBbJ1RSJywgJ1REJ10uaW5kZXhPZih0YXJnZXQudGFnTmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlsLnN1YmplY3QubmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBPbkluaXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgQWZ0ZXJDb250ZW50SW5pdCxcbiAgICBJbnB1dCwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lcixcbiAgICBFbGVtZW50UmVmLCBDb250ZW50Q2hpbGRyZW5cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQgfSBmcm9tICcuLi9jb2xsYXBzaWJsZS10YWJsZS1yb3cvY29sbGFwc2libGUtdGFibGUtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb2xsYXBzaWJsZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjb2xsYXBzaWJsZS10YWJsZScsXG4gICAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgOmhvc3QgdGhlYWQge1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkMGQwZDA7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdCAvZGVlcC8gdGJvZHkgL2RlZXAvIGNvbGxhcHNpYmxlLXRhYmxlLXJvdyB7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdCAvZGVlcC8gY29sbGFwc2libGUtdGFibGUtcm93IHRoLFxuICAgICAgICA6aG9zdCAvZGVlcC8gY29sbGFwc2libGUtdGFibGUtcm93IHRkIHtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdFtib3JkZXJlZD0ndHJ1ZSddIHtcbiAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZDBkMGQwO1xuICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2QwZDBkMDtcbiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2QwZDBkMDtcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3N0W2JvcmRlcmVkPSd0cnVlJ10gL2RlZXAvIGNvbGxhcHNpYmxlLXRhYmxlLXJvdyxcbiAgICAgICAgOmhvc3RbYm9yZGVyZWRIb3Jpem9udGFsbHk9J3RydWUnXSAvZGVlcC8gY29sbGFwc2libGUtdGFibGUtcm93IHtcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZDBkMGQwO1xuICAgICAgICB9XG5cbiAgICAgICAgOmhvc3RbYm9yZGVyZWQ9J3RydWUnXSAvZGVlcC8gY29sbGFwc2libGUtdGFibGUtcm93IHRoLFxuICAgICAgICA6aG9zdFtib3JkZXJlZD0ndHJ1ZSddIC9kZWVwLyBjb2xsYXBzaWJsZS10YWJsZS1yb3cgdGQsXG4gICAgICAgIDpob3N0W2JvcmRlcmVkVmVydGljYWxseT0ndHJ1ZSddIC9kZWVwLyBjb2xsYXBzaWJsZS10YWJsZS1yb3cgdGg6bm90KDpsYXN0LWNoaWxkKSxcbiAgICAgICAgOmhvc3RbYm9yZGVyZWRWZXJ0aWNhbGx5PSd0cnVlJ10gL2RlZXAvIGNvbGxhcHNpYmxlLXRhYmxlLXJvdyB0ZDpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkMGQwZDA7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdCguY2VudGVyZWQpIC9kZWVwLyAqIHtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3N0KC5ub1RleHRTZWxlY3QpIC9kZWVwLyBjb2xsYXBzaWJsZS10YWJsZS1yb3cgdGgsXG4gICAgICAgIDpob3N0KC5ub1RleHRTZWxlY3QpIC9kZWVwLyBjb2xsYXBzaWJsZS10YWJsZS1yb3cgdGQge1xuICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgIH1cbiAgICBgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgQ29sbGFwc2libGVTZXJ2aWNlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZVRhYmxlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQge1xuICAgIC8vIGNvbXBvbmVudCBvcHRpb25zXG4gICAgLy9cbiAgICAvLyBtYWtlcyB0aGUgdGFibGUgYm9yZGVyZWRcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5ib3JkZXJlZCcpIGJvcmRlcmVkOiBib29sZWFuO1xuXG4gICAgLy8gbWFrZXMgdGhlIHRhYmxlIGJvcmRlcmVkIGhvcml6b250YWxseSBvbmx5XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYm9yZGVyZWRIb3Jpem9udGFsbHknKSBib3JkZXJlZEhvcml6b250YWxseTogYm9vbGVhbjtcblxuICAgIC8vIG1ha2VzIHRoZSB0YWJsZSBib3JkZXJlZCB2ZXJ0aWNhbGx5IG9ubHlcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5ib3JkZXJlZFZlcnRpY2FsbHknKSBib3JkZXJlZFZlcnRpY2FsbHk6IGJvb2xlYW47XG5cbiAgICAvLyBtYWtlcyB0aGUgdGFibGUgc3RyaXBlZFxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnN0cmlwZWQnKSBzdHJpcGVkOiBib29sZWFuO1xuXG4gICAgLy8gYSBjb2xvciBvZiBhbiBvZGQgc3RyaXBlZCByb3dcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5zdHJpcGVkT2RkQ29sb3InKSBzdHJpcGVkT2RkQ29sb3I6IHN0cmluZztcblxuICAgIC8vIGEgdGV4dCBjb2xvciBvZiBhbiBvZGQgc3RyaXBlZCByb3dcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5zdHJpcGVkT2RkVGV4dENvbG9yJykgc3RyaXBlZE9kZFRleHRDb2xvcjogc3RyaW5nO1xuXG4gICAgLy8gYSBjb2xvciBvZiBhbiBldmVuIHN0cmlwZWQgcm93XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuc3RyaXBlZEV2ZW5Db2xvcicpIHN0cmlwZWRFdmVuQ29sb3I6IHN0cmluZztcblxuICAgIC8vIGEgdGV4dCBjb2xvciBvZiBhbiBldmVuIHN0cmlwZWQgcm93XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuc3RyaXBlZEV2ZW5UZXh0Q29sb3InKSBzdHJpcGVkRXZlblRleHRDb2xvcjogc3RyaW5nO1xuXG4gICAgLy8gaGlnaGxpZ2h0IHRhYmxlIHJvd3Mgb24gbW91c2UgaG92ZXJcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5oaWdobGlnaHQnKSBoaWdobGlnaHQ6IGJvb2xlYW47XG5cbiAgICAvLyBhIGNvbG9yIG9mIGEgaGlnaGxpZ2h0ZWQgcm93XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuaGlnaGxpZ2h0Q29sb3InKSBoaWdobGlnaHRDb2xvcjogc3RyaW5nO1xuXG4gICAgLy8gYSB0ZXh0IGNvbG9yIG9mIGEgaGlnaGxpZ2h0ZWQgcm93XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuaGlnaGxpZ2h0VGV4dENvbG9yJykgaGlnaGxpZ2h0VGV4dENvbG9yOiBzdHJpbmc7XG5cbiAgICAvLyBhIGNvbG9yIG9mIGFuIGFjdGl2ZSByb3dcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hY3RpdmVDb2xvcicpIGFjdGl2ZUNvbG9yOiBzdHJpbmc7XG5cbiAgICAvLyBhIHRleHQgY29sb3Igb2YgYW4gYWN0aXZlIHJvd1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFjdGl2ZVRleHRDb2xvcicpIGFjdGl2ZVRleHRDb2xvcjogc3RyaW5nO1xuXG4gICAgLy8gY2VudGVyIGFsaWduIGFsbCB0aGUgdGV4dCBpbiB0aGUgdGFibGVcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuY2VudGVyZWQnKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5jZW50ZXJlZCcpIGNlbnRlcmVkOiBib29sZWFuO1xuXG4gICAgLy8gbWFrZXMgdGhlIHRhYmxlIGhvcml6b250YWxseSBzY3JvbGxhYmxlIG9uIHNtYWxsZXIgc2NyZWVuIHdpZHRoc1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJlc3BvbnNpdmUnKSByZXNwb25zaXZlOiBib29sZWFuO1xuXG4gICAgLy8gYWxsb3dzIHRvIHNlbGVjdCByb3dzXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuc2VsZWN0Jykgc2VsZWN0OiBib29sZWFuO1xuXG4gICAgLy8gYWxsb3dzIHRvIHNlbGVjdCBtdWx0aXBsZSByb3dzXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuc2VsZWN0TXVsdGlwbGVSb3dzJykgc2VsZWN0TXVsdGlwbGVSb3dzOiBib29sZWFuO1xuXG4gICAgLy8gYSBjb2xvciBvZiBhIHNlbGVjdGVkIHJvd1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnNlbGVjdENvbG9yJykgc2VsZWN0Q29sb3I6IHN0cmluZztcblxuICAgIC8vIGEgdGV4dCBjb2xvciBvZiBhIHNlbGVjdGVkIHJvd1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnNlbGVjdFRleHRDb2xvcicpIHNlbGVjdFRleHRDb2xvcjogc3RyaW5nO1xuXG4gICAgLy8gYWxsb3dzIGRlc2VsZWN0aW5nIHNlbGVjdGVkIHJvd3NcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hbGxvd0Rlc2VsZWN0aW5nUm93cycpIGFsbG93RGVzZWxlY3RpbmdSb3dzOiBib29sZWFuO1xuXG4gICAgLy8gYWxsb3dzIG5hdmlnYXRpb24gYmV0d2VlbiB0YWJsZSByb3dzIHVzaW5nIGFycm93IGtleXNcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hbGxvd0tleWJvYXJkTmF2aWdhdGlvbicpXG4gICAgYWxsb3dLZXlib2FyZE5hdmlnYXRpb24gPSB0cnVlO1xuXG4gICAgLy8gZGlzYWJsZXMgdXNlciBzZWxlY3Qgd2l0aGluZyB0aGUgdGFibGVcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnY2xhc3Mubm9UZXh0U2VsZWN0JylcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIubm9UZXh0U2VsZWN0Jykgbm9UZXh0U2VsZWN0OiBib29sZWFuO1xuXG4gICAgZml4ZWRUYWJsZUhlaWdodCA9ICdhdXRvJztcblxuICAgIEBIb3N0QmluZGluZygnYXR0ci50YWJpbmRleCcpIHRhYmluZGV4ID0gMDtcblxuICAgIHNlbGVjdGVkUm93czogQXJyYXk8bnVtYmVyPiA9IFtdO1xuXG4gICAgLy8gc3BlY2lmaWVzIGNvbGxhcHNpYmxlIHR5cGUuIENhbiBiZSBlaXRoZXIgJ2FjY29yZGlvbicgb3IgJ2V4cGFuZGFibGUnXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIudHlwZScpIHR5cGU6ICdhY2NvcmRpb24nIHwgJ2V4cGFuZGFibGUnID0gJ2FjY29yZGlvbic7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQpIGNvbGxhcHNpYmxlVGFibGVSb3dzOiBBcnJheTxDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50PjtcblxuICAgIG1vdXNlRG93bkhvbGQgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIGNvbGxhcHNpYmxlU2VydmljZTogQ29sbGFwc2libGVTZXJ2aWNlKSB7IH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgLy8gdGhpcy51cGRhdGVGaXhlZFRhYmxlSGVpZ2h0KCk7XG4gICAgICAgIC8qXG4gICAgICAgIExPRyhgQ29sbGFwc2libGVUYWJsZUNvbXBvbmVudDo6bmdPbkluaXQoKVxcbmAgK1xuICAgICAgICAgICAgYHRoaXMgPSB7XFxuYCArXG4gICAgICAgICAgICBgYm9yZGVyZWQgPSAke3RoaXMuYm9yZGVyZWR9XFxuYCArXG4gICAgICAgICAgICBgYm9yZGVyZWRIb3Jpem9udGFsbHkgPSAke3RoaXMuYm9yZGVyZWRIb3Jpem9udGFsbHl9XFxuYCArXG4gICAgICAgICAgICBgYm9yZGVyZWRWZXJ0aWNhbGx5ID0gJHt0aGlzLmJvcmRlcmVkVmVydGljYWxseX1cXG5gICtcbiAgICAgICAgICAgIGBzdHJpcGVkID0gJHt0aGlzLnN0cmlwZWR9XFxuYCArXG4gICAgICAgICAgICBgc3RyaXBlZE9kZENvbG9yID0gJHt0aGlzLnN0cmlwZWRPZGRDb2xvcn1cXG5gICtcbiAgICAgICAgICAgIGBzdHJpcGVkRXZlbkNvbG9yID0gJHt0aGlzLnN0cmlwZWRFdmVuQ29sb3J9XFxuYCArXG4gICAgICAgICAgICBgaGlnaGxpZ2h0ID0gJHt0aGlzLmhpZ2hsaWdodH1cXG5gICtcbiAgICAgICAgICAgIGBoaWdobGlnaHRDb2xvciA9ICR7dGhpcy5oaWdobGlnaHRDb2xvcn1cXG5gICtcbiAgICAgICAgICAgIGBoaWdobGlnaHRUZXh0Q29sb3IgPSAke3RoaXMuaGlnaGxpZ2h0VGV4dENvbG9yfVxcbmAgK1xuICAgICAgICAgICAgYGFjdGl2ZUNvbG9yID0gJHt0aGlzLmFjdGl2ZUNvbG9yfVxcbmAgK1xuICAgICAgICAgICAgYGFjdGl2ZVRleHRDb2xvciA9ICR7dGhpcy5hY3RpdmVUZXh0Q29sb3J9XFxuYCArXG4gICAgICAgICAgICBgY2VudGVyZWQgPSAke3RoaXMuY2VudGVyZWR9XFxuYCArXG4gICAgICAgICAgICBgcmVzcG9uc2l2ZSA9ICR7dGhpcy5yZXNwb25zaXZlfVxcbmAgK1xuICAgICAgICAgICAgYHNlbGVjdCA9ICR7dGhpcy5zZWxlY3R9XFxuYCArXG4gICAgICAgICAgICBgc2VsZWN0Q29sb3IgPSAke3RoaXMuc2VsZWN0Q29sb3J9XFxuYCArXG4gICAgICAgICAgICBgc2VsZWN0VGV4dENvbG9yID0gJHt0aGlzLnNlbGVjdFRleHRDb2xvcn1cXG5gICtcbiAgICAgICAgICAgIGBzZWxlY3RNdWx0aXBsZVJvd3MgPSAke3RoaXMuc2VsZWN0TXVsdGlwbGVSb3dzfVxcbmAgK1xuICAgICAgICAgICAgYG5vVGV4dFNlbGVjdCA9ICR7dGhpcy5ub1RleHRTZWxlY3R9XFxuYCArXG4gICAgICAgICAgICBgfWApO1xuICAgICAgICAgICAgKi9cbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIGZvciAoY29uc3QgY2hhbmdlIGluIGNoYW5nZXMpIHtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmhhc093blByb3BlcnR5KGNoYW5nZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2xsYXBzaWJsZVRhYmxlUm93cyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdHJpcGVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmlwZWRPZGRDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdHJpcGVkT2RkVGV4dENvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmlwZWRFdmVuQ29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RyaXBlZEV2ZW5UZXh0Q29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVGFibGUoJ3N0cmlwZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hpZ2hsaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdoaWdobGlnaHRDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdoaWdobGlnaHRUZXh0Q29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVGFibGUoJ2hpZ2hsaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWN0aXZlQ29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWN0aXZlVGV4dENvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRhYmxlKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzZWxlY3RDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzZWxlY3RUZXh0Q29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0TXVsdGlwbGVSb3dzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FsbG93RGVzZWxlY3RpbmdSb3dzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRhYmxlKCdzZWxlY3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjb2xsYXBzaWJsZSB0YWJsZSB0eXBlIGluIENvbGxhcHNpYmxlU2VydmljZVxuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2UgPT09ICd0eXBlJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBjaGFuZ2VzLnR5cGUuY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNpYmxlU2VydmljZS5zZXRUeXBlKHRoaXMudHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29sbGFwc2libGVTZXJ2aWNlLnNldENvbGxhcHNpYmxlVGFibGUodGhpcyk7XG4gICAgfVxuXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIGFkZFNlbGVjdGVkUm93KGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICBjYXNlIHRoaXMuc2VsZWN0TXVsdGlwbGVSb3dzICYmIHRoaXMuc2VsZWN0ZWRSb3dzLmluZGV4T2YoaW5kZXgpID09PSAtMTpcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93cy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93cy5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICF0aGlzLnNlbGVjdE11bHRpcGxlUm93czpcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93cyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RBbGxSb3dzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvd3MucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvd3Muc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlU2VsZWN0ZWRSb3coaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFJvd3MuaW5kZXhPZihpbmRleCkgIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93cy5zcGxpY2UodGhpcy5zZWxlY3RlZFJvd3MuaW5kZXhPZihpbmRleCksIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXJTZWxlY3RlZFJvd3MoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRSb3dzID0gW107XG4gICAgfVxuXG4gICAgZGVzZWxlY3RBbGxSb3dzKCkge1xuICAgICAgICB0aGlzLmNvbGxhcHNpYmxlVGFibGVSb3dzLmZvckVhY2gocm93ID0+IHtcbiAgICAgICAgICAgIHJvdy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcm93LnVwZGF0ZVJvdygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZWxlY3RSb3coaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgaW5kZXggPT09IDA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Um93KDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGluZGV4ID09PSB0aGlzLmNvbGxhcHNpYmxlVGFibGVSb3dzLmxlbmd0aDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RSb3codGhpcy5jb2xsYXBzaWJsZVRhYmxlUm93cy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAwIDwgaW5kZXggJiYgaW5kZXggPD0gdGhpcy5jb2xsYXBzaWJsZVRhYmxlUm93cy5sZW5ndGggLSAxOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFNlbGVjdGVkUm93KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzaWJsZVRhYmxlUm93cy5mb3JFYWNoKChyb3csIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3RNdWx0aXBsZVJvd3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcm93LnVwZGF0ZVJvdygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHNlbGVjdFJvd3MoZmlyc3RSb3dJbmRleDogbnVtYmVyLCBsYXN0Um93SW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RNdWx0aXBsZVJvd3MgJiZcbiAgICAgICAgICAgIDAgPCBmaXJzdFJvd0luZGV4ICYmIGZpcnN0Um93SW5kZXggPCBsYXN0Um93SW5kZXggJiZcbiAgICAgICAgICAgIGxhc3RSb3dJbmRleCA8PSB0aGlzLmNvbGxhcHNpYmxlVGFibGVSb3dzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3RlZFJvd3MoKTtcbiAgICAgICAgICAgIHRoaXMuY29sbGFwc2libGVUYWJsZVJvd3MuZm9yRWFjaCgocm93LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0Um93SW5kZXggPD0gaSAmJiBpIDw9IGxhc3RSb3dJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFNlbGVjdGVkUm93KGkpO1xuICAgICAgICAgICAgICAgICAgICByb3cuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb3cudXBkYXRlUm93KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZVJvd1NlbGVjdGlvbihpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdCAmJlxuICAgICAgICAgICAgMCA8IGluZGV4ICYmIGluZGV4IDw9IHRoaXMuY29sbGFwc2libGVUYWJsZVJvd3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGhpcy5jb2xsYXBzaWJsZVRhYmxlUm93cy5mb3JFYWNoKChyb3csIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTZWxlY3RlZFJvdyhpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFNlbGVjdGVkUm93KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByb3cuc2VsZWN0ZWQgPSAhcm93LnNlbGVjdGVkO1xuICAgICAgICAgICAgICAgICAgICByb3cudXBkYXRlUm93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKnVwZGF0ZUZpeGVkVGFibGVIZWlnaHQoKSB7XG4gICAgICAgIHRoaXMuZml4ZWRUYWJsZUhlaWdodCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgKyAncHgnO1xuICAgICAgICBsZXQgZWxlbTogRWxlbWVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICAgICAgbGV0IHJvd0hlaWdodHMgPSAwO1xuICAgICAgICBpZiAodGhpcy5jb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0qL1xuXG4gICAgdXBkYXRlU3RyaXBlZChyb3c6IENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc3RyaXBlZCAmJiByb3cuaXNCb2R5Um93KSB7XG4gICAgICAgICAgICByb3cuaXNQYXJlbnRTdHJpcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChyb3cuaXNPZGRSb3cpIHtcbiAgICAgICAgICAgICAgICByb3cucGFyZW50U3RyaXBlZFJvd0JhY2tncm91bmRDb2xvciA9IHRoaXMuc3RyaXBlZE9kZENvbG9yIHx8IENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQuREVGQVVMVF9TVFJJUEVEX09ERF9ST1dfQ09MT1I7XG4gICAgICAgICAgICAgICAgcm93LnBhcmVudFN0cmlwZWRSb3dUZXh0Q29sb3IgPSB0aGlzLnN0cmlwZWRPZGRUZXh0Q29sb3IgfHwgQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5ERUZBVUxUX1JPV19URVhUX0NPTE9SO1xuICAgICAgICAgICAgICAgIHJvdy5yb3dCYWNrZ3JvdW5kQ29sb3IgPSByb3cucGFyZW50U3RyaXBlZFJvd0JhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICByb3cucm93VGV4dENvbG9yID0gcm93LnBhcmVudFN0cmlwZWRSb3dUZXh0Q29sb3I7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvdy5wYXJlbnRTdHJpcGVkUm93QmFja2dyb3VuZENvbG9yID0gdGhpcy5zdHJpcGVkRXZlbkNvbG9yIHx8IENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQuREVGQVVMVF9TVFJJUEVEX0VWRU5fUk9XX0NPTE9SO1xuICAgICAgICAgICAgICAgIHJvdy5wYXJlbnRTdHJpcGVkUm93VGV4dENvbG9yID0gdGhpcy5zdHJpcGVkRXZlblRleHRDb2xvciB8fCBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50LkRFRkFVTFRfUk9XX1RFWFRfQ09MT1I7XG4gICAgICAgICAgICAgICAgcm93LnJvd0JhY2tncm91bmRDb2xvciA9IHJvdy5wYXJlbnRTdHJpcGVkUm93QmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgICAgIHJvdy5yb3dUZXh0Q29sb3IgPSByb3cucGFyZW50U3RyaXBlZFJvd1RleHRDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvdy5pc1BhcmVudFN0cmlwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJvdy5yb3dCYWNrZ3JvdW5kQ29sb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByb3cucm93VGV4dENvbG9yID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlSGlnaGxpZ2h0KHJvdzogQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICByb3cuaXNQYXJlbnRIaWdobGlnaHQgPSB0aGlzLmhpZ2hsaWdodDtcbiAgICAgICAgcm93LnBhcmVudEhpZ2hsaWdodFJvd0JhY2tncm91bmRDb2xvciA9IHRoaXMuaGlnaGxpZ2h0Q29sb3IgfHwgQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5ERUZBVUxUX0hJR0hMSUdIVF9ST1dfQ09MT1I7XG4gICAgICAgIHJvdy5wYXJlbnRIaWdobGlnaHRSb3dUZXh0Q29sb3IgPSB0aGlzLmhpZ2hsaWdodFRleHRDb2xvciB8fCBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50LkRFRkFVTFRfUk9XX1RFWFRfQ09MT1I7XG4gICAgfVxuXG4gICAgdXBkYXRlQWN0aXZlKHJvdzogQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICByb3cuYWN0aXZlUm93QmFja2dyb3VuZENvbG9yID0gdGhpcy5hY3RpdmVDb2xvciB8fCBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50LkRFRkFVTFRfQUNUSVZFX1JPV19DT0xPUjtcbiAgICAgICAgcm93LmFjdGl2ZVJvd1RleHRDb2xvciA9IHRoaXMuYWN0aXZlVGV4dENvbG9yIHx8IENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQuREVGQVVMVF9ST1dfVEVYVF9DT0xPUjtcbiAgICB9XG5cbiAgICB1cGRhdGVTZWxlY3Qocm93OiBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIHJvdy5wYXJlbnRBbGxvd3NTZWxlY3QgPSB0aGlzLnNlbGVjdDtcbiAgICAgICAgcm93LnBhcmVudEFsbG93c1NlbGVjdE11bHRpcGxlUm93cyA9IHRoaXMuc2VsZWN0TXVsdGlwbGVSb3dzO1xuICAgICAgICByb3cucGFyZW50QWxsb3dzRGVzZWxlY3RpbmdSb3dzID0gdGhpcy5hbGxvd0Rlc2VsZWN0aW5nUm93cztcbiAgICAgICAgaWYgKHJvdy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgcm93LnNlbGVjdGVkUm93QmFja2dyb3VuZENvbG9yID0gdGhpcy5zZWxlY3RDb2xvciB8fCBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50LkRFRkFVTFRfU0VMRUNURURfUk9XX0NPTE9SO1xuICAgICAgICAgICAgcm93LnNlbGVjdGVkUm93VGV4dENvbG9yID0gdGhpcy5zZWxlY3RUZXh0Q29sb3IgfHwgQ29sbGFwc2libGVUYWJsZVJvd0NvbXBvbmVudC5ERUZBVUxUX1JPV19URVhUX0NPTE9SO1xuICAgICAgICAgICAgcm93LnJvd0JhY2tncm91bmRDb2xvciA9IHJvdy5zZWxlY3RlZFJvd0JhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgIHJvdy5yb3dUZXh0Q29sb3IgPSByb3cuc2VsZWN0ZWRSb3dUZXh0Q29sb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVUYWJsZShjaGFuZ2U/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY29sbGFwc2libGVUYWJsZVJvd3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGNoYW5nZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RyaXBlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcm9wYWdhdGUgY2hhbmdlcyB0byBlYWNoIG9mIHRoZSBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNpYmxlVGFibGVSb3dzLmZvckVhY2gocm93ID0+IHsgdGhpcy51cGRhdGVTdHJpcGVkKHJvdyk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hpZ2hsaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNpYmxlVGFibGVSb3dzLmZvckVhY2gocm93ID0+IHsgdGhpcy51cGRhdGVIaWdobGlnaHQocm93KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWN0aXZlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2libGVUYWJsZVJvd3MuZm9yRWFjaChyb3cgPT4geyB0aGlzLnVwZGF0ZUFjdGl2ZShyb3cpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzaWJsZVRhYmxlUm93cy5mb3JFYWNoKHJvdyA9PiB7IHRoaXMudXBkYXRlU2VsZWN0KHJvdyk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBwcm9wYWdhdGUgY2hhbmdlcyB0byBlYWNoIG9mIHRoZSBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzaWJsZVRhYmxlUm93cy5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RyaXBlZChyb3cpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhpZ2hsaWdodChyb3cpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdChyb3cpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZShyb3cpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gICAga2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICAvLyBzZWxlY3QgYSByb3cgb25seSBpZiAnc2VsZWN0JyBwcm9wZXJ0eSBpcyBzZXQgdG8gJ3RydWUnXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdCAmJiB0aGlzLmFsbG93S2V5Ym9hcmROYXZpZ2F0aW9uKSB7XG4gICAgICAgICAgICBlbnVtIEtleSB7XG4gICAgICAgICAgICAgICAgYXJyb3dVcCA9IDM4LFxuICAgICAgICAgICAgICAgIGFycm93RG93biA9IDQwLFxuICAgICAgICAgICAgICAgIGhvbWUgPSAzNixcbiAgICAgICAgICAgICAgICBlbmQgPSAzNVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgaW5kZXggPSAxO1xuICAgICAgICAgICAgY29uc3Qgd2hpY2hLZXkgPSBldmVudFsnd2hpY2gnXTtcbiAgICAgICAgICAgIGlmIChLZXlbd2hpY2hLZXldICE9IG51bGwpIHtcblxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHdoaWNoS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5LmFycm93VXA6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3QgcHJldmlvdXMgcm93XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFJvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5zZWxlY3RlZFJvd3NbdGhpcy5zZWxlY3RlZFJvd3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtleS5hcnJvd0Rvd246XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3QgbmV4dCByb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkUm93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLnNlbGVjdGVkUm93c1t0aGlzLnNlbGVjdGVkUm93cy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2V5LmhvbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLZXkuZW5kOlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLmNvbGxhcHNpYmxlVGFibGVSb3dzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyU2VsZWN0ZWRSb3dzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXNlbGVjdEFsbFJvd3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFJvdyhpbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUYWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2Vkb3duJylcbiAgICBtb3VzZWRvd24oKSB7XG4gICAgICAgIHRoaXMubW91c2VEb3duSG9sZCA9IHRydWU7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2V1cCcpXG4gICAgbW91c2V1cCgpIHtcbiAgICAgICAgdGhpcy5tb3VzZURvd25Ib2xkID0gZmFsc2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IENvbGxhcHNpYmxlTGlzdENvbXBvbmVudCB9IGZyb20gJy4vY29sbGFwc2libGUtbGlzdC9jb2xsYXBzaWJsZS1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZUxpc3RJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9jb2xsYXBzaWJsZS1saXN0LWl0ZW0vY29sbGFwc2libGUtbGlzdC1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZUhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vY29sbGFwc2libGUtaGVhZGVyL2NvbGxhcHNpYmxlLWhlYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVCb2R5Q29tcG9uZW50IH0gZnJvbSAnLi9jb2xsYXBzaWJsZS1ib2R5L2NvbGxhcHNpYmxlLWJvZHkuY29tcG9uZW50JztcblxuaW1wb3J0IHsgQ29sbGFwc2libGVUYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vY29sbGFwc2libGUtdGFibGUvY29sbGFwc2libGUtdGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQgfSBmcm9tICcuL2NvbGxhcHNpYmxlLXRhYmxlLXJvdy9jb2xsYXBzaWJsZS10YWJsZS1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IENvbGxhcHNpYmxlVGFibGVSb3dEZXRhaWxDb21wb25lbnQgfSBmcm9tICcuL2NvbGxhcHNpYmxlLXRhYmxlLXJvdy1kZXRhaWwvY29sbGFwc2libGUtdGFibGUtcm93LWRldGFpbC5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBDb2xsYXBzaWJsZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2NvbGxhcHNpYmxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVFdmVudFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2NvbGxhcHNpYmxlLWV2ZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVBbmltYXRpb25zU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvY29sbGFwc2libGUtYW5pbWF0aW9ucy5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBDb2xsYXBzaWJsZUxpc3RDb21wb25lbnQsXG4gICAgQ29sbGFwc2libGVMaXN0SXRlbUNvbXBvbmVudCxcbiAgICBDb2xsYXBzaWJsZUhlYWRlckNvbXBvbmVudCxcbiAgICBDb2xsYXBzaWJsZUJvZHlDb21wb25lbnQsXG4gICAgQ29sbGFwc2libGVUYWJsZUNvbXBvbmVudCxcbiAgICBDb2xsYXBzaWJsZVRhYmxlUm93Q29tcG9uZW50LFxuICAgIENvbGxhcHNpYmxlVGFibGVSb3dEZXRhaWxDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIENvbGxhcHNpYmxlTGlzdENvbXBvbmVudCxcbiAgICBDb2xsYXBzaWJsZUxpc3RJdGVtQ29tcG9uZW50LFxuICAgIENvbGxhcHNpYmxlSGVhZGVyQ29tcG9uZW50LFxuICAgIENvbGxhcHNpYmxlQm9keUNvbXBvbmVudCxcbiAgICBDb2xsYXBzaWJsZVRhYmxlQ29tcG9uZW50LFxuICAgIENvbGxhcHNpYmxlVGFibGVSb3dDb21wb25lbnQsXG4gICAgQ29sbGFwc2libGVUYWJsZVJvd0RldGFpbENvbXBvbmVudFxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICBDb2xsYXBzaWJsZVNlcnZpY2UsXG4gICAgQ29sbGFwc2libGVFdmVudFNlcnZpY2UsXG4gICAgQ29sbGFwc2libGVBbmltYXRpb25zU2VydmljZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBDb2xsYXBzaWJsZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW0NvbGxhcHNpYmxlTW9kdWxlXVxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O3VCQVdpRCxJQUFJLEtBQUssRUFBOEI7c0JBQzFDLElBQUksS0FBSyxFQUE0Qjs7Ozs7SUFFL0UsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztLQUNwQjs7Ozs7SUFFRCxPQUFPLENBQUMsSUFBZ0M7UUFDcEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7S0FDcEI7Ozs7SUFFRCxtQkFBbUI7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztLQUNoQzs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxLQUFnQztRQUNoRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0tBQ2pDOzs7OztJQUVELGFBQWEsQ0FBQyxNQUFrQztRQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM3Qjs7Ozs7SUFFRCxXQUFXLENBQUMsSUFBOEI7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDMUI7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyx3QkFBd0I7O1lBRXpDLHdCQUF3QixDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDMUMsd0JBQXdCLENBQUMsYUFBYSxHQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs7WUFHdEYsd0JBQXdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxL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