/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, HostListener, ElementRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { CollapsibleTableRowDetailComponent } from '../collapsible-table-row-detail/collapsible-table-row-detail.component';
import { CollapsibleService } from '../services/collapsible.service';
var CollapsibleTableRowComponent = /** @class */ (function () {
    function CollapsibleTableRowComponent(el, sanitizer, collapsibleService) {
        this.el = el;
        this.sanitizer = sanitizer;
        this.collapsibleService = collapsibleService;
        this.backgroundTransitionDuration = '0.3s';
        // transition-timing-function: easeInQuad
        this.backgroundTransitionTimingFunction = this.sanitizer
            .bypassSecurityTrustStyle(CollapsibleTableRowComponent.EASE_OUT_QUAD);
        this.isHeadRow = false;
        this.isBodyRow = false;
        this.isOddRow = false;
        this.isEvenRow = false;
        this.isParentStriped = false;
        this.isParentHighlight = false;
        this.parentAllowsSelect = false;
        this.parentAllowsSelectMultipleRows = false;
        this.parentAllowsDeselectingRows = false;
        this.dragSelection = false;
    }
    /**
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elem = this.el.nativeElement;
        /** @type {?} */
        var tbody = elem.parentElement;
        if (tbody.tagName === 'TBODY') {
            /** @type {?} */
            var collapsibleTableRows = tbody.querySelectorAll('collapsible-table-row');
            for (var i = 0; i < collapsibleTableRows.length; i++) {
                /** @type {?} */
                var collapsibleTableRow = collapsibleTableRows[i];
                if (collapsibleTableRow === elem) {
                    this.index = i + 1;
                    break;
                }
            }
        }
        // retrieve parent CollapsibleTableComponent through the CollapsibleService
        this.parentCollapsibleTable = this.collapsibleService.getCollapsibleTable();
        if (this.parentCollapsibleTable != null) {
            // check if collapsible-table is marked to show striped table
            this.isParentStriped = this.parentCollapsibleTable.striped;
            // check if collapsible-table is marked to highlight current row
            this.isParentHighlight = this.parentCollapsibleTable.highlight;
            this.parentHighlightRowBackgroundColor = this.parentCollapsibleTable.highlightColor ||
                CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
            this.parentHighlightRowTextColor = this.parentCollapsibleTable.highlightTextColor ||
                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            // check if collapsible-table specifies the active row color
            this.activeRowBackgroundColor = this.parentCollapsibleTable.activeColor ||
                CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
            this.activeRowTextColor = this.parentCollapsibleTable.activeTextColor ||
                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            // check if collapsible-table allows selecting rows
            this.parentAllowsSelect = this.parentCollapsibleTable.select;
            this.parentAllowsSelectMultipleRows = this.parentCollapsibleTable.selectMultipleRows;
            // check if collapsible-table specifies a color for the selected row
            this.selectedRowBackgroundColor = this.parentCollapsibleTable.selectColor ||
                CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
            this.selectedRowTextColor = this.parentCollapsibleTable.selectTextColor ||
                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            // check if collapsible-table allows to deselect rows
            this.parentAllowsDeselectingRows = this.parentCollapsibleTable.allowDeselectingRows != null ?
                this.parentCollapsibleTable.allowDeselectingRows : false;
        }
    };
    /**
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.updateRow();
    };
    /**
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.updateRow = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elem = this.el.nativeElement;
        /** @type {?} */
        var th = elem.querySelector('th');
        if (th != null) {
            this.isHeadRow = true;
        }
        /** @type {?} */
        var td = elem.querySelector('td');
        if (td != null) {
            this.isBodyRow = true;
            // determine if the row is 'odd' or 'event'
            if (this.index % 2 === 0) {
                this.isEvenRow = true;
                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedEvenColor ||
                    CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedEvenTextColor ||
                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            }
            else {
                this.isOddRow = true;
                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedOddColor ||
                    CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedOddTextColor ||
                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            }
            switch (true) {
                case this.parentAllowsSelect && this.selected:
                    this.rowBackgroundColor = this.selectedRowBackgroundColor;
                    this.rowTextColor = this.selectedRowTextColor;
                    break;
                case this.isParentStriped:
                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                    this.rowTextColor = this.parentStripedRowTextColor;
                    break;
            }
        }
    };
    /**
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.getHeight = /**
     * @return {?}
     */
    function () {
        return this.el.nativeElement.offsetHeight;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.isLeftMouseButton = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var button = event.button;
        /** @type {?} */
        var which = event['which'];
        /** @type {?} */
        var target = /** @type {?} */ ((event.target || event.srcElement || event.currentTarget));
        if (['TR', 'TD'].indexOf(target.tagName) > -1) {
            if ('button' in event) {
                return button === 0;
            }
            else {
                return (which || button) === 1;
            }
        }
        return false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.mousedown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // handle only if the Left mouse button pressed
        // and the row is a body row
        if (this.isLeftMouseButton(event) && this.isBodyRow) {
            if (this.parentCollapsibleTable.noTextSelect) {
                event.preventDefault();
            }
            if (this.isBodyRow) {
                if (this.parentAllowsSelect && !this.parentAllowsDeselectingRows) {
                    this.prevSelectedRows = this.parentCollapsibleTable.selectedRows;
                    this.parentCollapsibleTable.clearSelectedRows();
                    this.parentCollapsibleTable.deselectAllRows();
                }
                this.rowBackgroundColor = this.activeRowBackgroundColor;
                this.rowTextColor = this.activeRowTextColor;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.mouseup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // handle only if the Left mouse button pressed
        // and the row is a body row
        if (this.isLeftMouseButton(event) && this.isBodyRow) {
            // handle selection
            if (this.parentAllowsSelect) {
                if (!this.parentAllowsDeselectingRows) {
                    this.parentCollapsibleTable.selectRow(this.index);
                }
                else {
                    if (!this.dragSelection) {
                        this.parentCollapsibleTable.toggleRowSelection(this.index);
                    }
                }
            }
            // check row state
            this.parentCollapsibleTable.updateTable();
            /*switch (true) {
                            // parent allows selecting rows and the row is selected
                            case this.parentAllowsSelect && this.selected:
                                this.rowBackgroundColor = this.selectedRowBackgroundColor;
                                this.rowTextColor = this.selectedRowTextColor;
                                this.parentCollapsibleTable.updateTable();
                                break;
                            // highlighted
                            case this.isParentHighlight:
                                this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;
                                this.rowTextColor = this.parentHighlightRowTextColor;
                                break;
                            // striped
                            case this.isParentStriped:
                                this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                                this.rowTextColor = this.parentStripedRowTextColor;
                                break;
                            default:
                                this.rowBackgroundColor = undefined;
                                this.rowTextColor = undefined;
                                break;
                        }*/
            // select multiple rows using the 'Shift' key
            if (this.parentAllowsSelect &&
                this.parentAllowsSelectMultipleRows &&
                event != null && event.shiftKey) {
                if (this.prevSelectedRows != null &&
                    this.prevSelectedRows.length > 0 &&
                    this.parentCollapsibleTable.selectedRows.length > 0) {
                    /** @type {?} */
                    var rangeSelectedRows = this.prevSelectedRows.concat(this.parentCollapsibleTable.selectedRows);
                    rangeSelectedRows.sort(function (a, b) { return a - b; });
                    /** @type {?} */
                    var firstRowIndex = Math.min.apply(null, rangeSelectedRows);
                    /** @type {?} */
                    var lastRowIndex = Math.max.apply(null, rangeSelectedRows);
                    this.parentCollapsibleTable.selectRows(firstRowIndex, lastRowIndex);
                }
            }
            // set dragSelection flag to false. Prevents selection drag behavior
            this.dragSelection = false;
            // focus the collapsible table
            this.parentCollapsibleTable.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.mouseenter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // handle only if the row is a body row
        if (this.isBodyRow) {
            switch (true) {
                // the use is trying to select multiple rows by holding a mouse button
                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:
                    this.parentCollapsibleTable.selectRow(this.index);
                    this.dragSelection = true;
                    break;
                // parent allows selecting rows and the row is selected
                case this.parentAllowsSelect && this.selected:
                    break;
                // highlighted
                case this.isParentHighlight:
                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;
                    this.rowTextColor = this.parentHighlightRowTextColor;
                    break;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.mouseleave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // handle only if the row is a body row
        if (this.isBodyRow) {
            // check row state
            switch (true) {
                // the use is trying to select multiple rows by holding a mouse button
                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:
                    this.parentCollapsibleTable.selectRow(this.index);
                    this.dragSelection = false;
                    break;
                // parent allows selecting rows and the row is selected
                case this.parentAllowsSelect && this.selected:
                    break;
                // stripped
                case this.isParentStriped:
                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                    this.rowTextColor = this.parentStripedRowTextColor;
                    break;
                default:
                    this.rowBackgroundColor = undefined;
                    this.rowTextColor = undefined;
                    break;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.detail != null) {
            /** @type {?} */
            var target = /** @type {?} */ ((event.target || event.srcElement || event.currentTarget));
            if (target != null && ['TR', 'TD'].indexOf(target.tagName) > -1) {
                this.detail.subject.next();
            }
        }
    };
    CollapsibleTableRowComponent.EASE_OUT_QUAD = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
    CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR = 'rgba(242,242,242,0.8)';
    CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR = 'transparent';
    CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR = 'rgba(222,222,222, 0.8)';
    CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR = 'rgba(212,212,212, 0.8)';
    CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR = 'rgba(212,212,212, 0.8)';
    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR = 'black';
    CollapsibleTableRowComponent.decorators = [
        { type: Component, args: [{
                    selector: 'collapsible-table-row',
                    template: "<ng-content></ng-content>",
                    styles: ["\n        :host {\n            display: table-row;\n            transition-property: background-color, color;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    CollapsibleTableRowComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer },
        { type: CollapsibleService }
    ]; };
    CollapsibleTableRowComponent.propDecorators = {
        detail: [{ type: Input }],
        rowTextColor: [{ type: HostBinding, args: ['style.color',] }],
        rowBackgroundColor: [{ type: HostBinding, args: ['style.background-color',] }],
        backgroundTransitionDuration: [{ type: HostBinding, args: ['style.transition-duration',] }],
        backgroundTransitionTimingFunction: [{ type: HostBinding, args: ['style.transition-timing-function',] }],
        selected: [{ type: HostBinding, args: ['class.selected',] }],
        mousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        mouseup: [{ type: HostListener, args: ['mouseup', ['$event'],] }],
        mouseenter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
        mouseleave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }],
        click: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return CollapsibleTableRowComponent;
}());
export { CollapsibleTableRowComponent };
if (false) {
    /** @type {?} */
    CollapsibleTableRowComponent.EASE_OUT_QUAD;
    /** @type {?} */
    CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
    /** @type {?} */
    CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
    /** @type {?} */
    CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
    /** @type {?} */
    CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
    /** @type {?} */
    CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
    /** @type {?} */
    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.detail;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.rowTextColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.rowBackgroundColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.backgroundTransitionDuration;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.backgroundTransitionTimingFunction;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.selected;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.isHeadRow;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.isBodyRow;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.isOddRow;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.isEvenRow;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.isParentStriped;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.isParentHighlight;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.parentAllowsSelect;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.parentAllowsSelectMultipleRows;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.parentStripedRowBackgroundColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.parentStripedRowTextColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.parentHighlightRowBackgroundColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.parentHighlightRowTextColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.activeRowBackgroundColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.activeRowTextColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.selectedRowBackgroundColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.selectedRowTextColor;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.parentAllowsDeselectingRows;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.index;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.parentCollapsibleTable;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.prevSelectedRows;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.dragSelection;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.el;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.sanitizer;
    /** @type {?} */
    CollapsibleTableRowComponent.prototype.collapsibleService;
}

//# sourceMappingURL=data:application/json;base64,