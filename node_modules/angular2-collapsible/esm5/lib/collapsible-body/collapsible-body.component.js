/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ElementRef, HostBinding, Output, EventEmitter } from '@angular/core';
import { CollapsibleService } from '../services/collapsible.service';
import { CollapsibleEventService } from '../services/collapsible-event.service';
import { CollapsibleAnimationsService } from '../services/collapsible-animations.service';
var CollapsibleBodyComponent = /** @class */ (function () {
    function CollapsibleBodyComponent(el, collapsibleService, eventService) {
        this.el = el;
        this.collapsibleService = collapsibleService;
        this.eventService = eventService;
        this.toggleState = new EventEmitter();
    }
    /**
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventService.toggleCollapsibleItem$.subscribe(function () {
            _this.toggleCollapsibleItem();
        });
    };
    /**
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.hasContent = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.el.nativeElement.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                if ((/** @type {?} */ (child)).tagName != null) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    /**
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.toggleCollapsibleItem = /**
     * @return {?}
     */
    function () {
        // toggle body's state only if it has any childs
        if (this.hasContent()) {
            if (this.collapsibleService.getType() === 'accordion') {
                /** @type {?} */
                var tempExpanded = this.expanded;
                this.collapsibleService.collapseAll();
                this.expanded = tempExpanded;
            }
            this.expanded = !this.expanded;
            this.expandedState = this.expanded.toString();
            // emit 'toggleState' event
            this.toggleState.emit(this.expanded);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var e_2, _a;
        if (this.hasContent()) {
            try {
                for (var _b = tslib_1.__values(Object.keys(changes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    if (key === 'expanded' &&
                        changes["expanded"].currentValue != null) {
                        // this.expanded = changes.expanded.currentValue;
                        this.expandedState = this.expanded.toString();
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    // Makes sure we don't have a memory leak by destroying the
    // Subscription when our component is destroyed
    /**
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.eventService.unsubscribe();
    };
    CollapsibleBodyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'collapsible-body',
                    template: "<ng-content></ng-content>",
                    animations: CollapsibleAnimationsService.collapsibleBodyAnimations('collapsibleBodyState'),
                    styles: ["\n        :host {\n            display: block;\n            border-bottom: 1px solid #ddd;\n            box-sizing: border-box;\n            padding: 2rem;\n        }\n\n        .side-nav :host {\n            padding: 0;\n        }\n\n        .side-nav :host,\n        .side-nav.fixed :host {\n            border: 0;\n            background-color: #fff;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    CollapsibleBodyComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: CollapsibleService },
        { type: CollapsibleEventService }
    ]; };
    CollapsibleBodyComponent.propDecorators = {
        expandedState: [{ type: HostBinding, args: ['@collapsibleBodyState',] }],
        expanded: [{ type: Input }],
        toggleState: [{ type: Output }]
    };
    return CollapsibleBodyComponent;
}());
export { CollapsibleBodyComponent };
if (false) {
    /** @type {?} */
    CollapsibleBodyComponent.prototype.expandedState;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.expanded;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.toggleState;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.el;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.collapsibleService;
    /** @type {?} */
    CollapsibleBodyComponent.prototype.eventService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2libGUtYm9keS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi1jb2xsYXBzaWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jb2xsYXBzaWJsZS1ib2R5L2NvbGxhcHNpYmxlLWJvZHkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFFVCxLQUFLLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFDOUIsTUFBTSxFQUFFLFlBQVksRUFDdkIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDaEYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sNENBQTRDLENBQUM7O0lBaUN0RixrQ0FDWSxJQUNBLG9CQUNBO1FBRkEsT0FBRSxHQUFGLEVBQUU7UUFDRix1QkFBa0IsR0FBbEIsa0JBQWtCO1FBQ2xCLGlCQUFZLEdBQVosWUFBWTsyQkFMQSxJQUFJLFlBQVksRUFBVztLQUtHOzs7O0lBRXRELDJDQUFROzs7SUFBUjtRQUFBLGlCQUlDO1FBSEcsSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUM7WUFDL0MsS0FBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7U0FDaEMsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCw2Q0FBVTs7O0lBQVY7OztZQUNJLEtBQW9CLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQWpELElBQU0sS0FBSyxXQUFBO2dCQUNaLElBQUksbUJBQVUsS0FBSyxFQUFDLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtvQkFDbEMsT0FBTyxJQUFJLENBQUM7aUJBQ2Y7YUFDSjs7Ozs7Ozs7O1FBQ0QsT0FBTyxLQUFLLENBQUM7S0FDaEI7Ozs7SUFFRCx3REFBcUI7OztJQUFyQjs7UUFFSSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNuQixJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsS0FBSyxXQUFXLEVBQUU7O2dCQUNuRCxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUNuQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDO2FBQ2hDO1lBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDOztZQUc5QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDeEM7S0FDSjs7Ozs7SUFFRCw4Q0FBVzs7OztJQUFYLFVBQVksT0FBc0I7O1FBQzlCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFOztnQkFDbkIsS0FBa0IsSUFBQSxLQUFBLGlCQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7b0JBQW5DLElBQU0sR0FBRyxXQUFBO29CQUNWLElBQUksR0FBRyxLQUFLLFVBQVU7d0JBQ2xCLE9BQU8sYUFBVSxZQUFZLElBQUksSUFBSSxFQUFFOzt3QkFFdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO3FCQUNqRDtpQkFDSjs7Ozs7Ozs7O1NBQ0o7S0FDSjtJQUVELDJEQUEyRDtJQUMzRCwrQ0FBK0M7Ozs7SUFDL0MsOENBQVc7OztJQUFYO1FBQ0ksSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUNuQzs7Z0JBbkZKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixRQUFRLEVBQUUsMkJBQTJCO29CQW1CckMsVUFBVSxFQUFFLDRCQUE0QixDQUFDLHlCQUF5QixDQUFDLHNCQUFzQixDQUFDOzZCQWxCakYsb1hBaUJSO2lCQUVKOzs7O2dCQTlCVSxVQUFVO2dCQUlaLGtCQUFrQjtnQkFDbEIsdUJBQXVCOzs7Z0NBMkIzQixXQUFXLFNBQUMsdUJBQXVCOzJCQUduQyxLQUFLOzhCQUVMLE1BQU07O21DQXhDWDs7U0FrQ2Esd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyxcbiAgICBJbnB1dCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsXG4gICAgT3V0cHV0LCBFdmVudEVtaXR0ZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbGxhcHNpYmxlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbGxhcHNpYmxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sbGFwc2libGVFdmVudFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb2xsYXBzaWJsZS1ldmVudC5zZXJ2aWNlJztcbmltcG9ydCB7IENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb2xsYXBzaWJsZS1hbmltYXRpb25zLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2NvbGxhcHNpYmxlLWJvZHknLFxuICAgIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gICAgc3R5bGVzOiBbYFxuICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDJyZW07XG4gICAgICAgIH1cblxuICAgICAgICAuc2lkZS1uYXYgOmhvc3Qge1xuICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5zaWRlLW5hdiA6aG9zdCxcbiAgICAgICAgLnNpZGUtbmF2LmZpeGVkIDpob3N0IHtcbiAgICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICAgIH1cbiAgICBgXSxcbiAgICBhbmltYXRpb25zOiBDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmNvbGxhcHNpYmxlQm9keUFuaW1hdGlvbnMoJ2NvbGxhcHNpYmxlQm9keVN0YXRlJylcbn0pXG5leHBvcnQgY2xhc3MgQ29sbGFwc2libGVCb2R5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgQEhvc3RCaW5kaW5nKCdAY29sbGFwc2libGVCb2R5U3RhdGUnKVxuICAgIGV4cGFuZGVkU3RhdGU6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGV4cGFuZGVkOiBib29sZWFuO1xuXG4gICAgQE91dHB1dCgpIHRvZ2dsZVN0YXRlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgY29sbGFwc2libGVTZXJ2aWNlOiBDb2xsYXBzaWJsZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZXZlbnRTZXJ2aWNlOiBDb2xsYXBzaWJsZUV2ZW50U2VydmljZSkgeyB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UudG9nZ2xlQ29sbGFwc2libGVJdGVtJC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVDb2xsYXBzaWJsZUl0ZW0oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGFzQ29udGVudCgpOiBib29sZWFuIHtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgaWYgKCg8RWxlbWVudD5jaGlsZCkudGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRvZ2dsZUNvbGxhcHNpYmxlSXRlbSgpIHtcbiAgICAgICAgLy8gdG9nZ2xlIGJvZHkncyBzdGF0ZSBvbmx5IGlmIGl0IGhhcyBhbnkgY2hpbGRzXG4gICAgICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29sbGFwc2libGVTZXJ2aWNlLmdldFR5cGUoKSA9PT0gJ2FjY29yZGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wRXhwYW5kZWQgPSB0aGlzLmV4cGFuZGVkO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2libGVTZXJ2aWNlLmNvbGxhcHNlQWxsKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5leHBhbmRlZCA9IHRlbXBFeHBhbmRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXhwYW5kZWQgPSAhdGhpcy5leHBhbmRlZDtcbiAgICAgICAgICAgIHRoaXMuZXhwYW5kZWRTdGF0ZSA9IHRoaXMuZXhwYW5kZWQudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgLy8gZW1pdCAndG9nZ2xlU3RhdGUnIGV2ZW50XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVN0YXRlLmVtaXQodGhpcy5leHBhbmRlZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY2hhbmdlcykpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnZXhwYW5kZWQnICYmXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXMuZXhwYW5kZWQuY3VycmVudFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5leHBhbmRlZCA9IGNoYW5nZXMuZXhwYW5kZWQuY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZGVkU3RhdGUgPSB0aGlzLmV4cGFuZGVkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWFrZXMgc3VyZSB3ZSBkb24ndCBoYXZlIGEgbWVtb3J5IGxlYWsgYnkgZGVzdHJveWluZyB0aGVcbiAgICAvLyBTdWJzY3JpcHRpb24gd2hlbiBvdXIgY29tcG9uZW50IGlzIGRlc3Ryb3llZFxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmV2ZW50U2VydmljZS51bnN1YnNjcmliZSgpO1xuICAgIH1cblxufVxuIl19