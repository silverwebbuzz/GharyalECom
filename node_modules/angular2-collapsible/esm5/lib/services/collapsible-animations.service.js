/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
var CollapsibleAnimationsService = /** @class */ (function () {
    function CollapsibleAnimationsService() {
    }
    /**
     * @param {?} triggerName
     * @return {?}
     */
    CollapsibleAnimationsService.collapsibleBodyAnimations = /**
     * @param {?} triggerName
     * @return {?}
     */
    function (triggerName) {
        return [
            trigger(triggerName, [
                state('*', style({
                    height: 0,
                    paddingTop: 0,
                    paddingBottom: 0,
                    borderBottom: 'none',
                    boxShadow: 'none',
                    overflow: 'hidden'
                })),
                state('true', style({
                    boxShadow: 'inset 0 4px 4px -2px rgb(208, 208, 208), inset 0 -3px 2px -1px rgb(208, 208, 208)',
                    overflow: 'inherit'
                })),
                transition('* => true', animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeInQuad)),
                transition('* => false', animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeOutQuad))
            ])
        ];
    };
    CollapsibleAnimationsService.collapsibleBodyAnimationDuration = '0.2s';
    CollapsibleAnimationsService.easeInQuad = 'cubic-bezier(0.55, 0.085, 0.68, 0.53)';
    CollapsibleAnimationsService.easeOutQuad = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
    CollapsibleAnimationsService.collapsibleTableRowAnimationDuration = '0.2s';
    CollapsibleAnimationsService.decorators = [
        { type: Injectable }
    ];
    return CollapsibleAnimationsService;
}());
export { CollapsibleAnimationsService };
if (false) {
    /** @type {?} */
    CollapsibleAnimationsService.collapsibleBodyAnimationDuration;
    /** @type {?} */
    CollapsibleAnimationsService.easeInQuad;
    /** @type {?} */
    CollapsibleAnimationsService.easeOutQuad;
    /** @type {?} */
    CollapsibleAnimationsService.collapsibleTableRowAnimationDuration;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2libGUtYW5pbWF0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItY29sbGFwc2libGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY29sbGFwc2libGUtYW5pbWF0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBNEIsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7Ozs7OztJQVdoRyxzREFBeUI7Ozs7SUFBaEMsVUFBaUMsV0FBbUI7UUFDaEQsT0FBTztZQUNILE9BQU8sQ0FBQyxXQUFXLEVBQUU7Z0JBQ2pCLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO29CQUNiLE1BQU0sRUFBRSxDQUFDO29CQUNULFVBQVUsRUFBRSxDQUFDO29CQUNiLGFBQWEsRUFBRSxDQUFDO29CQUNoQixZQUFZLEVBQUUsTUFBTTtvQkFDcEIsU0FBUyxFQUFFLE1BQU07b0JBQ2pCLFFBQVEsRUFBRSxRQUFRO2lCQUNyQixDQUFDLENBQUM7Z0JBQ0gsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7b0JBQ2hCLFNBQVMsRUFBRSxtRkFBbUY7b0JBQzlGLFFBQVEsRUFBRSxTQUFTO2lCQUN0QixDQUFDLENBQUM7Z0JBQ0gsVUFBVSxDQUFDLFdBQVcsRUFDbEIsT0FBTyxDQUFDLDRCQUE0QixDQUFDLGdDQUFnQyxHQUFHLEdBQUc7b0JBQ3ZFLDRCQUE0QixDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNqRCxVQUFVLENBQUMsWUFBWSxFQUNuQixPQUFPLENBQUMsNEJBQTRCLENBQUMsZ0NBQWdDLEdBQUcsR0FBRztvQkFDdkUsNEJBQTRCLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDckQsQ0FBQztTQUNMLENBQUM7S0FDTDtvRUE3QnlDLE1BQU07OENBQzVCLHVDQUF1QzsrQ0FDdEMsc0NBQXNDO3dFQUViLE1BQU07O2dCQVB2RCxVQUFVOzt1Q0FKWDs7U0FLYSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSwgdHJpZ2dlciwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCBhbmltYXRlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlIHtcblxuICAgIHN0YXRpYyBjb2xsYXBzaWJsZUJvZHlBbmltYXRpb25EdXJhdGlvbiA9ICcwLjJzJztcbiAgICBzdGF0aWMgZWFzZUluUXVhZCA9ICdjdWJpYy1iZXppZXIoMC41NSwgMC4wODUsIDAuNjgsIDAuNTMpJztcbiAgICBzdGF0aWMgZWFzZU91dFF1YWQgPSAnY3ViaWMtYmV6aWVyKDAuMjUsIDAuNDYsIDAuNDUsIDAuOTQpJztcblxuICAgIHN0YXRpYyBjb2xsYXBzaWJsZVRhYmxlUm93QW5pbWF0aW9uRHVyYXRpb24gPSAnMC4ycyc7XG5cbiAgICBzdGF0aWMgY29sbGFwc2libGVCb2R5QW5pbWF0aW9ucyh0cmlnZ2VyTmFtZTogc3RyaW5nKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdHJpZ2dlcih0cmlnZ2VyTmFtZSwgW1xuICAgICAgICAgICAgICAgIHN0YXRlKCcqJywgc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDAsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgIHN0YXRlKCd0cnVlJywgc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDRweCA0cHggLTJweCByZ2IoMjA4LCAyMDgsIDIwOCksIGluc2V0IDAgLTNweCAycHggLTFweCByZ2IoMjA4LCAyMDgsIDIwOCknLFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2luaGVyaXQnXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24oJyogPT4gdHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGUoQ29sbGFwc2libGVBbmltYXRpb25zU2VydmljZS5jb2xsYXBzaWJsZUJvZHlBbmltYXRpb25EdXJhdGlvbiArICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmVhc2VJblF1YWQpKSxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uKCcqID0+IGZhbHNlJyxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZShDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmNvbGxhcHNpYmxlQm9keUFuaW1hdGlvbkR1cmF0aW9uICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuZWFzZU91dFF1YWQpKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICAvKlxuICAgIHN0YXRpYyBjb2xsYXBzaWJsZVRhYmxlUm93QW5pbWF0aW9ucyh0cmlnZ2VyTmFtZTogc3RyaW5nKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdHJpZ2dlcih0cmlnZ2VyTmFtZSwgW1xuICAgICAgICAgICAgICAgIHN0YXRlKCdhY3RpdmUnLCBzdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTUpJ1xuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICBzdGF0ZSgnaW5hY3RpdmUnLCBzdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbignKiA9PiBhY3RpdmUnLFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlKENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuY29sbGFwc2libGVUYWJsZVJvd0FuaW1hdGlvbkR1cmF0aW9uICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbGxhcHNpYmxlQW5pbWF0aW9uc1NlcnZpY2UuZWFzZU91dFF1YWQpKSxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uKCcqID0+IGluYWN0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZShDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmNvbGxhcHNpYmxlVGFibGVSb3dBbmltYXRpb25EdXJhdGlvbiArICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBDb2xsYXBzaWJsZUFuaW1hdGlvbnNTZXJ2aWNlLmVhc2VPdXRRdWFkKSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF07XG4gICAgfVxuICAgICovXG59XG4iXX0=