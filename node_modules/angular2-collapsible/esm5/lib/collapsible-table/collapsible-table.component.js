/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, HostListener, ElementRef, ContentChildren } from '@angular/core';
import { CollapsibleTableRowComponent } from '../collapsible-table-row/collapsible-table-row.component';
import { CollapsibleService } from '../services/collapsible.service';
var CollapsibleTableComponent = /** @class */ (function () {
    function CollapsibleTableComponent(el, collapsibleService) {
        this.el = el;
        this.collapsibleService = collapsibleService;
        // allows navigation between table rows using arrow keys
        this.allowKeyboardNavigation = true;
        this.fixedTableHeight = 'auto';
        this.tabindex = 0;
        this.selectedRows = [];
        // specifies collapsible type. Can be either 'accordion' or 'expandable'
        this.type = 'accordion';
        this.mouseDownHold = false;
    }
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        // this.updateFixedTableHeight();
        /*
                LOG(`CollapsibleTableComponent::ngOnInit()\n` +
                    `this = {\n` +
                    `bordered = ${this.bordered}\n` +
                    `borderedHorizontally = ${this.borderedHorizontally}\n` +
                    `borderedVertically = ${this.borderedVertically}\n` +
                    `striped = ${this.striped}\n` +
                    `stripedOddColor = ${this.stripedOddColor}\n` +
                    `stripedEvenColor = ${this.stripedEvenColor}\n` +
                    `highlight = ${this.highlight}\n` +
                    `highlightColor = ${this.highlightColor}\n` +
                    `highlightTextColor = ${this.highlightTextColor}\n` +
                    `activeColor = ${this.activeColor}\n` +
                    `activeTextColor = ${this.activeTextColor}\n` +
                    `centered = ${this.centered}\n` +
                    `responsive = ${this.responsive}\n` +
                    `select = ${this.select}\n` +
                    `selectColor = ${this.selectColor}\n` +
                    `selectTextColor = ${this.selectTextColor}\n` +
                    `selectMultipleRows = ${this.selectMultipleRows}\n` +
                    `noTextSelect = ${this.noTextSelect}\n` +
                    `}`);
                    */
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CollapsibleTableComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        for (var change in changes) {
            if (changes.hasOwnProperty(change)) {
                if (this.collapsibleTableRows != null) {
                    switch (change) {
                        case 'striped':
                        case 'stripedOddColor':
                        case 'stripedOddTextColor':
                        case 'stripedEvenColor':
                        case 'stripedEvenTextColor':
                            this.updateTable('striped');
                            break;
                        case 'highlight':
                        case 'highlightColor':
                        case 'highlightTextColor':
                            this.updateTable('highlight');
                            break;
                        case 'activeColor':
                        case 'activeTextColor':
                            this.updateTable('active');
                            break;
                        case 'select':
                        case 'selectColor':
                        case 'selectTextColor':
                        case 'selectMultipleRows':
                        case 'allowDeselectingRows':
                            this.updateTable('select');
                            break;
                    }
                }
                // update collapsible table type in CollapsibleService
                if (change === 'type') {
                    this.type = changes["type"].currentValue;
                    this.collapsibleService.setType(this.type);
                }
            }
        }
        this.collapsibleService.setCollapsibleTable(this);
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.el.nativeElement.focus();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CollapsibleTableComponent.prototype.addSelectedRow = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        switch (true) {
            case this.selectMultipleRows && this.selectedRows.indexOf(index) === -1:
                this.selectedRows.push(index);
                this.selectedRows.sort(function (a, b) { return a - b; });
                break;
            case !this.selectMultipleRows:
                this.selectedRows = [];
                this.deselectAllRows();
                this.selectedRows.push(index);
                this.selectedRows.sort(function (a, b) { return a - b; });
                break;
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CollapsibleTableComponent.prototype.removeSelectedRow = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.selectedRows.indexOf(index) !== -1) {
            this.selectedRows.splice(this.selectedRows.indexOf(index), 1);
        }
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.clearSelectedRows = /**
     * @return {?}
     */
    function () {
        this.selectedRows = [];
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.deselectAllRows = /**
     * @return {?}
     */
    function () {
        this.collapsibleTableRows.forEach(function (row) {
            row.selected = false;
            row.updateRow();
        });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CollapsibleTableComponent.prototype.selectRow = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        if (this.select) {
            switch (true) {
                case index === 0:
                    this.selectRow(1);
                    break;
                case index === this.collapsibleTableRows.length:
                    this.selectRow(this.collapsibleTableRows.length - 1);
                    break;
                case 0 < index && index <= this.collapsibleTableRows.length - 1:
                    this.addSelectedRow(index);
                    this.collapsibleTableRows.forEach(function (row, i) {
                        if (index !== i) {
                            if (!_this.selectMultipleRows) {
                                row.selected = false;
                            }
                        }
                        else {
                            row.selected = true;
                        }
                        row.updateRow();
                    });
                    break;
            }
        }
    };
    /**
     * @param {?} firstRowIndex
     * @param {?} lastRowIndex
     * @return {?}
     */
    CollapsibleTableComponent.prototype.selectRows = /**
     * @param {?} firstRowIndex
     * @param {?} lastRowIndex
     * @return {?}
     */
    function (firstRowIndex, lastRowIndex) {
        var _this = this;
        if (this.selectMultipleRows &&
            0 < firstRowIndex && firstRowIndex < lastRowIndex &&
            lastRowIndex <= this.collapsibleTableRows.length - 1) {
            this.clearSelectedRows();
            this.collapsibleTableRows.forEach(function (row, i) {
                if (firstRowIndex <= i && i <= lastRowIndex) {
                    _this.addSelectedRow(i);
                    row.selected = true;
                }
                else {
                    row.selected = false;
                }
                row.updateRow();
            });
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CollapsibleTableComponent.prototype.toggleRowSelection = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        if (this.select &&
            0 < index && index <= this.collapsibleTableRows.length - 1) {
            this.collapsibleTableRows.forEach(function (row, i) {
                if (index === i) {
                    if (row.selected) {
                        _this.removeSelectedRow(index);
                    }
                    else {
                        _this.addSelectedRow(index);
                    }
                    row.selected = !row.selected;
                    row.updateRow();
                }
            });
        }
    };
    /*updateFixedTableHeight() {
        this.fixedTableHeight = this.el.nativeElement.offsetHeight + 'px';
        let elem: Element = this.el.nativeElement;
        let rowHeights = 0;
        if (this.collapsibleTableRowComponent != null) {
            this.collapsibleTableRowComponent.forEach(row => {
            });
        }
    }*/
    /**
     * @param {?} row
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateStriped = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (this.striped && row.isBodyRow) {
            row.isParentStriped = true;
            if (row.isOddRow) {
                row.parentStripedRowBackgroundColor = this.stripedOddColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
                row.parentStripedRowTextColor = this.stripedOddTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                row.rowTextColor = row.parentStripedRowTextColor;
            }
            else {
                row.parentStripedRowBackgroundColor = this.stripedEvenColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
                row.parentStripedRowTextColor = this.stripedEvenTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                row.rowTextColor = row.parentStripedRowTextColor;
            }
        }
        else {
            row.isParentStriped = false;
            row.rowBackgroundColor = undefined;
            row.rowTextColor = undefined;
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateHighlight = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.isParentHighlight = this.highlight;
        row.parentHighlightRowBackgroundColor = this.highlightColor || CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
        row.parentHighlightRowTextColor = this.highlightTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateActive = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.activeRowBackgroundColor = this.activeColor || CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
        row.activeRowTextColor = this.activeTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateSelect = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.parentAllowsSelect = this.select;
        row.parentAllowsSelectMultipleRows = this.selectMultipleRows;
        row.parentAllowsDeselectingRows = this.allowDeselectingRows;
        if (row.selected) {
            row.selectedRowBackgroundColor = this.selectColor || CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
            row.selectedRowTextColor = this.selectTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            row.rowBackgroundColor = row.selectedRowBackgroundColor;
            row.rowTextColor = row.selectedRowTextColor;
        }
    };
    /**
     * @param {?=} change
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateTable = /**
     * @param {?=} change
     * @return {?}
     */
    function (change) {
        var _this = this;
        if (this.collapsibleTableRows != null) {
            if (change != null) {
                switch (change) {
                    case 'striped':
                        // propagate changes to each of the CollapsibleTableRowComponent children
                        this.collapsibleTableRows.forEach(function (row) { _this.updateStriped(row); });
                        break;
                    case 'highlight':
                        this.collapsibleTableRows.forEach(function (row) { _this.updateHighlight(row); });
                        break;
                    case 'active':
                        this.collapsibleTableRows.forEach(function (row) { _this.updateActive(row); });
                        break;
                    case 'select':
                        this.collapsibleTableRows.forEach(function (row) { _this.updateSelect(row); });
                        break;
                }
            }
            else {
                // propagate changes to each of the CollapsibleTableRowComponent children
                this.collapsibleTableRows.forEach(function (row) {
                    _this.updateStriped(row);
                    _this.updateHighlight(row);
                    _this.updateSelect(row);
                    _this.updateActive(row);
                });
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableComponent.prototype.keydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // select a row only if 'select' property is set to 'true'
        if (this.select && this.allowKeyboardNavigation) {
            /** @enum {number} */
            var Key = {
                arrowUp: 38,
                arrowDown: 40,
                home: 36,
                end: 35,
            };
            Key[Key.arrowUp] = 'arrowUp';
            Key[Key.arrowDown] = 'arrowDown';
            Key[Key.home] = 'home';
            Key[Key.end] = 'end';
            /** @type {?} */
            var index = 1;
            /** @type {?} */
            var whichKey = event['which'];
            if (Key[whichKey] != null) {
                event.preventDefault();
                event.stopPropagation();
                switch (whichKey) {
                    case Key.arrowUp:
                        // select previous row
                        if (this.selectedRows.length > 0) {
                            index = this.selectedRows[this.selectedRows.length - 1];
                            index--;
                        }
                        break;
                    case Key.arrowDown:
                        // select next row
                        if (this.selectedRows.length > 0) {
                            index = this.selectedRows[this.selectedRows.length - 1];
                            index++;
                        }
                        break;
                    case Key.home:
                        index = 1;
                        break;
                    case Key.end:
                        index = this.collapsibleTableRows.length - 1;
                        break;
                }
                this.clearSelectedRows();
                this.deselectAllRows();
                this.selectRow(index);
                this.updateTable();
            }
        }
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.mousedown = /**
     * @return {?}
     */
    function () {
        this.mouseDownHold = true;
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.mouseup = /**
     * @return {?}
     */
    function () {
        this.mouseDownHold = false;
    };
    CollapsibleTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'collapsible-table',
                    template: "<ng-content></ng-content>",
                    providers: [
                        CollapsibleService
                    ],
                    styles: ["\n        :host {\n            display: table;\n            position: relative;\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        :host thead {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host /deep/ tbody /deep/ collapsible-table-row {\n            cursor: pointer;\n        }\n\n        :host /deep/ collapsible-table-row th,\n        :host /deep/ collapsible-table-row td {\n            border-radius: 0;\n        }\n\n        :host[bordered='true'] {\n            border-top: 1px solid #d0d0d0;\n            border-right: 1px solid #d0d0d0;\n            border-left: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row,\n        :host[borderedHorizontally='true'] /deep/ collapsible-table-row {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row th,\n        :host[bordered='true'] /deep/ collapsible-table-row td,\n        :host[borderedVertically='true'] /deep/ collapsible-table-row th:not(:last-child),\n        :host[borderedVertically='true'] /deep/ collapsible-table-row td:not(:last-child) {\n            border-right: 1px solid #d0d0d0;\n        }\n\n        :host(.centered) /deep/ * {\n            text-align: center;\n        }\n\n        :host(.noTextSelect) /deep/ collapsible-table-row th,\n        :host(.noTextSelect) /deep/ collapsible-table-row td {\n            user-select: none;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    CollapsibleTableComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: CollapsibleService }
    ]; };
    CollapsibleTableComponent.propDecorators = {
        bordered: [{ type: Input }, { type: HostBinding, args: ['attr.bordered',] }],
        borderedHorizontally: [{ type: Input }, { type: HostBinding, args: ['attr.borderedHorizontally',] }],
        borderedVertically: [{ type: Input }, { type: HostBinding, args: ['attr.borderedVertically',] }],
        striped: [{ type: Input }, { type: HostBinding, args: ['attr.striped',] }],
        stripedOddColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedOddColor',] }],
        stripedOddTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedOddTextColor',] }],
        stripedEvenColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedEvenColor',] }],
        stripedEvenTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.stripedEvenTextColor',] }],
        highlight: [{ type: Input }, { type: HostBinding, args: ['attr.highlight',] }],
        highlightColor: [{ type: Input }, { type: HostBinding, args: ['attr.highlightColor',] }],
        highlightTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.highlightTextColor',] }],
        activeColor: [{ type: Input }, { type: HostBinding, args: ['attr.activeColor',] }],
        activeTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.activeTextColor',] }],
        centered: [{ type: Input }, { type: HostBinding, args: ['class.centered',] }, { type: HostBinding, args: ['attr.centered',] }],
        responsive: [{ type: Input }, { type: HostBinding, args: ['attr.responsive',] }],
        select: [{ type: Input }, { type: HostBinding, args: ['attr.select',] }],
        selectMultipleRows: [{ type: Input }, { type: HostBinding, args: ['attr.selectMultipleRows',] }],
        selectColor: [{ type: Input }, { type: HostBinding, args: ['attr.selectColor',] }],
        selectTextColor: [{ type: Input }, { type: HostBinding, args: ['attr.selectTextColor',] }],
        allowDeselectingRows: [{ type: Input }, { type: HostBinding, args: ['attr.allowDeselectingRows',] }],
        allowKeyboardNavigation: [{ type: Input }, { type: HostBinding, args: ['attr.allowKeyboardNavigation',] }],
        noTextSelect: [{ type: Input }, { type: HostBinding, args: ['class.noTextSelect',] }, { type: HostBinding, args: ['attr.noTextSelect',] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        type: [{ type: Input }, { type: HostBinding, args: ['attr.type',] }],
        collapsibleTableRows: [{ type: ContentChildren, args: [CollapsibleTableRowComponent,] }],
        keydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        mousedown: [{ type: HostListener, args: ['mousedown',] }],
        mouseup: [{ type: HostListener, args: ['mouseup',] }]
    };
    return CollapsibleTableComponent;
}());
export { CollapsibleTableComponent };
if (false) {
    /** @type {?} */
    CollapsibleTableComponent.prototype.bordered;
    /** @type {?} */
    CollapsibleTableComponent.prototype.borderedHorizontally;
    /** @type {?} */
    CollapsibleTableComponent.prototype.borderedVertically;
    /** @type {?} */
    CollapsibleTableComponent.prototype.striped;
    /** @type {?} */
    CollapsibleTableComponent.prototype.stripedOddColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.stripedOddTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.stripedEvenColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.stripedEvenTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.highlight;
    /** @type {?} */
    CollapsibleTableComponent.prototype.highlightColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.highlightTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.activeColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.activeTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.centered;
    /** @type {?} */
    CollapsibleTableComponent.prototype.responsive;
    /** @type {?} */
    CollapsibleTableComponent.prototype.select;
    /** @type {?} */
    CollapsibleTableComponent.prototype.selectMultipleRows;
    /** @type {?} */
    CollapsibleTableComponent.prototype.selectColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.selectTextColor;
    /** @type {?} */
    CollapsibleTableComponent.prototype.allowDeselectingRows;
    /** @type {?} */
    CollapsibleTableComponent.prototype.allowKeyboardNavigation;
    /** @type {?} */
    CollapsibleTableComponent.prototype.noTextSelect;
    /** @type {?} */
    CollapsibleTableComponent.prototype.fixedTableHeight;
    /** @type {?} */
    CollapsibleTableComponent.prototype.tabindex;
    /** @type {?} */
    CollapsibleTableComponent.prototype.selectedRows;
    /** @type {?} */
    CollapsibleTableComponent.prototype.type;
    /** @type {?} */
    CollapsibleTableComponent.prototype.collapsibleTableRows;
    /** @type {?} */
    CollapsibleTableComponent.prototype.mouseDownHold;
    /** @type {?} */
    CollapsibleTableComponent.prototype.el;
    /** @type {?} */
    CollapsibleTableComponent.prototype.collapsibleService;
}

//# sourceMappingURL=data:application/json;base64,