{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://angular2-collapsible/lib/services/collapsible.service.ts","ng://angular2-collapsible/lib/services/collapsible-event.service.ts","ng://angular2-collapsible/lib/services/collapsible-animations.service.ts","ng://angular2-collapsible/lib/collapsible-body/collapsible-body.component.ts","ng://angular2-collapsible/lib/collapsible-list-item/collapsible-list-item.component.ts","ng://angular2-collapsible/lib/collapsible-list/collapsible-list.component.ts","ng://angular2-collapsible/lib/collapsible-header/collapsible-header.component.ts","ng://angular2-collapsible/lib/collapsible-table-row/collapsible-table-row.component.ts","ng://angular2-collapsible/lib/collapsible-table/collapsible-table.component.ts","ng://angular2-collapsible/lib/collapsible-table-row-detail/collapsible-table-row-detail.component.ts","ng://angular2-collapsible/lib/collapsible.module.ts"],"names":["__values","o","m","Symbol","iterator","i","call","next","length","value","done","CollapsibleService","Array","prototype","getType","this","type","setType","getCollapsibleTable","collapsibleTable","setCollapsibleTable","table","addListHeader","header","headers","push","addListBody","body","bodies","collapseAll","forEach","collapsibleBodyComponent","expanded","expandedState","toString","toggleState","emit","Injectable","CollapsibleEvent","CollapsibleEventService","Subject","toggleCollapsibleItemSource","asObservable","toggleCollapsibleItem","event","unsubscribe","CollapsibleAnimationsService","collapsibleBodyAnimations","triggerName","trigger","state","style","height","paddingTop","paddingBottom","borderBottom","boxShadow","overflow","transition","animate","collapsibleBodyAnimationDuration","easeInQuad","easeOutQuad","CollapsibleBodyComponent","el","collapsibleService","eventService","EventEmitter","ngOnInit","_this","toggleCollapsibleItem$","subscribe","hasContent","_b","tslib_1.__values","nativeElement","childNodes","_c","tagName","tempExpanded","ngOnChanges","changes","Object","keys","currentValue","ngOnDestroy","Component","args","selector","template","animations","ElementRef","HostBinding","Input","Output","CollapsibleListItemComponent","ngAfterContentInit","contentListBodies","item","providers","ContentChildren","CollapsibleListComponent","change","CollapsibleHeaderComponent","click","HostListener","CollapsibleTableRowComponent","sanitizer","bypassSecurityTrustStyle","EASE_OUT_QUAD","elem","tbody","parentElement","collapsibleTableRows","querySelectorAll","index","parentCollapsibleTable","isParentStriped","striped","isParentHighlight","highlight","parentHighlightRowBackgroundColor","highlightColor","DEFAULT_HIGHLIGHT_ROW_COLOR","parentHighlightRowTextColor","highlightTextColor","DEFAULT_ROW_TEXT_COLOR","activeRowBackgroundColor","activeColor","DEFAULT_ACTIVE_ROW_COLOR","activeRowTextColor","activeTextColor","parentAllowsSelect","select","parentAllowsSelectMultipleRows","selectMultipleRows","selectedRowBackgroundColor","selectColor","DEFAULT_SELECTED_ROW_COLOR","selectedRowTextColor","selectTextColor","parentAllowsDeselectingRows","allowDeselectingRows","updateRow","querySelector","isHeadRow","isBodyRow","isEvenRow","parentStripedRowBackgroundColor","stripedEvenColor","DEFAULT_STRIPED_EVEN_ROW_COLOR","parentStripedRowTextColor","stripedEvenTextColor","isOddRow","stripedOddColor","DEFAULT_STRIPED_ODD_ROW_COLOR","stripedOddTextColor","selected","rowBackgroundColor","rowTextColor","getHeight","offsetHeight","isLeftMouseButton","button","which","target","srcElement","currentTarget","indexOf","mousedown","noTextSelect","preventDefault","prevSelectedRows","selectedRows","clearSelectedRows","deselectAllRows","mouseup","dragSelection","toggleRowSelection","selectRow","updateTable","shiftKey","rangeSelectedRows","concat","sort","a","b","firstRowIndex","Math","min","apply","lastRowIndex","max","selectRows","focus","mouseenter","mouseDownHold","mouseleave","undefined","detail","subject","DomSanitizer","CollapsibleTableComponent","hasOwnProperty","addSelectedRow","removeSelectedRow","splice","row","updateStriped","updateHighlight","updateActive","updateSelect","keydown","allowKeyboardNavigation","arrowUp","arrowDown","home","end","whichKey","Key","stopPropagation","CollapsibleTableRowDetailComponent","viewListBodies","ngAfterViewInit","ViewChildren","CollapsibleModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\n\nimport { CollapsibleTableComponent } from '../collapsible-table/collapsible-table.component';\nimport { CollapsibleHeaderComponent } from '../collapsible-header/collapsible-header.component';\nimport { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';\n\n@Injectable()\nexport class CollapsibleService {\n    type: 'accordion' | 'expandable';\n\n    collapsibleTable: CollapsibleTableComponent;\n    headers: Array<CollapsibleHeaderComponent> = new Array<CollapsibleHeaderComponent>();\n    bodies: Array<CollapsibleBodyComponent> = new Array<CollapsibleBodyComponent>();\n\n    getType() {\n        return this.type;\n    }\n\n    setType(type: 'accordion' | 'expandable') {\n        this.type = type;\n    }\n\n    getCollapsibleTable(): CollapsibleTableComponent {\n        return this.collapsibleTable;\n    }\n\n    setCollapsibleTable(table: CollapsibleTableComponent) {\n        this.collapsibleTable = table;\n    }\n\n    addListHeader(header: CollapsibleHeaderComponent): void {\n        this.headers.push(header);\n    }\n\n    addListBody(body: CollapsibleBodyComponent): void {\n        this.bodies.push(body);\n    }\n\n    collapseAll(): void {\n        this.bodies.forEach((collapsibleBodyComponent) => {\n            // set 'expanded' properties of all the CollapsibleBodyComponents to 'false'\n            collapsibleBodyComponent.expanded = false;\n            collapsibleBodyComponent.expandedState = collapsibleBodyComponent.expanded.toString();\n\n            // emit 'toggleState' event for all the CollapsibleBodyComponents\n            collapsibleBodyComponent.toggleState.emit(false);\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nexport class CollapsibleEvent {\n    type: string;\n}\n\n@Injectable()\nexport class CollapsibleEventService {\n    type: 'accordion' | 'expandable';\n    // Observable string sources\n    private toggleCollapsibleItemSource = new Subject<any>();\n\n    // Observable string streams\n    toggleCollapsibleItem$ = this.toggleCollapsibleItemSource.asObservable();\n\n    // Toggle collapsible item\n    toggleCollapsibleItem(event?: CollapsibleEvent) {\n        this.toggleCollapsibleItemSource.next(event);\n    }\n\n    unsubscribe() {\n        this.toggleCollapsibleItemSource.unsubscribe();\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { AnimationTriggerMetadata, trigger, state, style, transition, animate } from '@angular/animations';\n\n@Injectable()\nexport class CollapsibleAnimationsService {\n\n    static collapsibleBodyAnimationDuration = '0.2s';\n    static easeInQuad = 'cubic-bezier(0.55, 0.085, 0.68, 0.53)';\n    static easeOutQuad = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n\n    static collapsibleTableRowAnimationDuration = '0.2s';\n\n    static collapsibleBodyAnimations(triggerName: string): AnimationTriggerMetadata[] {\n        return [\n            trigger(triggerName, [\n                state('*', style({\n                    height: 0,\n                    paddingTop: 0,\n                    paddingBottom: 0,\n                    borderBottom: 'none',\n                    boxShadow: 'none',\n                    overflow: 'hidden'\n                })),\n                state('true', style({\n                    boxShadow: 'inset 0 4px 4px -2px rgb(208, 208, 208), inset 0 -3px 2px -1px rgb(208, 208, 208)',\n                    overflow: 'inherit'\n                })),\n                transition('* => true',\n                    animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeInQuad)),\n                transition('* => false',\n                    animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeOutQuad))\n            ])\n        ];\n    }\n\n    /*\n    static collapsibleTableRowAnimations(triggerName: string): AnimationTriggerMetadata[] {\n        return [\n            trigger(triggerName, [\n                state('active', style({\n                    background: 'rgba(0, 0, 0, 0.15)'\n                })),\n                state('inactive', style({\n                    background: 'transparent'\n                })),\n                transition('* => active',\n                    animate(CollapsibleAnimationsService.collapsibleTableRowAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeOutQuad)),\n                transition('* => inactive',\n                    animate(CollapsibleAnimationsService.collapsibleTableRowAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeOutQuad))\n            ])\n        ];\n    }\n    */\n}\n","import {\n    Component,\n    OnInit, OnDestroy, OnChanges, SimpleChanges,\n    Input, ElementRef, HostBinding,\n    Output, EventEmitter\n} from '@angular/core';\n\nimport { CollapsibleService } from '../services/collapsible.service';\nimport { CollapsibleEventService } from '../services/collapsible-event.service';\nimport { CollapsibleAnimationsService } from '../services/collapsible-animations.service';\n\n@Component({\n    selector: 'collapsible-body',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: block;\n            border-bottom: 1px solid #ddd;\n            box-sizing: border-box;\n            padding: 2rem;\n        }\n\n        .side-nav :host {\n            padding: 0;\n        }\n\n        .side-nav :host,\n        .side-nav.fixed :host {\n            border: 0;\n            background-color: #fff;\n        }\n    `],\n    animations: CollapsibleAnimationsService.collapsibleBodyAnimations('collapsibleBodyState')\n})\nexport class CollapsibleBodyComponent implements OnInit, OnChanges, OnDestroy {\n    @HostBinding('@collapsibleBodyState')\n    expandedState: string;\n\n    @Input() expanded: boolean;\n\n    @Output() toggleState = new EventEmitter<boolean>();\n\n    constructor(\n        private el: ElementRef,\n        private collapsibleService: CollapsibleService,\n        private eventService: CollapsibleEventService) { }\n\n    ngOnInit() {\n        this.eventService.toggleCollapsibleItem$.subscribe(() => {\n            this.toggleCollapsibleItem();\n        });\n    }\n\n    hasContent(): boolean {\n        for (const child of this.el.nativeElement.childNodes) {\n            if ((<Element>child).tagName != null) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    toggleCollapsibleItem() {\n        // toggle body's state only if it has any childs\n        if (this.hasContent()) {\n            if (this.collapsibleService.getType() === 'accordion') {\n                const tempExpanded = this.expanded;\n                this.collapsibleService.collapseAll();\n                this.expanded = tempExpanded;\n            }\n            this.expanded = !this.expanded;\n            this.expandedState = this.expanded.toString();\n\n            // emit 'toggleState' event\n            this.toggleState.emit(this.expanded);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.hasContent()) {\n            for (const key of Object.keys(changes)) {\n                if (key === 'expanded' &&\n                    changes.expanded.currentValue != null) {\n                    // this.expanded = changes.expanded.currentValue;\n                    this.expandedState = this.expanded.toString();\n                }\n            }\n        }\n    }\n\n    // Makes sure we don't have a memory leak by destroying the\n    // Subscription when our component is destroyed\n    ngOnDestroy() {\n        this.eventService.unsubscribe();\n    }\n\n}\n","import {\n    Component,\n    AfterContentInit,\n    ContentChildren\n} from '@angular/core';\n\nimport { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';\n\nimport { CollapsibleService } from '../services/collapsible.service';\nimport { CollapsibleEventService } from '../services/collapsible-event.service';\n\n@Component({\n    selector: 'collapsible-list-item',\n    template: `\n        <ng-content select=\"collapsible-header\"></ng-content>\n        <ng-content select=\"collapsible-body\"></ng-content>\n    `,\n    providers: [CollapsibleEventService]\n})\nexport class CollapsibleListItemComponent implements AfterContentInit {\n\n    @ContentChildren(CollapsibleBodyComponent) contentListBodies: Array<CollapsibleBodyComponent>;\n\n    constructor(private collapsibleService: CollapsibleService) { }\n\n    ngAfterContentInit() {\n        // store list bodies in 'CollapsibleService'\n        this.contentListBodies.forEach((item) => {\n            this.collapsibleService.addListBody(item);\n        });\n    }\n\n}\n","import {\n  Component,\n  OnInit, OnChanges, SimpleChanges,\n  Input,\n  ContentChildren\n} from '@angular/core';\n\nimport { CollapsibleListItemComponent } from '../collapsible-list-item/collapsible-list-item.component';\n\nimport { CollapsibleService } from '../services/collapsible.service';\n\n@Component({\n  selector: 'collapsible-list',\n  template: `<ng-content select=\"collapsible-list-item\"></ng-content>`,\n  styles: [`\n    :host {\n      display: block;\n      margin: 0.5rem 0 1rem 0;\n      border-top: 1px solid #ddd;\n      border-right: 1px solid #ddd;\n      border-left: 1px solid #ddd;\n      box-shadow:\n        0 2px 2px 0 rgba(0, 0, 0, 0.14),\n        0 1px 5px 0 rgba(0, 0, 0, 0.12),\n        0 3px 1px -2px rgba(0, 0, 0, 0.2);\n    }\n\n    .side-nav :host,\n    .side-nav.fixed :host {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) > li {\n      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\n      margin: 0 24px;\n      transition: margin 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    }\n\n    .side-nav :host {\n      margin: 0;\n    }\n  `],\n  providers: [CollapsibleService]\n})\nexport class CollapsibleListComponent implements OnInit, OnChanges {\n  // component options\n  //\n  // describes the type of the collapsible list: 'accordion' or 'expandable'\n  @Input() type: 'accordion' | 'expandable' = 'accordion';\n\n  @ContentChildren(CollapsibleListItemComponent) contentListItems: Array<CollapsibleListItemComponent>;\n\n  constructor(private collapsibleService: CollapsibleService) { }\n\n  ngOnInit(): void {\n    this.collapsibleService.setType(this.type);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    for (const change in changes) {\n      if (change === 'type') {\n        this.type = changes.type.currentValue;\n        this.collapsibleService.setType(this.type);\n      }\n    }\n  }\n}\n","import { Component, HostListener } from '@angular/core';\n\nimport { CollapsibleEventService } from '../services/collapsible-event.service';\n\n@Component({\n    selector: 'collapsible-header',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: block;\n            cursor: pointer;\n            min-height: 3rem;\n            line-height: 3rem;\n            padding: 0 1rem;\n            background-color: #fff;\n            border-bottom: 1px solid #ddd;\n        }\n    `]\n})\nexport class CollapsibleHeaderComponent {\n\n    constructor(private eventService: CollapsibleEventService) { }\n\n    @HostListener('click')\n    click() {\n        this.eventService.toggleCollapsibleItem();\n    }\n\n}\n","import {\n    Component,\n    OnInit, AfterContentInit,\n    Input, HostBinding, HostListener,\n    ElementRef\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { CollapsibleTableRowDetailComponent } from '../collapsible-table-row-detail/collapsible-table-row-detail.component';\nimport { CollapsibleTableComponent } from '../collapsible-table/collapsible-table.component';\nimport { CollapsibleService } from '../services/collapsible.service';\n\n@Component({\n    selector: 'collapsible-table-row',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: table-row;\n            transition-property: background-color, color;\n        }\n    `],\n})\nexport class CollapsibleTableRowComponent implements OnInit, AfterContentInit {\n\n    private static EASE_OUT_QUAD = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n\n    public static DEFAULT_STRIPED_ODD_ROW_COLOR = 'rgba(242,242,242,0.8)';\n    public static DEFAULT_STRIPED_EVEN_ROW_COLOR = 'transparent';\n    public static DEFAULT_HIGHLIGHT_ROW_COLOR = 'rgba(222,222,222, 0.8)';\n    public static DEFAULT_ACTIVE_ROW_COLOR = 'rgba(212,212,212, 0.8)';\n    public static DEFAULT_SELECTED_ROW_COLOR = 'rgba(212,212,212, 0.8)';\n\n    public static DEFAULT_ROW_TEXT_COLOR = 'black';\n\n    @Input() detail: CollapsibleTableRowDetailComponent;\n\n    @HostBinding('style.color') rowTextColor: string;\n\n    @HostBinding('style.background-color') rowBackgroundColor: string;\n\n    @HostBinding('style.transition-duration') backgroundTransitionDuration = '0.3s';\n    // transition-timing-function: easeInQuad\n    @HostBinding('style.transition-timing-function')\n    backgroundTransitionTimingFunction = this.sanitizer\n        .bypassSecurityTrustStyle(CollapsibleTableRowComponent.EASE_OUT_QUAD);\n\n    @HostBinding('class.selected') selected: boolean;\n\n    isHeadRow = false;\n    isBodyRow = false;\n    isOddRow = false;\n    isEvenRow = false;\n    isParentStriped = false;\n    isParentHighlight = false;\n    parentAllowsSelect = false;\n    parentAllowsSelectMultipleRows = false;\n\n    parentStripedRowBackgroundColor: string;\n    parentStripedRowTextColor: string;\n    parentHighlightRowBackgroundColor: string;\n    parentHighlightRowTextColor: string;\n    activeRowBackgroundColor: string;\n    activeRowTextColor: string;\n    selectedRowBackgroundColor: string;\n    selectedRowTextColor: string;\n    parentAllowsDeselectingRows = false;\n\n    index: number;\n\n    private parentCollapsibleTable: CollapsibleTableComponent;\n    private prevSelectedRows: Array<number>;\n    private dragSelection = false;\n\n    constructor(\n        private el: ElementRef,\n        private sanitizer: DomSanitizer,\n        private collapsibleService: CollapsibleService) { }\n\n    ngOnInit() {\n        const elem: Element = this.el.nativeElement;\n        const tbody: Element = elem.parentElement;\n        if (tbody.tagName === 'TBODY') {\n            const collapsibleTableRows: NodeListOf<Element> = tbody.querySelectorAll('collapsible-table-row');\n            for (let i = 0; i < collapsibleTableRows.length; i++) {\n                const collapsibleTableRow: Element = collapsibleTableRows[i];\n                if (collapsibleTableRow === elem) {\n                    this.index = i + 1;\n                    break;\n                }\n            }\n        }\n\n        // retrieve parent CollapsibleTableComponent through the CollapsibleService\n        this.parentCollapsibleTable = this.collapsibleService.getCollapsibleTable();\n\n        if (this.parentCollapsibleTable != null) {\n            // check if collapsible-table is marked to show striped table\n            this.isParentStriped = this.parentCollapsibleTable.striped;\n\n            // check if collapsible-table is marked to highlight current row\n            this.isParentHighlight = this.parentCollapsibleTable.highlight;\n            this.parentHighlightRowBackgroundColor = this.parentCollapsibleTable.highlightColor ||\n                CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;\n            this.parentHighlightRowTextColor = this.parentCollapsibleTable.highlightTextColor ||\n                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n\n            // check if collapsible-table specifies the active row color\n            this.activeRowBackgroundColor = this.parentCollapsibleTable.activeColor ||\n                CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;\n            this.activeRowTextColor = this.parentCollapsibleTable.activeTextColor ||\n                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n\n            // check if collapsible-table allows selecting rows\n            this.parentAllowsSelect = this.parentCollapsibleTable.select;\n            this.parentAllowsSelectMultipleRows = this.parentCollapsibleTable.selectMultipleRows;\n\n            // check if collapsible-table specifies a color for the selected row\n            this.selectedRowBackgroundColor = this.parentCollapsibleTable.selectColor ||\n                CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;\n            this.selectedRowTextColor = this.parentCollapsibleTable.selectTextColor ||\n                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n\n            // check if collapsible-table allows to deselect rows\n            this.parentAllowsDeselectingRows = this.parentCollapsibleTable.allowDeselectingRows != null ?\n                this.parentCollapsibleTable.allowDeselectingRows : false;\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this.updateRow();\n    }\n\n    updateRow(): void {\n        const elem: Element = this.el.nativeElement;\n\n        // determine if the row is inside the 'thead'\n        const th = elem.querySelector('th');\n        if (th != null) {\n            this.isHeadRow = true;\n        }\n\n        // determine if the row is inside the 'tbody'\n        const td = elem.querySelector('td');\n        if (td != null) {\n            this.isBodyRow = true;\n            // determine if the row is 'odd' or 'event'\n            if (this.index % 2 === 0) {\n                this.isEvenRow = true;\n                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedEvenColor ||\n                    CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;\n                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedEvenTextColor ||\n                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n            } else {\n                this.isOddRow = true;\n                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedOddColor ||\n                    CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;\n                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedOddTextColor ||\n                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n            }\n\n            switch (true) {\n                case this.parentAllowsSelect && this.selected:\n                    this.rowBackgroundColor = this.selectedRowBackgroundColor;\n                    this.rowTextColor = this.selectedRowTextColor;\n                    break;\n                case this.isParentStriped:\n                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;\n                    this.rowTextColor = this.parentStripedRowTextColor;\n                    break;\n            }\n\n        }\n    }\n\n    getHeight(): number {\n        return this.el.nativeElement.offsetHeight;\n    }\n\n    private isLeftMouseButton(event: MouseEvent): boolean {\n        const button: number = event.button;\n        const which: number = event['which'];\n        const target = <HTMLElement>(event.target || event.srcElement || event.currentTarget);\n\n        if (['TR', 'TD'].indexOf(target.tagName) > -1) {\n            if ('button' in event) {\n                return button === 0;\n            } else {\n                return (which || button) === 1;\n            }\n        }\n\n        return false;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    mousedown(event: MouseEvent) {\n        // handle only if the Left mouse button pressed\n        // and the row is a body row\n        if (this.isLeftMouseButton(event) && this.isBodyRow) {\n            if (this.parentCollapsibleTable.noTextSelect) {\n                event.preventDefault();\n            }\n            if (this.isBodyRow) {\n                if (this.parentAllowsSelect && !this.parentAllowsDeselectingRows) {\n                    this.prevSelectedRows = this.parentCollapsibleTable.selectedRows;\n                    this.parentCollapsibleTable.clearSelectedRows();\n                    this.parentCollapsibleTable.deselectAllRows();\n                }\n                this.rowBackgroundColor = this.activeRowBackgroundColor;\n                this.rowTextColor = this.activeRowTextColor;\n            }\n        }\n    }\n\n    @HostListener('mouseup', ['$event'])\n    mouseup(event: MouseEvent) {\n        // handle only if the Left mouse button pressed\n        // and the row is a body row\n        if (this.isLeftMouseButton(event) && this.isBodyRow) {\n            // handle selection\n            if (this.parentAllowsSelect) {\n                if (!this.parentAllowsDeselectingRows) {\n                    this.parentCollapsibleTable.selectRow(this.index);\n                } else {\n                    if (!this.dragSelection) {\n                        this.parentCollapsibleTable.toggleRowSelection(this.index);\n                    }\n                }\n            }\n\n            // check row state\n            this.parentCollapsibleTable.updateTable();\n            /*switch (true) {\n                // parent allows selecting rows and the row is selected\n                case this.parentAllowsSelect && this.selected:\n                    this.rowBackgroundColor = this.selectedRowBackgroundColor;\n                    this.rowTextColor = this.selectedRowTextColor;\n                    this.parentCollapsibleTable.updateTable();\n                    break;\n                // highlighted\n                case this.isParentHighlight:\n                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;\n                    this.rowTextColor = this.parentHighlightRowTextColor;\n                    break;\n                // striped\n                case this.isParentStriped:\n                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;\n                    this.rowTextColor = this.parentStripedRowTextColor;\n                    break;\n                default:\n                    this.rowBackgroundColor = undefined;\n                    this.rowTextColor = undefined;\n                    break;\n            }*/\n\n            // select multiple rows using the 'Shift' key\n            if (this.parentAllowsSelect &&\n                this.parentAllowsSelectMultipleRows &&\n                event != null && event.shiftKey) {\n                if (this.prevSelectedRows != null &&\n                    this.prevSelectedRows.length > 0 &&\n                    this.parentCollapsibleTable.selectedRows.length > 0) {\n                    const rangeSelectedRows = this.prevSelectedRows.concat(this.parentCollapsibleTable.selectedRows);\n                    rangeSelectedRows.sort((a, b) => a - b);\n                    const firstRowIndex = Math.min.apply(null, rangeSelectedRows);\n                    const lastRowIndex = Math.max.apply(null, rangeSelectedRows);\n\n                    this.parentCollapsibleTable.selectRows(firstRowIndex, lastRowIndex);\n                }\n            }\n\n            // set dragSelection flag to false. Prevents selection drag behavior\n            this.dragSelection = false;\n\n            // focus the collapsible table\n            this.parentCollapsibleTable.focus();\n        }\n    }\n\n    @HostListener('mouseenter', ['$event'])\n    mouseenter(event: MouseEvent) {\n        // handle only if the row is a body row\n        if (this.isBodyRow) {\n            switch (true) {\n                // the use is trying to select multiple rows by holding a mouse button\n                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:\n                    this.parentCollapsibleTable.selectRow(this.index);\n                    this.dragSelection = true;\n                    break;\n                // parent allows selecting rows and the row is selected\n                case this.parentAllowsSelect && this.selected:\n                    break;\n                // highlighted\n                case this.isParentHighlight:\n                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;\n                    this.rowTextColor = this.parentHighlightRowTextColor;\n                    break;\n            }\n        }\n    }\n\n    @HostListener('mouseleave', ['$event'])\n    mouseleave(event: MouseEvent) {\n        // handle only if the row is a body row\n        if (this.isBodyRow) {\n            // check row state\n            switch (true) {\n                // the use is trying to select multiple rows by holding a mouse button\n                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:\n                    this.parentCollapsibleTable.selectRow(this.index);\n                    this.dragSelection = false;\n                    break;\n                // parent allows selecting rows and the row is selected\n                case this.parentAllowsSelect && this.selected:\n                    break;\n                // stripped\n                case this.isParentStriped:\n                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;\n                    this.rowTextColor = this.parentStripedRowTextColor;\n                    break;\n                default:\n                    this.rowBackgroundColor = undefined;\n                    this.rowTextColor = undefined;\n                    break;\n            }\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    click(event: MouseEvent) {\n        if (this.detail != null) {\n            const target = <HTMLElement>(event.target || event.srcElement || event.currentTarget);\n\n            if (target != null && ['TR', 'TD'].indexOf(target.tagName) > -1) {\n                this.detail.subject.next();\n            }\n        }\n    }\n\n}\n","import {\n    Component,\n    OnInit, OnChanges, SimpleChanges, AfterContentInit,\n    Input, HostBinding, HostListener,\n    ElementRef, ContentChildren\n} from '@angular/core';\n\nimport { CollapsibleTableRowComponent } from '../collapsible-table-row/collapsible-table-row.component';\nimport { CollapsibleService } from '../services/collapsible.service';\n\n@Component({\n    selector: 'collapsible-table',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: table;\n            position: relative;\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        :host thead {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host /deep/ tbody /deep/ collapsible-table-row {\n            cursor: pointer;\n        }\n\n        :host /deep/ collapsible-table-row th,\n        :host /deep/ collapsible-table-row td {\n            border-radius: 0;\n        }\n\n        :host[bordered='true'] {\n            border-top: 1px solid #d0d0d0;\n            border-right: 1px solid #d0d0d0;\n            border-left: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row,\n        :host[borderedHorizontally='true'] /deep/ collapsible-table-row {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row th,\n        :host[bordered='true'] /deep/ collapsible-table-row td,\n        :host[borderedVertically='true'] /deep/ collapsible-table-row th:not(:last-child),\n        :host[borderedVertically='true'] /deep/ collapsible-table-row td:not(:last-child) {\n            border-right: 1px solid #d0d0d0;\n        }\n\n        :host(.centered) /deep/ * {\n            text-align: center;\n        }\n\n        :host(.noTextSelect) /deep/ collapsible-table-row th,\n        :host(.noTextSelect) /deep/ collapsible-table-row td {\n            user-select: none;\n        }\n    `],\n    providers: [\n        CollapsibleService\n    ]\n})\nexport class CollapsibleTableComponent implements OnInit, OnChanges, AfterContentInit {\n    // component options\n    //\n    // makes the table bordered\n    @Input()\n    @HostBinding('attr.bordered') bordered: boolean;\n\n    // makes the table bordered horizontally only\n    @Input()\n    @HostBinding('attr.borderedHorizontally') borderedHorizontally: boolean;\n\n    // makes the table bordered vertically only\n    @Input()\n    @HostBinding('attr.borderedVertically') borderedVertically: boolean;\n\n    // makes the table striped\n    @Input()\n    @HostBinding('attr.striped') striped: boolean;\n\n    // a color of an odd striped row\n    @Input()\n    @HostBinding('attr.stripedOddColor') stripedOddColor: string;\n\n    // a text color of an odd striped row\n    @Input()\n    @HostBinding('attr.stripedOddTextColor') stripedOddTextColor: string;\n\n    // a color of an even striped row\n    @Input()\n    @HostBinding('attr.stripedEvenColor') stripedEvenColor: string;\n\n    // a text color of an even striped row\n    @Input()\n    @HostBinding('attr.stripedEvenTextColor') stripedEvenTextColor: string;\n\n    // highlight table rows on mouse hover\n    @Input()\n    @HostBinding('attr.highlight') highlight: boolean;\n\n    // a color of a highlighted row\n    @Input()\n    @HostBinding('attr.highlightColor') highlightColor: string;\n\n    // a text color of a highlighted row\n    @Input()\n    @HostBinding('attr.highlightTextColor') highlightTextColor: string;\n\n    // a color of an active row\n    @Input()\n    @HostBinding('attr.activeColor') activeColor: string;\n\n    // a text color of an active row\n    @Input()\n    @HostBinding('attr.activeTextColor') activeTextColor: string;\n\n    // center align all the text in the table\n    @Input()\n    @HostBinding('class.centered')\n    @HostBinding('attr.centered') centered: boolean;\n\n    // makes the table horizontally scrollable on smaller screen widths\n    @Input()\n    @HostBinding('attr.responsive') responsive: boolean;\n\n    // allows to select rows\n    @Input()\n    @HostBinding('attr.select') select: boolean;\n\n    // allows to select multiple rows\n    @Input()\n    @HostBinding('attr.selectMultipleRows') selectMultipleRows: boolean;\n\n    // a color of a selected row\n    @Input()\n    @HostBinding('attr.selectColor') selectColor: string;\n\n    // a text color of a selected row\n    @Input()\n    @HostBinding('attr.selectTextColor') selectTextColor: string;\n\n    // allows deselecting selected rows\n    @Input()\n    @HostBinding('attr.allowDeselectingRows') allowDeselectingRows: boolean;\n\n    // allows navigation between table rows using arrow keys\n    @Input()\n    @HostBinding('attr.allowKeyboardNavigation')\n    allowKeyboardNavigation = true;\n\n    // disables user select withing the table\n    @Input()\n    @HostBinding('class.noTextSelect')\n    @HostBinding('attr.noTextSelect') noTextSelect: boolean;\n\n    fixedTableHeight = 'auto';\n\n    @HostBinding('attr.tabindex') tabindex = 0;\n\n    selectedRows: Array<number> = [];\n\n    // specifies collapsible type. Can be either 'accordion' or 'expandable'\n    @Input()\n    @HostBinding('attr.type') type: 'accordion' | 'expandable' = 'accordion';\n\n    @ContentChildren(CollapsibleTableRowComponent) collapsibleTableRows: Array<CollapsibleTableRowComponent>;\n\n    mouseDownHold = false;\n\n    constructor(\n        private el: ElementRef,\n        private collapsibleService: CollapsibleService) { }\n\n    ngOnInit() {\n    }\n\n    ngAfterContentInit() {\n        // this.updateFixedTableHeight();\n        /*\n        LOG(`CollapsibleTableComponent::ngOnInit()\\n` +\n            `this = {\\n` +\n            `bordered = ${this.bordered}\\n` +\n            `borderedHorizontally = ${this.borderedHorizontally}\\n` +\n            `borderedVertically = ${this.borderedVertically}\\n` +\n            `striped = ${this.striped}\\n` +\n            `stripedOddColor = ${this.stripedOddColor}\\n` +\n            `stripedEvenColor = ${this.stripedEvenColor}\\n` +\n            `highlight = ${this.highlight}\\n` +\n            `highlightColor = ${this.highlightColor}\\n` +\n            `highlightTextColor = ${this.highlightTextColor}\\n` +\n            `activeColor = ${this.activeColor}\\n` +\n            `activeTextColor = ${this.activeTextColor}\\n` +\n            `centered = ${this.centered}\\n` +\n            `responsive = ${this.responsive}\\n` +\n            `select = ${this.select}\\n` +\n            `selectColor = ${this.selectColor}\\n` +\n            `selectTextColor = ${this.selectTextColor}\\n` +\n            `selectMultipleRows = ${this.selectMultipleRows}\\n` +\n            `noTextSelect = ${this.noTextSelect}\\n` +\n            `}`);\n            */\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                if (this.collapsibleTableRows != null) {\n                    switch (change) {\n                        case 'striped':\n                        case 'stripedOddColor':\n                        case 'stripedOddTextColor':\n                        case 'stripedEvenColor':\n                        case 'stripedEvenTextColor':\n                            this.updateTable('striped');\n                            break;\n                        case 'highlight':\n                        case 'highlightColor':\n                        case 'highlightTextColor':\n                            this.updateTable('highlight');\n                            break;\n                        case 'activeColor':\n                        case 'activeTextColor':\n                            this.updateTable('active');\n                            break;\n                        case 'select':\n                        case 'selectColor':\n                        case 'selectTextColor':\n                        case 'selectMultipleRows':\n                        case 'allowDeselectingRows':\n                            this.updateTable('select');\n                            break;\n                    }\n                }\n\n                // update collapsible table type in CollapsibleService\n                if (change === 'type') {\n                    this.type = changes.type.currentValue;\n                    this.collapsibleService.setType(this.type);\n                }\n            }\n        }\n        this.collapsibleService.setCollapsibleTable(this);\n    }\n\n    focus() {\n        this.el.nativeElement.focus();\n    }\n\n    addSelectedRow(index: number): void {\n        switch (true) {\n            case this.selectMultipleRows && this.selectedRows.indexOf(index) === -1:\n                this.selectedRows.push(index);\n                this.selectedRows.sort((a, b) => a - b);\n                break;\n            case !this.selectMultipleRows:\n                this.selectedRows = [];\n                this.deselectAllRows();\n                this.selectedRows.push(index);\n                this.selectedRows.sort((a, b) => a - b);\n                break;\n        }\n    }\n\n    removeSelectedRow(index: number): void {\n        if (this.selectedRows.indexOf(index) !== -1) {\n            this.selectedRows.splice(this.selectedRows.indexOf(index), 1);\n        }\n    }\n\n    clearSelectedRows() {\n        this.selectedRows = [];\n    }\n\n    deselectAllRows() {\n        this.collapsibleTableRows.forEach(row => {\n            row.selected = false;\n            row.updateRow();\n        });\n    }\n\n    selectRow(index: number) {\n        if (this.select) {\n            switch (true) {\n                case index === 0:\n                    this.selectRow(1);\n                    break;\n                case index === this.collapsibleTableRows.length:\n                    this.selectRow(this.collapsibleTableRows.length - 1);\n                    break;\n                case 0 < index && index <= this.collapsibleTableRows.length - 1:\n                    this.addSelectedRow(index);\n                    this.collapsibleTableRows.forEach((row, i) => {\n                        if (index !== i) {\n                            if (!this.selectMultipleRows) {\n                                row.selected = false;\n                            }\n                        } else {\n                            row.selected = true;\n                        }\n                        row.updateRow();\n                    });\n                    break;\n            }\n        }\n\n    }\n\n    selectRows(firstRowIndex: number, lastRowIndex: number) {\n        if (this.selectMultipleRows &&\n            0 < firstRowIndex && firstRowIndex < lastRowIndex &&\n            lastRowIndex <= this.collapsibleTableRows.length - 1) {\n            this.clearSelectedRows();\n            this.collapsibleTableRows.forEach((row, i) => {\n                if (firstRowIndex <= i && i <= lastRowIndex) {\n                    this.addSelectedRow(i);\n                    row.selected = true;\n                } else {\n                    row.selected = false;\n                }\n                row.updateRow();\n            });\n        }\n    }\n\n    toggleRowSelection(index: number) {\n        if (this.select &&\n            0 < index && index <= this.collapsibleTableRows.length - 1) {\n            this.collapsibleTableRows.forEach((row, i) => {\n                if (index === i) {\n                    if (row.selected) {\n                        this.removeSelectedRow(index);\n                    } else {\n                        this.addSelectedRow(index);\n                    }\n                    row.selected = !row.selected;\n                    row.updateRow();\n                }\n            });\n        }\n    }\n\n    /*updateFixedTableHeight() {\n        this.fixedTableHeight = this.el.nativeElement.offsetHeight + 'px';\n        let elem: Element = this.el.nativeElement;\n        let rowHeights = 0;\n        if (this.collapsibleTableRowComponent != null) {\n            this.collapsibleTableRowComponent.forEach(row => {\n            });\n        }\n    }*/\n\n    updateStriped(row: CollapsibleTableRowComponent): void {\n        if (this.striped && row.isBodyRow) {\n            row.isParentStriped = true;\n            if (row.isOddRow) {\n                row.parentStripedRowBackgroundColor = this.stripedOddColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;\n                row.parentStripedRowTextColor = this.stripedOddTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;\n                row.rowTextColor = row.parentStripedRowTextColor;\n            } else {\n                row.parentStripedRowBackgroundColor = this.stripedEvenColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;\n                row.parentStripedRowTextColor = this.stripedEvenTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;\n                row.rowTextColor = row.parentStripedRowTextColor;\n            }\n        } else {\n            row.isParentStriped = false;\n            row.rowBackgroundColor = undefined;\n            row.rowTextColor = undefined;\n        }\n    }\n\n    updateHighlight(row: CollapsibleTableRowComponent): void {\n        row.isParentHighlight = this.highlight;\n        row.parentHighlightRowBackgroundColor = this.highlightColor || CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;\n        row.parentHighlightRowTextColor = this.highlightTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n    }\n\n    updateActive(row: CollapsibleTableRowComponent): void {\n        row.activeRowBackgroundColor = this.activeColor || CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;\n        row.activeRowTextColor = this.activeTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n    }\n\n    updateSelect(row: CollapsibleTableRowComponent): void {\n        row.parentAllowsSelect = this.select;\n        row.parentAllowsSelectMultipleRows = this.selectMultipleRows;\n        row.parentAllowsDeselectingRows = this.allowDeselectingRows;\n        if (row.selected) {\n            row.selectedRowBackgroundColor = this.selectColor || CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;\n            row.selectedRowTextColor = this.selectTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n            row.rowBackgroundColor = row.selectedRowBackgroundColor;\n            row.rowTextColor = row.selectedRowTextColor;\n        }\n    }\n\n    updateTable(change?: string): void {\n        if (this.collapsibleTableRows != null) {\n            if (change != null) {\n                switch (change) {\n                    case 'striped':\n                        // propagate changes to each of the CollapsibleTableRowComponent children\n                        this.collapsibleTableRows.forEach(row => { this.updateStriped(row); });\n                        break;\n                    case 'highlight':\n                        this.collapsibleTableRows.forEach(row => { this.updateHighlight(row); });\n                        break;\n                    case 'active':\n                        this.collapsibleTableRows.forEach(row => { this.updateActive(row); });\n                        break;\n                    case 'select':\n                        this.collapsibleTableRows.forEach(row => { this.updateSelect(row); });\n                        break;\n                }\n            } else {\n                // propagate changes to each of the CollapsibleTableRowComponent children\n                this.collapsibleTableRows.forEach(row => {\n                    this.updateStriped(row);\n                    this.updateHighlight(row);\n                    this.updateSelect(row);\n                    this.updateActive(row);\n                });\n            }\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydown(event: KeyboardEvent) {\n        // select a row only if 'select' property is set to 'true'\n        if (this.select && this.allowKeyboardNavigation) {\n            enum Key {\n                arrowUp = 38,\n                arrowDown = 40,\n                home = 36,\n                end = 35\n            }\n\n            let index = 1;\n            const whichKey = event['which'];\n            if (Key[whichKey] != null) {\n\n                event.preventDefault();\n                event.stopPropagation();\n\n                switch (whichKey) {\n                    case Key.arrowUp:\n                        // select previous row\n                        if (this.selectedRows.length > 0) {\n                            index = this.selectedRows[this.selectedRows.length - 1];\n                            index--;\n                        }\n                        break;\n                    case Key.arrowDown:\n                        // select next row\n                        if (this.selectedRows.length > 0) {\n                            index = this.selectedRows[this.selectedRows.length - 1];\n                            index++;\n                        }\n                        break;\n                    case Key.home:\n                        index = 1;\n                        break;\n                    case Key.end:\n                        index = this.collapsibleTableRows.length - 1;\n                        break;\n                }\n\n                this.clearSelectedRows();\n                this.deselectAllRows();\n                this.selectRow(index);\n                this.updateTable();\n            }\n        }\n    }\n\n    @HostListener('mousedown')\n    mousedown() {\n        this.mouseDownHold = true;\n    }\n\n    @HostListener('mouseup')\n    mouseup() {\n        this.mouseDownHold = false;\n    }\n}\n","import {\n    Component,\n    OnInit, AfterViewInit,\n    Input,\n    ViewChildren\n} from '@angular/core';\n\nimport { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';\n\nimport { CollapsibleService } from '../services/collapsible.service';\n\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'collapsible-table-row-detail',\n    template: `\n        <td colspan=\"100%\">\n            <collapsible-list-item>\n                <collapsible-body>\n                    <ng-content></ng-content>\n                </collapsible-body>\n            </collapsible-list-item>\n        </td>\n    `,\n    styles: [`\n        :host {\n            display: table-row;\n        }\n\n        :host collapsible-body,\n        :host td {\n            padding: 0;\n        }\n    `]\n})\nexport class CollapsibleTableRowDetailComponent implements OnInit, AfterViewInit {\n    subject: Subject<any> = new Subject<any>();\n\n    @Input() expanded: boolean;\n\n    @ViewChildren(CollapsibleBodyComponent) viewListBodies: Array<CollapsibleBodyComponent>;\n\n    constructor(private collapsibleService: CollapsibleService) { }\n\n    ngOnInit() {\n        this.subject.asObservable().subscribe(() => {\n            this.viewListBodies.forEach((item) => {\n                item.toggleCollapsibleItem();\n            });\n        });\n    }\n\n    ngAfterViewInit() {\n        // store list bodies in 'CollapsibleService'\n        this.viewListBodies.forEach((item) => {\n            this.collapsibleService.addListBody(item);\n        });\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CollapsibleListComponent } from './collapsible-list/collapsible-list.component';\nimport { CollapsibleListItemComponent } from './collapsible-list-item/collapsible-list-item.component';\nimport { CollapsibleHeaderComponent } from './collapsible-header/collapsible-header.component';\nimport { CollapsibleBodyComponent } from './collapsible-body/collapsible-body.component';\n\nimport { CollapsibleTableComponent } from './collapsible-table/collapsible-table.component';\nimport { CollapsibleTableRowComponent } from './collapsible-table-row/collapsible-table-row.component';\nimport { CollapsibleTableRowDetailComponent } from './collapsible-table-row-detail/collapsible-table-row-detail.component';\n\nimport { CollapsibleService } from './services/collapsible.service';\nimport { CollapsibleEventService } from './services/collapsible-event.service';\nimport { CollapsibleAnimationsService } from './services/collapsible-animations.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    CollapsibleListComponent,\n    CollapsibleListItemComponent,\n    CollapsibleHeaderComponent,\n    CollapsibleBodyComponent,\n    CollapsibleTableComponent,\n    CollapsibleTableRowComponent,\n    CollapsibleTableRowDetailComponent\n  ],\n  exports: [\n    CollapsibleListComponent,\n    CollapsibleListItemComponent,\n    CollapsibleHeaderComponent,\n    CollapsibleBodyComponent,\n    CollapsibleTableComponent,\n    CollapsibleTableRowComponent,\n    CollapsibleTableRowDetailComponent\n  ],\n  providers: [\n    CollapsibleService,\n    CollapsibleEventService,\n    CollapsibleAnimationsService\n  ]\n})\nexport class CollapsibleModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CollapsibleModule,\n      providers: [CollapsibleModule]\n    };\n  }\n}\n"]}