{"version":3,"file":"angular2-collapsible.umd.js.map","sources":["node_modules/tslib/tslib.es6.js","ng://angular2-collapsible/lib/services/collapsible.service.ts","ng://angular2-collapsible/lib/services/collapsible-event.service.ts","ng://angular2-collapsible/lib/services/collapsible-animations.service.ts","ng://angular2-collapsible/lib/collapsible-body/collapsible-body.component.ts","ng://angular2-collapsible/lib/collapsible-list-item/collapsible-list-item.component.ts","ng://angular2-collapsible/lib/collapsible-list/collapsible-list.component.ts","ng://angular2-collapsible/lib/collapsible-header/collapsible-header.component.ts","ng://angular2-collapsible/lib/collapsible-table-row/collapsible-table-row.component.ts","ng://angular2-collapsible/lib/collapsible-table/collapsible-table.component.ts","ng://angular2-collapsible/lib/collapsible-table-row-detail/collapsible-table-row-detail.component.ts","ng://angular2-collapsible/lib/collapsible.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\n\nimport { CollapsibleTableComponent } from '../collapsible-table/collapsible-table.component';\nimport { CollapsibleHeaderComponent } from '../collapsible-header/collapsible-header.component';\nimport { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';\n\n@Injectable()\nexport class CollapsibleService {\n    type: 'accordion' | 'expandable';\n\n    collapsibleTable: CollapsibleTableComponent;\n    headers: Array<CollapsibleHeaderComponent> = new Array<CollapsibleHeaderComponent>();\n    bodies: Array<CollapsibleBodyComponent> = new Array<CollapsibleBodyComponent>();\n\n    getType() {\n        return this.type;\n    }\n\n    setType(type: 'accordion' | 'expandable') {\n        this.type = type;\n    }\n\n    getCollapsibleTable(): CollapsibleTableComponent {\n        return this.collapsibleTable;\n    }\n\n    setCollapsibleTable(table: CollapsibleTableComponent) {\n        this.collapsibleTable = table;\n    }\n\n    addListHeader(header: CollapsibleHeaderComponent): void {\n        this.headers.push(header);\n    }\n\n    addListBody(body: CollapsibleBodyComponent): void {\n        this.bodies.push(body);\n    }\n\n    collapseAll(): void {\n        this.bodies.forEach((collapsibleBodyComponent) => {\n            // set 'expanded' properties of all the CollapsibleBodyComponents to 'false'\n            collapsibleBodyComponent.expanded = false;\n            collapsibleBodyComponent.expandedState = collapsibleBodyComponent.expanded.toString();\n\n            // emit 'toggleState' event for all the CollapsibleBodyComponents\n            collapsibleBodyComponent.toggleState.emit(false);\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nexport class CollapsibleEvent {\n    type: string;\n}\n\n@Injectable()\nexport class CollapsibleEventService {\n    type: 'accordion' | 'expandable';\n    // Observable string sources\n    private toggleCollapsibleItemSource = new Subject<any>();\n\n    // Observable string streams\n    toggleCollapsibleItem$ = this.toggleCollapsibleItemSource.asObservable();\n\n    // Toggle collapsible item\n    toggleCollapsibleItem(event?: CollapsibleEvent) {\n        this.toggleCollapsibleItemSource.next(event);\n    }\n\n    unsubscribe() {\n        this.toggleCollapsibleItemSource.unsubscribe();\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { AnimationTriggerMetadata, trigger, state, style, transition, animate } from '@angular/animations';\n\n@Injectable()\nexport class CollapsibleAnimationsService {\n\n    static collapsibleBodyAnimationDuration = '0.2s';\n    static easeInQuad = 'cubic-bezier(0.55, 0.085, 0.68, 0.53)';\n    static easeOutQuad = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n\n    static collapsibleTableRowAnimationDuration = '0.2s';\n\n    static collapsibleBodyAnimations(triggerName: string): AnimationTriggerMetadata[] {\n        return [\n            trigger(triggerName, [\n                state('*', style({\n                    height: 0,\n                    paddingTop: 0,\n                    paddingBottom: 0,\n                    borderBottom: 'none',\n                    boxShadow: 'none',\n                    overflow: 'hidden'\n                })),\n                state('true', style({\n                    boxShadow: 'inset 0 4px 4px -2px rgb(208, 208, 208), inset 0 -3px 2px -1px rgb(208, 208, 208)',\n                    overflow: 'inherit'\n                })),\n                transition('* => true',\n                    animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeInQuad)),\n                transition('* => false',\n                    animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeOutQuad))\n            ])\n        ];\n    }\n\n    /*\n    static collapsibleTableRowAnimations(triggerName: string): AnimationTriggerMetadata[] {\n        return [\n            trigger(triggerName, [\n                state('active', style({\n                    background: 'rgba(0, 0, 0, 0.15)'\n                })),\n                state('inactive', style({\n                    background: 'transparent'\n                })),\n                transition('* => active',\n                    animate(CollapsibleAnimationsService.collapsibleTableRowAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeOutQuad)),\n                transition('* => inactive',\n                    animate(CollapsibleAnimationsService.collapsibleTableRowAnimationDuration + ' ' +\n                        CollapsibleAnimationsService.easeOutQuad))\n            ])\n        ];\n    }\n    */\n}\n","import {\n    Component,\n    OnInit, OnDestroy, OnChanges, SimpleChanges,\n    Input, ElementRef, HostBinding,\n    Output, EventEmitter\n} from '@angular/core';\n\nimport { CollapsibleService } from '../services/collapsible.service';\nimport { CollapsibleEventService } from '../services/collapsible-event.service';\nimport { CollapsibleAnimationsService } from '../services/collapsible-animations.service';\n\n@Component({\n    selector: 'collapsible-body',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: block;\n            border-bottom: 1px solid #ddd;\n            box-sizing: border-box;\n            padding: 2rem;\n        }\n\n        .side-nav :host {\n            padding: 0;\n        }\n\n        .side-nav :host,\n        .side-nav.fixed :host {\n            border: 0;\n            background-color: #fff;\n        }\n    `],\n    animations: CollapsibleAnimationsService.collapsibleBodyAnimations('collapsibleBodyState')\n})\nexport class CollapsibleBodyComponent implements OnInit, OnChanges, OnDestroy {\n    @HostBinding('@collapsibleBodyState')\n    expandedState: string;\n\n    @Input() expanded: boolean;\n\n    @Output() toggleState = new EventEmitter<boolean>();\n\n    constructor(\n        private el: ElementRef,\n        private collapsibleService: CollapsibleService,\n        private eventService: CollapsibleEventService) { }\n\n    ngOnInit() {\n        this.eventService.toggleCollapsibleItem$.subscribe(() => {\n            this.toggleCollapsibleItem();\n        });\n    }\n\n    hasContent(): boolean {\n        for (const child of this.el.nativeElement.childNodes) {\n            if ((<Element>child).tagName != null) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    toggleCollapsibleItem() {\n        // toggle body's state only if it has any childs\n        if (this.hasContent()) {\n            if (this.collapsibleService.getType() === 'accordion') {\n                const tempExpanded = this.expanded;\n                this.collapsibleService.collapseAll();\n                this.expanded = tempExpanded;\n            }\n            this.expanded = !this.expanded;\n            this.expandedState = this.expanded.toString();\n\n            // emit 'toggleState' event\n            this.toggleState.emit(this.expanded);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.hasContent()) {\n            for (const key of Object.keys(changes)) {\n                if (key === 'expanded' &&\n                    changes.expanded.currentValue != null) {\n                    // this.expanded = changes.expanded.currentValue;\n                    this.expandedState = this.expanded.toString();\n                }\n            }\n        }\n    }\n\n    // Makes sure we don't have a memory leak by destroying the\n    // Subscription when our component is destroyed\n    ngOnDestroy() {\n        this.eventService.unsubscribe();\n    }\n\n}\n","import {\n    Component,\n    AfterContentInit,\n    ContentChildren\n} from '@angular/core';\n\nimport { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';\n\nimport { CollapsibleService } from '../services/collapsible.service';\nimport { CollapsibleEventService } from '../services/collapsible-event.service';\n\n@Component({\n    selector: 'collapsible-list-item',\n    template: `\n        <ng-content select=\"collapsible-header\"></ng-content>\n        <ng-content select=\"collapsible-body\"></ng-content>\n    `,\n    providers: [CollapsibleEventService]\n})\nexport class CollapsibleListItemComponent implements AfterContentInit {\n\n    @ContentChildren(CollapsibleBodyComponent) contentListBodies: Array<CollapsibleBodyComponent>;\n\n    constructor(private collapsibleService: CollapsibleService) { }\n\n    ngAfterContentInit() {\n        // store list bodies in 'CollapsibleService'\n        this.contentListBodies.forEach((item) => {\n            this.collapsibleService.addListBody(item);\n        });\n    }\n\n}\n","import {\n  Component,\n  OnInit, OnChanges, SimpleChanges,\n  Input,\n  ContentChildren\n} from '@angular/core';\n\nimport { CollapsibleListItemComponent } from '../collapsible-list-item/collapsible-list-item.component';\n\nimport { CollapsibleService } from '../services/collapsible.service';\n\n@Component({\n  selector: 'collapsible-list',\n  template: `<ng-content select=\"collapsible-list-item\"></ng-content>`,\n  styles: [`\n    :host {\n      display: block;\n      margin: 0.5rem 0 1rem 0;\n      border-top: 1px solid #ddd;\n      border-right: 1px solid #ddd;\n      border-left: 1px solid #ddd;\n      box-shadow:\n        0 2px 2px 0 rgba(0, 0, 0, 0.14),\n        0 1px 5px 0 rgba(0, 0, 0, 0.12),\n        0 3px 1px -2px rgba(0, 0, 0, 0.2);\n    }\n\n    .side-nav :host,\n    .side-nav.fixed :host {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) > li {\n      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\n      margin: 0 24px;\n      transition: margin 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    }\n\n    .side-nav :host {\n      margin: 0;\n    }\n  `],\n  providers: [CollapsibleService]\n})\nexport class CollapsibleListComponent implements OnInit, OnChanges {\n  // component options\n  //\n  // describes the type of the collapsible list: 'accordion' or 'expandable'\n  @Input() type: 'accordion' | 'expandable' = 'accordion';\n\n  @ContentChildren(CollapsibleListItemComponent) contentListItems: Array<CollapsibleListItemComponent>;\n\n  constructor(private collapsibleService: CollapsibleService) { }\n\n  ngOnInit(): void {\n    this.collapsibleService.setType(this.type);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    for (const change in changes) {\n      if (change === 'type') {\n        this.type = changes.type.currentValue;\n        this.collapsibleService.setType(this.type);\n      }\n    }\n  }\n}\n","import { Component, HostListener } from '@angular/core';\n\nimport { CollapsibleEventService } from '../services/collapsible-event.service';\n\n@Component({\n    selector: 'collapsible-header',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: block;\n            cursor: pointer;\n            min-height: 3rem;\n            line-height: 3rem;\n            padding: 0 1rem;\n            background-color: #fff;\n            border-bottom: 1px solid #ddd;\n        }\n    `]\n})\nexport class CollapsibleHeaderComponent {\n\n    constructor(private eventService: CollapsibleEventService) { }\n\n    @HostListener('click')\n    click() {\n        this.eventService.toggleCollapsibleItem();\n    }\n\n}\n","import {\n    Component,\n    OnInit, AfterContentInit,\n    Input, HostBinding, HostListener,\n    ElementRef\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { CollapsibleTableRowDetailComponent } from '../collapsible-table-row-detail/collapsible-table-row-detail.component';\nimport { CollapsibleTableComponent } from '../collapsible-table/collapsible-table.component';\nimport { CollapsibleService } from '../services/collapsible.service';\n\n@Component({\n    selector: 'collapsible-table-row',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: table-row;\n            transition-property: background-color, color;\n        }\n    `],\n})\nexport class CollapsibleTableRowComponent implements OnInit, AfterContentInit {\n\n    private static EASE_OUT_QUAD = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n\n    public static DEFAULT_STRIPED_ODD_ROW_COLOR = 'rgba(242,242,242,0.8)';\n    public static DEFAULT_STRIPED_EVEN_ROW_COLOR = 'transparent';\n    public static DEFAULT_HIGHLIGHT_ROW_COLOR = 'rgba(222,222,222, 0.8)';\n    public static DEFAULT_ACTIVE_ROW_COLOR = 'rgba(212,212,212, 0.8)';\n    public static DEFAULT_SELECTED_ROW_COLOR = 'rgba(212,212,212, 0.8)';\n\n    public static DEFAULT_ROW_TEXT_COLOR = 'black';\n\n    @Input() detail: CollapsibleTableRowDetailComponent;\n\n    @HostBinding('style.color') rowTextColor: string;\n\n    @HostBinding('style.background-color') rowBackgroundColor: string;\n\n    @HostBinding('style.transition-duration') backgroundTransitionDuration = '0.3s';\n    // transition-timing-function: easeInQuad\n    @HostBinding('style.transition-timing-function')\n    backgroundTransitionTimingFunction = this.sanitizer\n        .bypassSecurityTrustStyle(CollapsibleTableRowComponent.EASE_OUT_QUAD);\n\n    @HostBinding('class.selected') selected: boolean;\n\n    isHeadRow = false;\n    isBodyRow = false;\n    isOddRow = false;\n    isEvenRow = false;\n    isParentStriped = false;\n    isParentHighlight = false;\n    parentAllowsSelect = false;\n    parentAllowsSelectMultipleRows = false;\n\n    parentStripedRowBackgroundColor: string;\n    parentStripedRowTextColor: string;\n    parentHighlightRowBackgroundColor: string;\n    parentHighlightRowTextColor: string;\n    activeRowBackgroundColor: string;\n    activeRowTextColor: string;\n    selectedRowBackgroundColor: string;\n    selectedRowTextColor: string;\n    parentAllowsDeselectingRows = false;\n\n    index: number;\n\n    private parentCollapsibleTable: CollapsibleTableComponent;\n    private prevSelectedRows: Array<number>;\n    private dragSelection = false;\n\n    constructor(\n        private el: ElementRef,\n        private sanitizer: DomSanitizer,\n        private collapsibleService: CollapsibleService) { }\n\n    ngOnInit() {\n        const elem: Element = this.el.nativeElement;\n        const tbody: Element = elem.parentElement;\n        if (tbody.tagName === 'TBODY') {\n            const collapsibleTableRows: NodeListOf<Element> = tbody.querySelectorAll('collapsible-table-row');\n            for (let i = 0; i < collapsibleTableRows.length; i++) {\n                const collapsibleTableRow: Element = collapsibleTableRows[i];\n                if (collapsibleTableRow === elem) {\n                    this.index = i + 1;\n                    break;\n                }\n            }\n        }\n\n        // retrieve parent CollapsibleTableComponent through the CollapsibleService\n        this.parentCollapsibleTable = this.collapsibleService.getCollapsibleTable();\n\n        if (this.parentCollapsibleTable != null) {\n            // check if collapsible-table is marked to show striped table\n            this.isParentStriped = this.parentCollapsibleTable.striped;\n\n            // check if collapsible-table is marked to highlight current row\n            this.isParentHighlight = this.parentCollapsibleTable.highlight;\n            this.parentHighlightRowBackgroundColor = this.parentCollapsibleTable.highlightColor ||\n                CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;\n            this.parentHighlightRowTextColor = this.parentCollapsibleTable.highlightTextColor ||\n                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n\n            // check if collapsible-table specifies the active row color\n            this.activeRowBackgroundColor = this.parentCollapsibleTable.activeColor ||\n                CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;\n            this.activeRowTextColor = this.parentCollapsibleTable.activeTextColor ||\n                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n\n            // check if collapsible-table allows selecting rows\n            this.parentAllowsSelect = this.parentCollapsibleTable.select;\n            this.parentAllowsSelectMultipleRows = this.parentCollapsibleTable.selectMultipleRows;\n\n            // check if collapsible-table specifies a color for the selected row\n            this.selectedRowBackgroundColor = this.parentCollapsibleTable.selectColor ||\n                CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;\n            this.selectedRowTextColor = this.parentCollapsibleTable.selectTextColor ||\n                CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n\n            // check if collapsible-table allows to deselect rows\n            this.parentAllowsDeselectingRows = this.parentCollapsibleTable.allowDeselectingRows != null ?\n                this.parentCollapsibleTable.allowDeselectingRows : false;\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this.updateRow();\n    }\n\n    updateRow(): void {\n        const elem: Element = this.el.nativeElement;\n\n        // determine if the row is inside the 'thead'\n        const th = elem.querySelector('th');\n        if (th != null) {\n            this.isHeadRow = true;\n        }\n\n        // determine if the row is inside the 'tbody'\n        const td = elem.querySelector('td');\n        if (td != null) {\n            this.isBodyRow = true;\n            // determine if the row is 'odd' or 'event'\n            if (this.index % 2 === 0) {\n                this.isEvenRow = true;\n                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedEvenColor ||\n                    CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;\n                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedEvenTextColor ||\n                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n            } else {\n                this.isOddRow = true;\n                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedOddColor ||\n                    CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;\n                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedOddTextColor ||\n                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n            }\n\n            switch (true) {\n                case this.parentAllowsSelect && this.selected:\n                    this.rowBackgroundColor = this.selectedRowBackgroundColor;\n                    this.rowTextColor = this.selectedRowTextColor;\n                    break;\n                case this.isParentStriped:\n                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;\n                    this.rowTextColor = this.parentStripedRowTextColor;\n                    break;\n            }\n\n        }\n    }\n\n    getHeight(): number {\n        return this.el.nativeElement.offsetHeight;\n    }\n\n    private isLeftMouseButton(event: MouseEvent): boolean {\n        const button: number = event.button;\n        const which: number = event['which'];\n        const target = <HTMLElement>(event.target || event.srcElement || event.currentTarget);\n\n        if (['TR', 'TD'].indexOf(target.tagName) > -1) {\n            if ('button' in event) {\n                return button === 0;\n            } else {\n                return (which || button) === 1;\n            }\n        }\n\n        return false;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    mousedown(event: MouseEvent) {\n        // handle only if the Left mouse button pressed\n        // and the row is a body row\n        if (this.isLeftMouseButton(event) && this.isBodyRow) {\n            if (this.parentCollapsibleTable.noTextSelect) {\n                event.preventDefault();\n            }\n            if (this.isBodyRow) {\n                if (this.parentAllowsSelect && !this.parentAllowsDeselectingRows) {\n                    this.prevSelectedRows = this.parentCollapsibleTable.selectedRows;\n                    this.parentCollapsibleTable.clearSelectedRows();\n                    this.parentCollapsibleTable.deselectAllRows();\n                }\n                this.rowBackgroundColor = this.activeRowBackgroundColor;\n                this.rowTextColor = this.activeRowTextColor;\n            }\n        }\n    }\n\n    @HostListener('mouseup', ['$event'])\n    mouseup(event: MouseEvent) {\n        // handle only if the Left mouse button pressed\n        // and the row is a body row\n        if (this.isLeftMouseButton(event) && this.isBodyRow) {\n            // handle selection\n            if (this.parentAllowsSelect) {\n                if (!this.parentAllowsDeselectingRows) {\n                    this.parentCollapsibleTable.selectRow(this.index);\n                } else {\n                    if (!this.dragSelection) {\n                        this.parentCollapsibleTable.toggleRowSelection(this.index);\n                    }\n                }\n            }\n\n            // check row state\n            this.parentCollapsibleTable.updateTable();\n            /*switch (true) {\n                // parent allows selecting rows and the row is selected\n                case this.parentAllowsSelect && this.selected:\n                    this.rowBackgroundColor = this.selectedRowBackgroundColor;\n                    this.rowTextColor = this.selectedRowTextColor;\n                    this.parentCollapsibleTable.updateTable();\n                    break;\n                // highlighted\n                case this.isParentHighlight:\n                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;\n                    this.rowTextColor = this.parentHighlightRowTextColor;\n                    break;\n                // striped\n                case this.isParentStriped:\n                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;\n                    this.rowTextColor = this.parentStripedRowTextColor;\n                    break;\n                default:\n                    this.rowBackgroundColor = undefined;\n                    this.rowTextColor = undefined;\n                    break;\n            }*/\n\n            // select multiple rows using the 'Shift' key\n            if (this.parentAllowsSelect &&\n                this.parentAllowsSelectMultipleRows &&\n                event != null && event.shiftKey) {\n                if (this.prevSelectedRows != null &&\n                    this.prevSelectedRows.length > 0 &&\n                    this.parentCollapsibleTable.selectedRows.length > 0) {\n                    const rangeSelectedRows = this.prevSelectedRows.concat(this.parentCollapsibleTable.selectedRows);\n                    rangeSelectedRows.sort((a, b) => a - b);\n                    const firstRowIndex = Math.min.apply(null, rangeSelectedRows);\n                    const lastRowIndex = Math.max.apply(null, rangeSelectedRows);\n\n                    this.parentCollapsibleTable.selectRows(firstRowIndex, lastRowIndex);\n                }\n            }\n\n            // set dragSelection flag to false. Prevents selection drag behavior\n            this.dragSelection = false;\n\n            // focus the collapsible table\n            this.parentCollapsibleTable.focus();\n        }\n    }\n\n    @HostListener('mouseenter', ['$event'])\n    mouseenter(event: MouseEvent) {\n        // handle only if the row is a body row\n        if (this.isBodyRow) {\n            switch (true) {\n                // the use is trying to select multiple rows by holding a mouse button\n                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:\n                    this.parentCollapsibleTable.selectRow(this.index);\n                    this.dragSelection = true;\n                    break;\n                // parent allows selecting rows and the row is selected\n                case this.parentAllowsSelect && this.selected:\n                    break;\n                // highlighted\n                case this.isParentHighlight:\n                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;\n                    this.rowTextColor = this.parentHighlightRowTextColor;\n                    break;\n            }\n        }\n    }\n\n    @HostListener('mouseleave', ['$event'])\n    mouseleave(event: MouseEvent) {\n        // handle only if the row is a body row\n        if (this.isBodyRow) {\n            // check row state\n            switch (true) {\n                // the use is trying to select multiple rows by holding a mouse button\n                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:\n                    this.parentCollapsibleTable.selectRow(this.index);\n                    this.dragSelection = false;\n                    break;\n                // parent allows selecting rows and the row is selected\n                case this.parentAllowsSelect && this.selected:\n                    break;\n                // stripped\n                case this.isParentStriped:\n                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;\n                    this.rowTextColor = this.parentStripedRowTextColor;\n                    break;\n                default:\n                    this.rowBackgroundColor = undefined;\n                    this.rowTextColor = undefined;\n                    break;\n            }\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    click(event: MouseEvent) {\n        if (this.detail != null) {\n            const target = <HTMLElement>(event.target || event.srcElement || event.currentTarget);\n\n            if (target != null && ['TR', 'TD'].indexOf(target.tagName) > -1) {\n                this.detail.subject.next();\n            }\n        }\n    }\n\n}\n","import {\n    Component,\n    OnInit, OnChanges, SimpleChanges, AfterContentInit,\n    Input, HostBinding, HostListener,\n    ElementRef, ContentChildren\n} from '@angular/core';\n\nimport { CollapsibleTableRowComponent } from '../collapsible-table-row/collapsible-table-row.component';\nimport { CollapsibleService } from '../services/collapsible.service';\n\n@Component({\n    selector: 'collapsible-table',\n    template: `<ng-content></ng-content>`,\n    styles: [`\n        :host {\n            display: table;\n            position: relative;\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        :host thead {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host /deep/ tbody /deep/ collapsible-table-row {\n            cursor: pointer;\n        }\n\n        :host /deep/ collapsible-table-row th,\n        :host /deep/ collapsible-table-row td {\n            border-radius: 0;\n        }\n\n        :host[bordered='true'] {\n            border-top: 1px solid #d0d0d0;\n            border-right: 1px solid #d0d0d0;\n            border-left: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row,\n        :host[borderedHorizontally='true'] /deep/ collapsible-table-row {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row th,\n        :host[bordered='true'] /deep/ collapsible-table-row td,\n        :host[borderedVertically='true'] /deep/ collapsible-table-row th:not(:last-child),\n        :host[borderedVertically='true'] /deep/ collapsible-table-row td:not(:last-child) {\n            border-right: 1px solid #d0d0d0;\n        }\n\n        :host(.centered) /deep/ * {\n            text-align: center;\n        }\n\n        :host(.noTextSelect) /deep/ collapsible-table-row th,\n        :host(.noTextSelect) /deep/ collapsible-table-row td {\n            user-select: none;\n        }\n    `],\n    providers: [\n        CollapsibleService\n    ]\n})\nexport class CollapsibleTableComponent implements OnInit, OnChanges, AfterContentInit {\n    // component options\n    //\n    // makes the table bordered\n    @Input()\n    @HostBinding('attr.bordered') bordered: boolean;\n\n    // makes the table bordered horizontally only\n    @Input()\n    @HostBinding('attr.borderedHorizontally') borderedHorizontally: boolean;\n\n    // makes the table bordered vertically only\n    @Input()\n    @HostBinding('attr.borderedVertically') borderedVertically: boolean;\n\n    // makes the table striped\n    @Input()\n    @HostBinding('attr.striped') striped: boolean;\n\n    // a color of an odd striped row\n    @Input()\n    @HostBinding('attr.stripedOddColor') stripedOddColor: string;\n\n    // a text color of an odd striped row\n    @Input()\n    @HostBinding('attr.stripedOddTextColor') stripedOddTextColor: string;\n\n    // a color of an even striped row\n    @Input()\n    @HostBinding('attr.stripedEvenColor') stripedEvenColor: string;\n\n    // a text color of an even striped row\n    @Input()\n    @HostBinding('attr.stripedEvenTextColor') stripedEvenTextColor: string;\n\n    // highlight table rows on mouse hover\n    @Input()\n    @HostBinding('attr.highlight') highlight: boolean;\n\n    // a color of a highlighted row\n    @Input()\n    @HostBinding('attr.highlightColor') highlightColor: string;\n\n    // a text color of a highlighted row\n    @Input()\n    @HostBinding('attr.highlightTextColor') highlightTextColor: string;\n\n    // a color of an active row\n    @Input()\n    @HostBinding('attr.activeColor') activeColor: string;\n\n    // a text color of an active row\n    @Input()\n    @HostBinding('attr.activeTextColor') activeTextColor: string;\n\n    // center align all the text in the table\n    @Input()\n    @HostBinding('class.centered')\n    @HostBinding('attr.centered') centered: boolean;\n\n    // makes the table horizontally scrollable on smaller screen widths\n    @Input()\n    @HostBinding('attr.responsive') responsive: boolean;\n\n    // allows to select rows\n    @Input()\n    @HostBinding('attr.select') select: boolean;\n\n    // allows to select multiple rows\n    @Input()\n    @HostBinding('attr.selectMultipleRows') selectMultipleRows: boolean;\n\n    // a color of a selected row\n    @Input()\n    @HostBinding('attr.selectColor') selectColor: string;\n\n    // a text color of a selected row\n    @Input()\n    @HostBinding('attr.selectTextColor') selectTextColor: string;\n\n    // allows deselecting selected rows\n    @Input()\n    @HostBinding('attr.allowDeselectingRows') allowDeselectingRows: boolean;\n\n    // allows navigation between table rows using arrow keys\n    @Input()\n    @HostBinding('attr.allowKeyboardNavigation')\n    allowKeyboardNavigation = true;\n\n    // disables user select withing the table\n    @Input()\n    @HostBinding('class.noTextSelect')\n    @HostBinding('attr.noTextSelect') noTextSelect: boolean;\n\n    fixedTableHeight = 'auto';\n\n    @HostBinding('attr.tabindex') tabindex = 0;\n\n    selectedRows: Array<number> = [];\n\n    // specifies collapsible type. Can be either 'accordion' or 'expandable'\n    @Input()\n    @HostBinding('attr.type') type: 'accordion' | 'expandable' = 'accordion';\n\n    @ContentChildren(CollapsibleTableRowComponent) collapsibleTableRows: Array<CollapsibleTableRowComponent>;\n\n    mouseDownHold = false;\n\n    constructor(\n        private el: ElementRef,\n        private collapsibleService: CollapsibleService) { }\n\n    ngOnInit() {\n    }\n\n    ngAfterContentInit() {\n        // this.updateFixedTableHeight();\n        /*\n        LOG(`CollapsibleTableComponent::ngOnInit()\\n` +\n            `this = {\\n` +\n            `bordered = ${this.bordered}\\n` +\n            `borderedHorizontally = ${this.borderedHorizontally}\\n` +\n            `borderedVertically = ${this.borderedVertically}\\n` +\n            `striped = ${this.striped}\\n` +\n            `stripedOddColor = ${this.stripedOddColor}\\n` +\n            `stripedEvenColor = ${this.stripedEvenColor}\\n` +\n            `highlight = ${this.highlight}\\n` +\n            `highlightColor = ${this.highlightColor}\\n` +\n            `highlightTextColor = ${this.highlightTextColor}\\n` +\n            `activeColor = ${this.activeColor}\\n` +\n            `activeTextColor = ${this.activeTextColor}\\n` +\n            `centered = ${this.centered}\\n` +\n            `responsive = ${this.responsive}\\n` +\n            `select = ${this.select}\\n` +\n            `selectColor = ${this.selectColor}\\n` +\n            `selectTextColor = ${this.selectTextColor}\\n` +\n            `selectMultipleRows = ${this.selectMultipleRows}\\n` +\n            `noTextSelect = ${this.noTextSelect}\\n` +\n            `}`);\n            */\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                if (this.collapsibleTableRows != null) {\n                    switch (change) {\n                        case 'striped':\n                        case 'stripedOddColor':\n                        case 'stripedOddTextColor':\n                        case 'stripedEvenColor':\n                        case 'stripedEvenTextColor':\n                            this.updateTable('striped');\n                            break;\n                        case 'highlight':\n                        case 'highlightColor':\n                        case 'highlightTextColor':\n                            this.updateTable('highlight');\n                            break;\n                        case 'activeColor':\n                        case 'activeTextColor':\n                            this.updateTable('active');\n                            break;\n                        case 'select':\n                        case 'selectColor':\n                        case 'selectTextColor':\n                        case 'selectMultipleRows':\n                        case 'allowDeselectingRows':\n                            this.updateTable('select');\n                            break;\n                    }\n                }\n\n                // update collapsible table type in CollapsibleService\n                if (change === 'type') {\n                    this.type = changes.type.currentValue;\n                    this.collapsibleService.setType(this.type);\n                }\n            }\n        }\n        this.collapsibleService.setCollapsibleTable(this);\n    }\n\n    focus() {\n        this.el.nativeElement.focus();\n    }\n\n    addSelectedRow(index: number): void {\n        switch (true) {\n            case this.selectMultipleRows && this.selectedRows.indexOf(index) === -1:\n                this.selectedRows.push(index);\n                this.selectedRows.sort((a, b) => a - b);\n                break;\n            case !this.selectMultipleRows:\n                this.selectedRows = [];\n                this.deselectAllRows();\n                this.selectedRows.push(index);\n                this.selectedRows.sort((a, b) => a - b);\n                break;\n        }\n    }\n\n    removeSelectedRow(index: number): void {\n        if (this.selectedRows.indexOf(index) !== -1) {\n            this.selectedRows.splice(this.selectedRows.indexOf(index), 1);\n        }\n    }\n\n    clearSelectedRows() {\n        this.selectedRows = [];\n    }\n\n    deselectAllRows() {\n        this.collapsibleTableRows.forEach(row => {\n            row.selected = false;\n            row.updateRow();\n        });\n    }\n\n    selectRow(index: number) {\n        if (this.select) {\n            switch (true) {\n                case index === 0:\n                    this.selectRow(1);\n                    break;\n                case index === this.collapsibleTableRows.length:\n                    this.selectRow(this.collapsibleTableRows.length - 1);\n                    break;\n                case 0 < index && index <= this.collapsibleTableRows.length - 1:\n                    this.addSelectedRow(index);\n                    this.collapsibleTableRows.forEach((row, i) => {\n                        if (index !== i) {\n                            if (!this.selectMultipleRows) {\n                                row.selected = false;\n                            }\n                        } else {\n                            row.selected = true;\n                        }\n                        row.updateRow();\n                    });\n                    break;\n            }\n        }\n\n    }\n\n    selectRows(firstRowIndex: number, lastRowIndex: number) {\n        if (this.selectMultipleRows &&\n            0 < firstRowIndex && firstRowIndex < lastRowIndex &&\n            lastRowIndex <= this.collapsibleTableRows.length - 1) {\n            this.clearSelectedRows();\n            this.collapsibleTableRows.forEach((row, i) => {\n                if (firstRowIndex <= i && i <= lastRowIndex) {\n                    this.addSelectedRow(i);\n                    row.selected = true;\n                } else {\n                    row.selected = false;\n                }\n                row.updateRow();\n            });\n        }\n    }\n\n    toggleRowSelection(index: number) {\n        if (this.select &&\n            0 < index && index <= this.collapsibleTableRows.length - 1) {\n            this.collapsibleTableRows.forEach((row, i) => {\n                if (index === i) {\n                    if (row.selected) {\n                        this.removeSelectedRow(index);\n                    } else {\n                        this.addSelectedRow(index);\n                    }\n                    row.selected = !row.selected;\n                    row.updateRow();\n                }\n            });\n        }\n    }\n\n    /*updateFixedTableHeight() {\n        this.fixedTableHeight = this.el.nativeElement.offsetHeight + 'px';\n        let elem: Element = this.el.nativeElement;\n        let rowHeights = 0;\n        if (this.collapsibleTableRowComponent != null) {\n            this.collapsibleTableRowComponent.forEach(row => {\n            });\n        }\n    }*/\n\n    updateStriped(row: CollapsibleTableRowComponent): void {\n        if (this.striped && row.isBodyRow) {\n            row.isParentStriped = true;\n            if (row.isOddRow) {\n                row.parentStripedRowBackgroundColor = this.stripedOddColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;\n                row.parentStripedRowTextColor = this.stripedOddTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;\n                row.rowTextColor = row.parentStripedRowTextColor;\n            } else {\n                row.parentStripedRowBackgroundColor = this.stripedEvenColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;\n                row.parentStripedRowTextColor = this.stripedEvenTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;\n                row.rowTextColor = row.parentStripedRowTextColor;\n            }\n        } else {\n            row.isParentStriped = false;\n            row.rowBackgroundColor = undefined;\n            row.rowTextColor = undefined;\n        }\n    }\n\n    updateHighlight(row: CollapsibleTableRowComponent): void {\n        row.isParentHighlight = this.highlight;\n        row.parentHighlightRowBackgroundColor = this.highlightColor || CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;\n        row.parentHighlightRowTextColor = this.highlightTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n    }\n\n    updateActive(row: CollapsibleTableRowComponent): void {\n        row.activeRowBackgroundColor = this.activeColor || CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;\n        row.activeRowTextColor = this.activeTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n    }\n\n    updateSelect(row: CollapsibleTableRowComponent): void {\n        row.parentAllowsSelect = this.select;\n        row.parentAllowsSelectMultipleRows = this.selectMultipleRows;\n        row.parentAllowsDeselectingRows = this.allowDeselectingRows;\n        if (row.selected) {\n            row.selectedRowBackgroundColor = this.selectColor || CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;\n            row.selectedRowTextColor = this.selectTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;\n            row.rowBackgroundColor = row.selectedRowBackgroundColor;\n            row.rowTextColor = row.selectedRowTextColor;\n        }\n    }\n\n    updateTable(change?: string): void {\n        if (this.collapsibleTableRows != null) {\n            if (change != null) {\n                switch (change) {\n                    case 'striped':\n                        // propagate changes to each of the CollapsibleTableRowComponent children\n                        this.collapsibleTableRows.forEach(row => { this.updateStriped(row); });\n                        break;\n                    case 'highlight':\n                        this.collapsibleTableRows.forEach(row => { this.updateHighlight(row); });\n                        break;\n                    case 'active':\n                        this.collapsibleTableRows.forEach(row => { this.updateActive(row); });\n                        break;\n                    case 'select':\n                        this.collapsibleTableRows.forEach(row => { this.updateSelect(row); });\n                        break;\n                }\n            } else {\n                // propagate changes to each of the CollapsibleTableRowComponent children\n                this.collapsibleTableRows.forEach(row => {\n                    this.updateStriped(row);\n                    this.updateHighlight(row);\n                    this.updateSelect(row);\n                    this.updateActive(row);\n                });\n            }\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydown(event: KeyboardEvent) {\n        // select a row only if 'select' property is set to 'true'\n        if (this.select && this.allowKeyboardNavigation) {\n            enum Key {\n                arrowUp = 38,\n                arrowDown = 40,\n                home = 36,\n                end = 35\n            }\n\n            let index = 1;\n            const whichKey = event['which'];\n            if (Key[whichKey] != null) {\n\n                event.preventDefault();\n                event.stopPropagation();\n\n                switch (whichKey) {\n                    case Key.arrowUp:\n                        // select previous row\n                        if (this.selectedRows.length > 0) {\n                            index = this.selectedRows[this.selectedRows.length - 1];\n                            index--;\n                        }\n                        break;\n                    case Key.arrowDown:\n                        // select next row\n                        if (this.selectedRows.length > 0) {\n                            index = this.selectedRows[this.selectedRows.length - 1];\n                            index++;\n                        }\n                        break;\n                    case Key.home:\n                        index = 1;\n                        break;\n                    case Key.end:\n                        index = this.collapsibleTableRows.length - 1;\n                        break;\n                }\n\n                this.clearSelectedRows();\n                this.deselectAllRows();\n                this.selectRow(index);\n                this.updateTable();\n            }\n        }\n    }\n\n    @HostListener('mousedown')\n    mousedown() {\n        this.mouseDownHold = true;\n    }\n\n    @HostListener('mouseup')\n    mouseup() {\n        this.mouseDownHold = false;\n    }\n}\n","import {\n    Component,\n    OnInit, AfterViewInit,\n    Input,\n    ViewChildren\n} from '@angular/core';\n\nimport { CollapsibleBodyComponent } from '../collapsible-body/collapsible-body.component';\n\nimport { CollapsibleService } from '../services/collapsible.service';\n\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'collapsible-table-row-detail',\n    template: `\n        <td colspan=\"100%\">\n            <collapsible-list-item>\n                <collapsible-body>\n                    <ng-content></ng-content>\n                </collapsible-body>\n            </collapsible-list-item>\n        </td>\n    `,\n    styles: [`\n        :host {\n            display: table-row;\n        }\n\n        :host collapsible-body,\n        :host td {\n            padding: 0;\n        }\n    `]\n})\nexport class CollapsibleTableRowDetailComponent implements OnInit, AfterViewInit {\n    subject: Subject<any> = new Subject<any>();\n\n    @Input() expanded: boolean;\n\n    @ViewChildren(CollapsibleBodyComponent) viewListBodies: Array<CollapsibleBodyComponent>;\n\n    constructor(private collapsibleService: CollapsibleService) { }\n\n    ngOnInit() {\n        this.subject.asObservable().subscribe(() => {\n            this.viewListBodies.forEach((item) => {\n                item.toggleCollapsibleItem();\n            });\n        });\n    }\n\n    ngAfterViewInit() {\n        // store list bodies in 'CollapsibleService'\n        this.viewListBodies.forEach((item) => {\n            this.collapsibleService.addListBody(item);\n        });\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CollapsibleListComponent } from './collapsible-list/collapsible-list.component';\nimport { CollapsibleListItemComponent } from './collapsible-list-item/collapsible-list-item.component';\nimport { CollapsibleHeaderComponent } from './collapsible-header/collapsible-header.component';\nimport { CollapsibleBodyComponent } from './collapsible-body/collapsible-body.component';\n\nimport { CollapsibleTableComponent } from './collapsible-table/collapsible-table.component';\nimport { CollapsibleTableRowComponent } from './collapsible-table-row/collapsible-table-row.component';\nimport { CollapsibleTableRowDetailComponent } from './collapsible-table-row-detail/collapsible-table-row-detail.component';\n\nimport { CollapsibleService } from './services/collapsible.service';\nimport { CollapsibleEventService } from './services/collapsible-event.service';\nimport { CollapsibleAnimationsService } from './services/collapsible-animations.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    CollapsibleListComponent,\n    CollapsibleListItemComponent,\n    CollapsibleHeaderComponent,\n    CollapsibleBodyComponent,\n    CollapsibleTableComponent,\n    CollapsibleTableRowComponent,\n    CollapsibleTableRowDetailComponent\n  ],\n  exports: [\n    CollapsibleListComponent,\n    CollapsibleListItemComponent,\n    CollapsibleHeaderComponent,\n    CollapsibleBodyComponent,\n    CollapsibleTableComponent,\n    CollapsibleTableRowComponent,\n    CollapsibleTableRowDetailComponent\n  ],\n  providers: [\n    CollapsibleService,\n    CollapsibleEventService,\n    CollapsibleAnimationsService\n  ]\n})\nexport class CollapsibleModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CollapsibleModule,\n      providers: [CollapsibleModule]\n    };\n  }\n}\n"],"names":["Injectable","Subject","trigger","state","style","transition","animate","EventEmitter","tslib_1.__values","Component","ElementRef","HostBinding","Input","Output","ContentChildren","HostListener","DomSanitizer","ViewChildren","NgModule","CommonModule"],"mappings":"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"}
