(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/animations'), require('@angular/platform-browser'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular2-collapsible', ['exports', '@angular/core', 'rxjs', '@angular/animations', '@angular/platform-browser', '@angular/common'], factory) :
    (factory((global['angular2-collapsible'] = {}),global.ng.core,global.rxjs,global.ng.animations,global.ng.platformBrowser,global.ng.common));
}(this, (function (exports,core,rxjs,animations,platformBrowser,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleService = /** @class */ (function () {
        function CollapsibleService() {
            this.headers = new Array();
            this.bodies = new Array();
        }
        /**
         * @return {?}
         */
        CollapsibleService.prototype.getType = /**
         * @return {?}
         */
            function () {
                return this.type;
            };
        /**
         * @param {?} type
         * @return {?}
         */
        CollapsibleService.prototype.setType = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                this.type = type;
            };
        /**
         * @return {?}
         */
        CollapsibleService.prototype.getCollapsibleTable = /**
         * @return {?}
         */
            function () {
                return this.collapsibleTable;
            };
        /**
         * @param {?} table
         * @return {?}
         */
        CollapsibleService.prototype.setCollapsibleTable = /**
         * @param {?} table
         * @return {?}
         */
            function (table) {
                this.collapsibleTable = table;
            };
        /**
         * @param {?} header
         * @return {?}
         */
        CollapsibleService.prototype.addListHeader = /**
         * @param {?} header
         * @return {?}
         */
            function (header) {
                this.headers.push(header);
            };
        /**
         * @param {?} body
         * @return {?}
         */
        CollapsibleService.prototype.addListBody = /**
         * @param {?} body
         * @return {?}
         */
            function (body) {
                this.bodies.push(body);
            };
        /**
         * @return {?}
         */
        CollapsibleService.prototype.collapseAll = /**
         * @return {?}
         */
            function () {
                this.bodies.forEach(function (collapsibleBodyComponent) {
                    // set 'expanded' properties of all the CollapsibleBodyComponents to 'false'
                    collapsibleBodyComponent.expanded = false;
                    collapsibleBodyComponent.expandedState = collapsibleBodyComponent.expanded.toString();
                    // emit 'toggleState' event for all the CollapsibleBodyComponents
                    collapsibleBodyComponent.toggleState.emit(false);
                });
            };
        CollapsibleService.decorators = [
            { type: core.Injectable }
        ];
        return CollapsibleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleEvent = /** @class */ (function () {
        function CollapsibleEvent() {
        }
        return CollapsibleEvent;
    }());
    var CollapsibleEventService = /** @class */ (function () {
        function CollapsibleEventService() {
            this.toggleCollapsibleItemSource = new rxjs.Subject();
            // Observable string streams
            this.toggleCollapsibleItem$ = this.toggleCollapsibleItemSource.asObservable();
        }
        // Toggle collapsible item
        /**
         * @param {?=} event
         * @return {?}
         */
        CollapsibleEventService.prototype.toggleCollapsibleItem = /**
         * @param {?=} event
         * @return {?}
         */
            function (event) {
                this.toggleCollapsibleItemSource.next(event);
            };
        /**
         * @return {?}
         */
        CollapsibleEventService.prototype.unsubscribe = /**
         * @return {?}
         */
            function () {
                this.toggleCollapsibleItemSource.unsubscribe();
            };
        CollapsibleEventService.decorators = [
            { type: core.Injectable }
        ];
        return CollapsibleEventService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleAnimationsService = /** @class */ (function () {
        function CollapsibleAnimationsService() {
        }
        /**
         * @param {?} triggerName
         * @return {?}
         */
        CollapsibleAnimationsService.collapsibleBodyAnimations = /**
         * @param {?} triggerName
         * @return {?}
         */
            function (triggerName) {
                return [
                    animations.trigger(triggerName, [
                        animations.state('*', animations.style({
                            height: 0,
                            paddingTop: 0,
                            paddingBottom: 0,
                            borderBottom: 'none',
                            boxShadow: 'none',
                            overflow: 'hidden'
                        })),
                        animations.state('true', animations.style({
                            boxShadow: 'inset 0 4px 4px -2px rgb(208, 208, 208), inset 0 -3px 2px -1px rgb(208, 208, 208)',
                            overflow: 'inherit'
                        })),
                        animations.transition('* => true', animations.animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                            CollapsibleAnimationsService.easeInQuad)),
                        animations.transition('* => false', animations.animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                            CollapsibleAnimationsService.easeOutQuad))
                    ])
                ];
            };
        CollapsibleAnimationsService.collapsibleBodyAnimationDuration = '0.2s';
        CollapsibleAnimationsService.easeInQuad = 'cubic-bezier(0.55, 0.085, 0.68, 0.53)';
        CollapsibleAnimationsService.easeOutQuad = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        CollapsibleAnimationsService.collapsibleTableRowAnimationDuration = '0.2s';
        CollapsibleAnimationsService.decorators = [
            { type: core.Injectable }
        ];
        return CollapsibleAnimationsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleBodyComponent = /** @class */ (function () {
        function CollapsibleBodyComponent(el, collapsibleService, eventService) {
            this.el = el;
            this.collapsibleService = collapsibleService;
            this.eventService = eventService;
            this.toggleState = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        CollapsibleBodyComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.eventService.toggleCollapsibleItem$.subscribe(function () {
                    _this.toggleCollapsibleItem();
                });
            };
        /**
         * @return {?}
         */
        CollapsibleBodyComponent.prototype.hasContent = /**
         * @return {?}
         */
            function () {
                var e_1, _a;
                try {
                    for (var _b = __values(this.el.nativeElement.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        if (( /** @type {?} */(child)).tagName != null) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
            };
        /**
         * @return {?}
         */
        CollapsibleBodyComponent.prototype.toggleCollapsibleItem = /**
         * @return {?}
         */
            function () {
                // toggle body's state only if it has any childs
                if (this.hasContent()) {
                    if (this.collapsibleService.getType() === 'accordion') {
                        /** @type {?} */
                        var tempExpanded = this.expanded;
                        this.collapsibleService.collapseAll();
                        this.expanded = tempExpanded;
                    }
                    this.expanded = !this.expanded;
                    this.expandedState = this.expanded.toString();
                    // emit 'toggleState' event
                    this.toggleState.emit(this.expanded);
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        CollapsibleBodyComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var e_2, _a;
                if (this.hasContent()) {
                    try {
                        for (var _b = __values(Object.keys(changes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var key = _c.value;
                            if (key === 'expanded' &&
                                changes["expanded"].currentValue != null) {
                                // this.expanded = changes.expanded.currentValue;
                                this.expandedState = this.expanded.toString();
                            }
                        }
                    }
                    catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return))
                                _a.call(_b);
                        }
                        finally {
                            if (e_2)
                                throw e_2.error;
                        }
                    }
                }
            };
        // Makes sure we don't have a memory leak by destroying the
        // Subscription when our component is destroyed
        /**
         * @return {?}
         */
        CollapsibleBodyComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.eventService.unsubscribe();
            };
        CollapsibleBodyComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'collapsible-body',
                        template: "<ng-content></ng-content>",
                        animations: CollapsibleAnimationsService.collapsibleBodyAnimations('collapsibleBodyState'),
                        styles: ["\n        :host {\n            display: block;\n            border-bottom: 1px solid #ddd;\n            box-sizing: border-box;\n            padding: 2rem;\n        }\n\n        .side-nav :host {\n            padding: 0;\n        }\n\n        .side-nav :host,\n        .side-nav.fixed :host {\n            border: 0;\n            background-color: #fff;\n        }\n    "]
                    }] }
        ];
        /** @nocollapse */
        CollapsibleBodyComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: CollapsibleService },
                { type: CollapsibleEventService }
            ];
        };
        CollapsibleBodyComponent.propDecorators = {
            expandedState: [{ type: core.HostBinding, args: ['@collapsibleBodyState',] }],
            expanded: [{ type: core.Input }],
            toggleState: [{ type: core.Output }]
        };
        return CollapsibleBodyComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleListItemComponent = /** @class */ (function () {
        function CollapsibleListItemComponent(collapsibleService) {
            this.collapsibleService = collapsibleService;
        }
        /**
         * @return {?}
         */
        CollapsibleListItemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // store list bodies in 'CollapsibleService'
                this.contentListBodies.forEach(function (item) {
                    _this.collapsibleService.addListBody(item);
                });
            };
        CollapsibleListItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'collapsible-list-item',
                        template: "\n        <ng-content select=\"collapsible-header\"></ng-content>\n        <ng-content select=\"collapsible-body\"></ng-content>\n    ",
                        providers: [CollapsibleEventService]
                    }] }
        ];
        /** @nocollapse */
        CollapsibleListItemComponent.ctorParameters = function () {
            return [
                { type: CollapsibleService }
            ];
        };
        CollapsibleListItemComponent.propDecorators = {
            contentListBodies: [{ type: core.ContentChildren, args: [CollapsibleBodyComponent,] }]
        };
        return CollapsibleListItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleListComponent = /** @class */ (function () {
        function CollapsibleListComponent(collapsibleService) {
            this.collapsibleService = collapsibleService;
            // component options
            //
            // describes the type of the collapsible list: 'accordion' or 'expandable'
            this.type = 'accordion';
        }
        /**
         * @return {?}
         */
        CollapsibleListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.collapsibleService.setType(this.type);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        CollapsibleListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var change in changes) {
                    if (change === 'type') {
                        this.type = changes["type"].currentValue;
                        this.collapsibleService.setType(this.type);
                    }
                }
            };
        CollapsibleListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'collapsible-list',
                        template: "<ng-content select=\"collapsible-list-item\"></ng-content>",
                        providers: [CollapsibleService],
                        styles: ["\n    :host {\n      display: block;\n      margin: 0.5rem 0 1rem 0;\n      border-top: 1px solid #ddd;\n      border-right: 1px solid #ddd;\n      border-left: 1px solid #ddd;\n      box-shadow:\n        0 2px 2px 0 rgba(0, 0, 0, 0.14),\n        0 1px 5px 0 rgba(0, 0, 0, 0.12),\n        0 3px 1px -2px rgba(0, 0, 0, 0.2);\n    }\n\n    .side-nav :host,\n    .side-nav.fixed :host {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) > li {\n      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\n      margin: 0 24px;\n      transition: margin 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    }\n\n    .side-nav :host {\n      margin: 0;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        CollapsibleListComponent.ctorParameters = function () {
            return [
                { type: CollapsibleService }
            ];
        };
        CollapsibleListComponent.propDecorators = {
            type: [{ type: core.Input }],
            contentListItems: [{ type: core.ContentChildren, args: [CollapsibleListItemComponent,] }]
        };
        return CollapsibleListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleHeaderComponent = /** @class */ (function () {
        function CollapsibleHeaderComponent(eventService) {
            this.eventService = eventService;
        }
        /**
         * @return {?}
         */
        CollapsibleHeaderComponent.prototype.click = /**
         * @return {?}
         */
            function () {
                this.eventService.toggleCollapsibleItem();
            };
        CollapsibleHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'collapsible-header',
                        template: "<ng-content></ng-content>",
                        styles: ["\n        :host {\n            display: block;\n            cursor: pointer;\n            min-height: 3rem;\n            line-height: 3rem;\n            padding: 0 1rem;\n            background-color: #fff;\n            border-bottom: 1px solid #ddd;\n        }\n    "]
                    }] }
        ];
        /** @nocollapse */
        CollapsibleHeaderComponent.ctorParameters = function () {
            return [
                { type: CollapsibleEventService }
            ];
        };
        CollapsibleHeaderComponent.propDecorators = {
            click: [{ type: core.HostListener, args: ['click',] }]
        };
        return CollapsibleHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleTableRowComponent = /** @class */ (function () {
        function CollapsibleTableRowComponent(el, sanitizer, collapsibleService) {
            this.el = el;
            this.sanitizer = sanitizer;
            this.collapsibleService = collapsibleService;
            this.backgroundTransitionDuration = '0.3s';
            // transition-timing-function: easeInQuad
            this.backgroundTransitionTimingFunction = this.sanitizer
                .bypassSecurityTrustStyle(CollapsibleTableRowComponent.EASE_OUT_QUAD);
            this.isHeadRow = false;
            this.isBodyRow = false;
            this.isOddRow = false;
            this.isEvenRow = false;
            this.isParentStriped = false;
            this.isParentHighlight = false;
            this.parentAllowsSelect = false;
            this.parentAllowsSelectMultipleRows = false;
            this.parentAllowsDeselectingRows = false;
            this.dragSelection = false;
        }
        /**
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var elem = this.el.nativeElement;
                /** @type {?} */
                var tbody = elem.parentElement;
                if (tbody.tagName === 'TBODY') {
                    /** @type {?} */
                    var collapsibleTableRows = tbody.querySelectorAll('collapsible-table-row');
                    for (var i = 0; i < collapsibleTableRows.length; i++) {
                        /** @type {?} */
                        var collapsibleTableRow = collapsibleTableRows[i];
                        if (collapsibleTableRow === elem) {
                            this.index = i + 1;
                            break;
                        }
                    }
                }
                // retrieve parent CollapsibleTableComponent through the CollapsibleService
                this.parentCollapsibleTable = this.collapsibleService.getCollapsibleTable();
                if (this.parentCollapsibleTable != null) {
                    // check if collapsible-table is marked to show striped table
                    this.isParentStriped = this.parentCollapsibleTable.striped;
                    // check if collapsible-table is marked to highlight current row
                    this.isParentHighlight = this.parentCollapsibleTable.highlight;
                    this.parentHighlightRowBackgroundColor = this.parentCollapsibleTable.highlightColor ||
                        CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
                    this.parentHighlightRowTextColor = this.parentCollapsibleTable.highlightTextColor ||
                        CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                    // check if collapsible-table specifies the active row color
                    this.activeRowBackgroundColor = this.parentCollapsibleTable.activeColor ||
                        CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
                    this.activeRowTextColor = this.parentCollapsibleTable.activeTextColor ||
                        CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                    // check if collapsible-table allows selecting rows
                    this.parentAllowsSelect = this.parentCollapsibleTable.select;
                    this.parentAllowsSelectMultipleRows = this.parentCollapsibleTable.selectMultipleRows;
                    // check if collapsible-table specifies a color for the selected row
                    this.selectedRowBackgroundColor = this.parentCollapsibleTable.selectColor ||
                        CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
                    this.selectedRowTextColor = this.parentCollapsibleTable.selectTextColor ||
                        CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                    // check if collapsible-table allows to deselect rows
                    this.parentAllowsDeselectingRows = this.parentCollapsibleTable.allowDeselectingRows != null ?
                        this.parentCollapsibleTable.allowDeselectingRows : false;
                }
            };
        /**
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.updateRow();
            };
        /**
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.updateRow = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var elem = this.el.nativeElement;
                /** @type {?} */
                var th = elem.querySelector('th');
                if (th != null) {
                    this.isHeadRow = true;
                }
                /** @type {?} */
                var td = elem.querySelector('td');
                if (td != null) {
                    this.isBodyRow = true;
                    // determine if the row is 'odd' or 'event'
                    if (this.index % 2 === 0) {
                        this.isEvenRow = true;
                        this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedEvenColor ||
                            CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
                        this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedEvenTextColor ||
                            CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                    }
                    else {
                        this.isOddRow = true;
                        this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedOddColor ||
                            CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
                        this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedOddTextColor ||
                            CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                    }
                    switch (true) {
                        case this.parentAllowsSelect && this.selected:
                            this.rowBackgroundColor = this.selectedRowBackgroundColor;
                            this.rowTextColor = this.selectedRowTextColor;
                            break;
                        case this.isParentStriped:
                            this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                            this.rowTextColor = this.parentStripedRowTextColor;
                            break;
                    }
                }
            };
        /**
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.getHeight = /**
         * @return {?}
         */
            function () {
                return this.el.nativeElement.offsetHeight;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.isLeftMouseButton = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var button = event.button;
                /** @type {?} */
                var which = event['which'];
                /** @type {?} */
                var target = /** @type {?} */ ((event.target || event.srcElement || event.currentTarget));
                if (['TR', 'TD'].indexOf(target.tagName) > -1) {
                    if ('button' in event) {
                        return button === 0;
                    }
                    else {
                        return (which || button) === 1;
                    }
                }
                return false;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.mousedown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // handle only if the Left mouse button pressed
                // and the row is a body row
                if (this.isLeftMouseButton(event) && this.isBodyRow) {
                    if (this.parentCollapsibleTable.noTextSelect) {
                        event.preventDefault();
                    }
                    if (this.isBodyRow) {
                        if (this.parentAllowsSelect && !this.parentAllowsDeselectingRows) {
                            this.prevSelectedRows = this.parentCollapsibleTable.selectedRows;
                            this.parentCollapsibleTable.clearSelectedRows();
                            this.parentCollapsibleTable.deselectAllRows();
                        }
                        this.rowBackgroundColor = this.activeRowBackgroundColor;
                        this.rowTextColor = this.activeRowTextColor;
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.mouseup = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // handle only if the Left mouse button pressed
                // and the row is a body row
                if (this.isLeftMouseButton(event) && this.isBodyRow) {
                    // handle selection
                    if (this.parentAllowsSelect) {
                        if (!this.parentAllowsDeselectingRows) {
                            this.parentCollapsibleTable.selectRow(this.index);
                        }
                        else {
                            if (!this.dragSelection) {
                                this.parentCollapsibleTable.toggleRowSelection(this.index);
                            }
                        }
                    }
                    // check row state
                    this.parentCollapsibleTable.updateTable();
                    /*switch (true) {
                                    // parent allows selecting rows and the row is selected
                                    case this.parentAllowsSelect && this.selected:
                                        this.rowBackgroundColor = this.selectedRowBackgroundColor;
                                        this.rowTextColor = this.selectedRowTextColor;
                                        this.parentCollapsibleTable.updateTable();
                                        break;
                                    // highlighted
                                    case this.isParentHighlight:
                                        this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;
                                        this.rowTextColor = this.parentHighlightRowTextColor;
                                        break;
                                    // striped
                                    case this.isParentStriped:
                                        this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                                        this.rowTextColor = this.parentStripedRowTextColor;
                                        break;
                                    default:
                                        this.rowBackgroundColor = undefined;
                                        this.rowTextColor = undefined;
                                        break;
                                }*/
                    // select multiple rows using the 'Shift' key
                    if (this.parentAllowsSelect &&
                        this.parentAllowsSelectMultipleRows &&
                        event != null && event.shiftKey) {
                        if (this.prevSelectedRows != null &&
                            this.prevSelectedRows.length > 0 &&
                            this.parentCollapsibleTable.selectedRows.length > 0) {
                            /** @type {?} */
                            var rangeSelectedRows = this.prevSelectedRows.concat(this.parentCollapsibleTable.selectedRows);
                            rangeSelectedRows.sort(function (a, b) { return a - b; });
                            /** @type {?} */
                            var firstRowIndex = Math.min.apply(null, rangeSelectedRows);
                            /** @type {?} */
                            var lastRowIndex = Math.max.apply(null, rangeSelectedRows);
                            this.parentCollapsibleTable.selectRows(firstRowIndex, lastRowIndex);
                        }
                    }
                    // set dragSelection flag to false. Prevents selection drag behavior
                    this.dragSelection = false;
                    // focus the collapsible table
                    this.parentCollapsibleTable.focus();
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.mouseenter = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // handle only if the row is a body row
                if (this.isBodyRow) {
                    switch (true) {
                        // the use is trying to select multiple rows by holding a mouse button
                        case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:
                            this.parentCollapsibleTable.selectRow(this.index);
                            this.dragSelection = true;
                            break;
                        // parent allows selecting rows and the row is selected
                        case this.parentAllowsSelect && this.selected:
                            break;
                        // highlighted
                        case this.isParentHighlight:
                            this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;
                            this.rowTextColor = this.parentHighlightRowTextColor;
                            break;
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.mouseleave = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // handle only if the row is a body row
                if (this.isBodyRow) {
                    // check row state
                    switch (true) {
                        // the use is trying to select multiple rows by holding a mouse button
                        case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:
                            this.parentCollapsibleTable.selectRow(this.index);
                            this.dragSelection = false;
                            break;
                        // parent allows selecting rows and the row is selected
                        case this.parentAllowsSelect && this.selected:
                            break;
                        // stripped
                        case this.isParentStriped:
                            this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                            this.rowTextColor = this.parentStripedRowTextColor;
                            break;
                        default:
                            this.rowBackgroundColor = undefined;
                            this.rowTextColor = undefined;
                            break;
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CollapsibleTableRowComponent.prototype.click = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.detail != null) {
                    /** @type {?} */
                    var target = /** @type {?} */ ((event.target || event.srcElement || event.currentTarget));
                    if (target != null && ['TR', 'TD'].indexOf(target.tagName) > -1) {
                        this.detail.subject.next();
                    }
                }
            };
        CollapsibleTableRowComponent.EASE_OUT_QUAD = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR = 'rgba(242,242,242,0.8)';
        CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR = 'transparent';
        CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR = 'rgba(222,222,222, 0.8)';
        CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR = 'rgba(212,212,212, 0.8)';
        CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR = 'rgba(212,212,212, 0.8)';
        CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR = 'black';
        CollapsibleTableRowComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'collapsible-table-row',
                        template: "<ng-content></ng-content>",
                        styles: ["\n        :host {\n            display: table-row;\n            transition-property: background-color, color;\n        }\n    "]
                    }] }
        ];
        /** @nocollapse */
        CollapsibleTableRowComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: platformBrowser.DomSanitizer },
                { type: CollapsibleService }
            ];
        };
        CollapsibleTableRowComponent.propDecorators = {
            detail: [{ type: core.Input }],
            rowTextColor: [{ type: core.HostBinding, args: ['style.color',] }],
            rowBackgroundColor: [{ type: core.HostBinding, args: ['style.background-color',] }],
            backgroundTransitionDuration: [{ type: core.HostBinding, args: ['style.transition-duration',] }],
            backgroundTransitionTimingFunction: [{ type: core.HostBinding, args: ['style.transition-timing-function',] }],
            selected: [{ type: core.HostBinding, args: ['class.selected',] }],
            mousedown: [{ type: core.HostListener, args: ['mousedown', ['$event'],] }],
            mouseup: [{ type: core.HostListener, args: ['mouseup', ['$event'],] }],
            mouseenter: [{ type: core.HostListener, args: ['mouseenter', ['$event'],] }],
            mouseleave: [{ type: core.HostListener, args: ['mouseleave', ['$event'],] }],
            click: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return CollapsibleTableRowComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleTableComponent = /** @class */ (function () {
        function CollapsibleTableComponent(el, collapsibleService) {
            this.el = el;
            this.collapsibleService = collapsibleService;
            // allows navigation between table rows using arrow keys
            this.allowKeyboardNavigation = true;
            this.fixedTableHeight = 'auto';
            this.tabindex = 0;
            this.selectedRows = [];
            // specifies collapsible type. Can be either 'accordion' or 'expandable'
            this.type = 'accordion';
            this.mouseDownHold = false;
        }
        /**
         * @return {?}
         */
        CollapsibleTableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        CollapsibleTableComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                // this.updateFixedTableHeight();
                /*
                        LOG(`CollapsibleTableComponent::ngOnInit()\n` +
                            `this = {\n` +
                            `bordered = ${this.bordered}\n` +
                            `borderedHorizontally = ${this.borderedHorizontally}\n` +
                            `borderedVertically = ${this.borderedVertically}\n` +
                            `striped = ${this.striped}\n` +
                            `stripedOddColor = ${this.stripedOddColor}\n` +
                            `stripedEvenColor = ${this.stripedEvenColor}\n` +
                            `highlight = ${this.highlight}\n` +
                            `highlightColor = ${this.highlightColor}\n` +
                            `highlightTextColor = ${this.highlightTextColor}\n` +
                            `activeColor = ${this.activeColor}\n` +
                            `activeTextColor = ${this.activeTextColor}\n` +
                            `centered = ${this.centered}\n` +
                            `responsive = ${this.responsive}\n` +
                            `select = ${this.select}\n` +
                            `selectColor = ${this.selectColor}\n` +
                            `selectTextColor = ${this.selectTextColor}\n` +
                            `selectMultipleRows = ${this.selectMultipleRows}\n` +
                            `noTextSelect = ${this.noTextSelect}\n` +
                            `}`);
                            */
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        CollapsibleTableComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var change in changes) {
                    if (changes.hasOwnProperty(change)) {
                        if (this.collapsibleTableRows != null) {
                            switch (change) {
                                case 'striped':
                                case 'stripedOddColor':
                                case 'stripedOddTextColor':
                                case 'stripedEvenColor':
                                case 'stripedEvenTextColor':
                                    this.updateTable('striped');
                                    break;
                                case 'highlight':
                                case 'highlightColor':
                                case 'highlightTextColor':
                                    this.updateTable('highlight');
                                    break;
                                case 'activeColor':
                                case 'activeTextColor':
                                    this.updateTable('active');
                                    break;
                                case 'select':
                                case 'selectColor':
                                case 'selectTextColor':
                                case 'selectMultipleRows':
                                case 'allowDeselectingRows':
                                    this.updateTable('select');
                                    break;
                            }
                        }
                        // update collapsible table type in CollapsibleService
                        if (change === 'type') {
                            this.type = changes["type"].currentValue;
                            this.collapsibleService.setType(this.type);
                        }
                    }
                }
                this.collapsibleService.setCollapsibleTable(this);
            };
        /**
         * @return {?}
         */
        CollapsibleTableComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                this.el.nativeElement.focus();
            };
        /**
         * @param {?} index
         * @return {?}
         */
        CollapsibleTableComponent.prototype.addSelectedRow = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                switch (true) {
                    case this.selectMultipleRows && this.selectedRows.indexOf(index) === -1:
                        this.selectedRows.push(index);
                        this.selectedRows.sort(function (a, b) { return a - b; });
                        break;
                    case !this.selectMultipleRows:
                        this.selectedRows = [];
                        this.deselectAllRows();
                        this.selectedRows.push(index);
                        this.selectedRows.sort(function (a, b) { return a - b; });
                        break;
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        CollapsibleTableComponent.prototype.removeSelectedRow = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (this.selectedRows.indexOf(index) !== -1) {
                    this.selectedRows.splice(this.selectedRows.indexOf(index), 1);
                }
            };
        /**
         * @return {?}
         */
        CollapsibleTableComponent.prototype.clearSelectedRows = /**
         * @return {?}
         */
            function () {
                this.selectedRows = [];
            };
        /**
         * @return {?}
         */
        CollapsibleTableComponent.prototype.deselectAllRows = /**
         * @return {?}
         */
            function () {
                this.collapsibleTableRows.forEach(function (row) {
                    row.selected = false;
                    row.updateRow();
                });
            };
        /**
         * @param {?} index
         * @return {?}
         */
        CollapsibleTableComponent.prototype.selectRow = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                var _this = this;
                if (this.select) {
                    switch (true) {
                        case index === 0:
                            this.selectRow(1);
                            break;
                        case index === this.collapsibleTableRows.length:
                            this.selectRow(this.collapsibleTableRows.length - 1);
                            break;
                        case 0 < index && index <= this.collapsibleTableRows.length - 1:
                            this.addSelectedRow(index);
                            this.collapsibleTableRows.forEach(function (row, i) {
                                if (index !== i) {
                                    if (!_this.selectMultipleRows) {
                                        row.selected = false;
                                    }
                                }
                                else {
                                    row.selected = true;
                                }
                                row.updateRow();
                            });
                            break;
                    }
                }
            };
        /**
         * @param {?} firstRowIndex
         * @param {?} lastRowIndex
         * @return {?}
         */
        CollapsibleTableComponent.prototype.selectRows = /**
         * @param {?} firstRowIndex
         * @param {?} lastRowIndex
         * @return {?}
         */
            function (firstRowIndex, lastRowIndex) {
                var _this = this;
                if (this.selectMultipleRows &&
                    0 < firstRowIndex && firstRowIndex < lastRowIndex &&
                    lastRowIndex <= this.collapsibleTableRows.length - 1) {
                    this.clearSelectedRows();
                    this.collapsibleTableRows.forEach(function (row, i) {
                        if (firstRowIndex <= i && i <= lastRowIndex) {
                            _this.addSelectedRow(i);
                            row.selected = true;
                        }
                        else {
                            row.selected = false;
                        }
                        row.updateRow();
                    });
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        CollapsibleTableComponent.prototype.toggleRowSelection = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                var _this = this;
                if (this.select &&
                    0 < index && index <= this.collapsibleTableRows.length - 1) {
                    this.collapsibleTableRows.forEach(function (row, i) {
                        if (index === i) {
                            if (row.selected) {
                                _this.removeSelectedRow(index);
                            }
                            else {
                                _this.addSelectedRow(index);
                            }
                            row.selected = !row.selected;
                            row.updateRow();
                        }
                    });
                }
            };
        /*updateFixedTableHeight() {
            this.fixedTableHeight = this.el.nativeElement.offsetHeight + 'px';
            let elem: Element = this.el.nativeElement;
            let rowHeights = 0;
            if (this.collapsibleTableRowComponent != null) {
                this.collapsibleTableRowComponent.forEach(row => {
                });
            }
        }*/
        /**
         * @param {?} row
         * @return {?}
         */
        CollapsibleTableComponent.prototype.updateStriped = /**
         * @param {?} row
         * @return {?}
         */
            function (row) {
                if (this.striped && row.isBodyRow) {
                    row.isParentStriped = true;
                    if (row.isOddRow) {
                        row.parentStripedRowBackgroundColor = this.stripedOddColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
                        row.parentStripedRowTextColor = this.stripedOddTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                        row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                        row.rowTextColor = row.parentStripedRowTextColor;
                    }
                    else {
                        row.parentStripedRowBackgroundColor = this.stripedEvenColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
                        row.parentStripedRowTextColor = this.stripedEvenTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                        row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                        row.rowTextColor = row.parentStripedRowTextColor;
                    }
                }
                else {
                    row.isParentStriped = false;
                    row.rowBackgroundColor = undefined;
                    row.rowTextColor = undefined;
                }
            };
        /**
         * @param {?} row
         * @return {?}
         */
        CollapsibleTableComponent.prototype.updateHighlight = /**
         * @param {?} row
         * @return {?}
         */
            function (row) {
                row.isParentHighlight = this.highlight;
                row.parentHighlightRowBackgroundColor = this.highlightColor || CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
                row.parentHighlightRowTextColor = this.highlightTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            };
        /**
         * @param {?} row
         * @return {?}
         */
        CollapsibleTableComponent.prototype.updateActive = /**
         * @param {?} row
         * @return {?}
         */
            function (row) {
                row.activeRowBackgroundColor = this.activeColor || CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
                row.activeRowTextColor = this.activeTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            };
        /**
         * @param {?} row
         * @return {?}
         */
        CollapsibleTableComponent.prototype.updateSelect = /**
         * @param {?} row
         * @return {?}
         */
            function (row) {
                row.parentAllowsSelect = this.select;
                row.parentAllowsSelectMultipleRows = this.selectMultipleRows;
                row.parentAllowsDeselectingRows = this.allowDeselectingRows;
                if (row.selected) {
                    row.selectedRowBackgroundColor = this.selectColor || CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
                    row.selectedRowTextColor = this.selectTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                    row.rowBackgroundColor = row.selectedRowBackgroundColor;
                    row.rowTextColor = row.selectedRowTextColor;
                }
            };
        /**
         * @param {?=} change
         * @return {?}
         */
        CollapsibleTableComponent.prototype.updateTable = /**
         * @param {?=} change
         * @return {?}
         */
            function (change) {
                var _this = this;
                if (this.collapsibleTableRows != null) {
                    if (change != null) {
                        switch (change) {
                            case 'striped':
                                // propagate changes to each of the CollapsibleTableRowComponent children
                                this.collapsibleTableRows.forEach(function (row) { _this.updateStriped(row); });
                                break;
                            case 'highlight':
                                this.collapsibleTableRows.forEach(function (row) { _this.updateHighlight(row); });
                                break;
                            case 'active':
                                this.collapsibleTableRows.forEach(function (row) { _this.updateActive(row); });
                                break;
                            case 'select':
                                this.collapsibleTableRows.forEach(function (row) { _this.updateSelect(row); });
                                break;
                        }
                    }
                    else {
                        // propagate changes to each of the CollapsibleTableRowComponent children
                        this.collapsibleTableRows.forEach(function (row) {
                            _this.updateStriped(row);
                            _this.updateHighlight(row);
                            _this.updateSelect(row);
                            _this.updateActive(row);
                        });
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CollapsibleTableComponent.prototype.keydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // select a row only if 'select' property is set to 'true'
                if (this.select && this.allowKeyboardNavigation) {
                    /** @enum {number} */
                    var Key = {
                        arrowUp: 38,
                        arrowDown: 40,
                        home: 36,
                        end: 35,
                    };
                    Key[Key.arrowUp] = 'arrowUp';
                    Key[Key.arrowDown] = 'arrowDown';
                    Key[Key.home] = 'home';
                    Key[Key.end] = 'end';
                    /** @type {?} */
                    var index = 1;
                    /** @type {?} */
                    var whichKey = event['which'];
                    if (Key[whichKey] != null) {
                        event.preventDefault();
                        event.stopPropagation();
                        switch (whichKey) {
                            case Key.arrowUp:
                                // select previous row
                                if (this.selectedRows.length > 0) {
                                    index = this.selectedRows[this.selectedRows.length - 1];
                                    index--;
                                }
                                break;
                            case Key.arrowDown:
                                // select next row
                                if (this.selectedRows.length > 0) {
                                    index = this.selectedRows[this.selectedRows.length - 1];
                                    index++;
                                }
                                break;
                            case Key.home:
                                index = 1;
                                break;
                            case Key.end:
                                index = this.collapsibleTableRows.length - 1;
                                break;
                        }
                        this.clearSelectedRows();
                        this.deselectAllRows();
                        this.selectRow(index);
                        this.updateTable();
                    }
                }
            };
        /**
         * @return {?}
         */
        CollapsibleTableComponent.prototype.mousedown = /**
         * @return {?}
         */
            function () {
                this.mouseDownHold = true;
            };
        /**
         * @return {?}
         */
        CollapsibleTableComponent.prototype.mouseup = /**
         * @return {?}
         */
            function () {
                this.mouseDownHold = false;
            };
        CollapsibleTableComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'collapsible-table',
                        template: "<ng-content></ng-content>",
                        providers: [
                            CollapsibleService
                        ],
                        styles: ["\n        :host {\n            display: table;\n            position: relative;\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        :host thead {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host /deep/ tbody /deep/ collapsible-table-row {\n            cursor: pointer;\n        }\n\n        :host /deep/ collapsible-table-row th,\n        :host /deep/ collapsible-table-row td {\n            border-radius: 0;\n        }\n\n        :host[bordered='true'] {\n            border-top: 1px solid #d0d0d0;\n            border-right: 1px solid #d0d0d0;\n            border-left: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row,\n        :host[borderedHorizontally='true'] /deep/ collapsible-table-row {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row th,\n        :host[bordered='true'] /deep/ collapsible-table-row td,\n        :host[borderedVertically='true'] /deep/ collapsible-table-row th:not(:last-child),\n        :host[borderedVertically='true'] /deep/ collapsible-table-row td:not(:last-child) {\n            border-right: 1px solid #d0d0d0;\n        }\n\n        :host(.centered) /deep/ * {\n            text-align: center;\n        }\n\n        :host(.noTextSelect) /deep/ collapsible-table-row th,\n        :host(.noTextSelect) /deep/ collapsible-table-row td {\n            user-select: none;\n        }\n    "]
                    }] }
        ];
        /** @nocollapse */
        CollapsibleTableComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: CollapsibleService }
            ];
        };
        CollapsibleTableComponent.propDecorators = {
            bordered: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.bordered',] }],
            borderedHorizontally: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.borderedHorizontally',] }],
            borderedVertically: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.borderedVertically',] }],
            striped: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.striped',] }],
            stripedOddColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.stripedOddColor',] }],
            stripedOddTextColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.stripedOddTextColor',] }],
            stripedEvenColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.stripedEvenColor',] }],
            stripedEvenTextColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.stripedEvenTextColor',] }],
            highlight: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.highlight',] }],
            highlightColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.highlightColor',] }],
            highlightTextColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.highlightTextColor',] }],
            activeColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.activeColor',] }],
            activeTextColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.activeTextColor',] }],
            centered: [{ type: core.Input }, { type: core.HostBinding, args: ['class.centered',] }, { type: core.HostBinding, args: ['attr.centered',] }],
            responsive: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.responsive',] }],
            select: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.select',] }],
            selectMultipleRows: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.selectMultipleRows',] }],
            selectColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.selectColor',] }],
            selectTextColor: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.selectTextColor',] }],
            allowDeselectingRows: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.allowDeselectingRows',] }],
            allowKeyboardNavigation: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.allowKeyboardNavigation',] }],
            noTextSelect: [{ type: core.Input }, { type: core.HostBinding, args: ['class.noTextSelect',] }, { type: core.HostBinding, args: ['attr.noTextSelect',] }],
            tabindex: [{ type: core.HostBinding, args: ['attr.tabindex',] }],
            type: [{ type: core.Input }, { type: core.HostBinding, args: ['attr.type',] }],
            collapsibleTableRows: [{ type: core.ContentChildren, args: [CollapsibleTableRowComponent,] }],
            keydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }],
            mousedown: [{ type: core.HostListener, args: ['mousedown',] }],
            mouseup: [{ type: core.HostListener, args: ['mouseup',] }]
        };
        return CollapsibleTableComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleTableRowDetailComponent = /** @class */ (function () {
        function CollapsibleTableRowDetailComponent(collapsibleService) {
            this.collapsibleService = collapsibleService;
            this.subject = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        CollapsibleTableRowDetailComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subject.asObservable().subscribe(function () {
                    _this.viewListBodies.forEach(function (item) {
                        item.toggleCollapsibleItem();
                    });
                });
            };
        /**
         * @return {?}
         */
        CollapsibleTableRowDetailComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // store list bodies in 'CollapsibleService'
                this.viewListBodies.forEach(function (item) {
                    _this.collapsibleService.addListBody(item);
                });
            };
        CollapsibleTableRowDetailComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'collapsible-table-row-detail',
                        template: "\n        <td colspan=\"100%\">\n            <collapsible-list-item>\n                <collapsible-body>\n                    <ng-content></ng-content>\n                </collapsible-body>\n            </collapsible-list-item>\n        </td>\n    ",
                        styles: ["\n        :host {\n            display: table-row;\n        }\n\n        :host collapsible-body,\n        :host td {\n            padding: 0;\n        }\n    "]
                    }] }
        ];
        /** @nocollapse */
        CollapsibleTableRowDetailComponent.ctorParameters = function () {
            return [
                { type: CollapsibleService }
            ];
        };
        CollapsibleTableRowDetailComponent.propDecorators = {
            expanded: [{ type: core.Input }],
            viewListBodies: [{ type: core.ViewChildren, args: [CollapsibleBodyComponent,] }]
        };
        return CollapsibleTableRowDetailComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CollapsibleModule = /** @class */ (function () {
        function CollapsibleModule() {
        }
        /**
         * @return {?}
         */
        CollapsibleModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: CollapsibleModule,
                    providers: [CollapsibleModule]
                };
            };
        CollapsibleModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            CollapsibleListComponent,
                            CollapsibleListItemComponent,
                            CollapsibleHeaderComponent,
                            CollapsibleBodyComponent,
                            CollapsibleTableComponent,
                            CollapsibleTableRowComponent,
                            CollapsibleTableRowDetailComponent
                        ],
                        exports: [
                            CollapsibleListComponent,
                            CollapsibleListItemComponent,
                            CollapsibleHeaderComponent,
                            CollapsibleBodyComponent,
                            CollapsibleTableComponent,
                            CollapsibleTableRowComponent,
                            CollapsibleTableRowDetailComponent
                        ],
                        providers: [
                            CollapsibleService,
                            CollapsibleEventService,
                            CollapsibleAnimationsService
                        ]
                    },] }
        ];
        return CollapsibleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.CollapsibleModule = CollapsibleModule;
    exports.CollapsibleService = CollapsibleService;
    exports.CollapsibleEvent = CollapsibleEvent;
    exports.CollapsibleEventService = CollapsibleEventService;
    exports.CollapsibleAnimationsService = CollapsibleAnimationsService;
    exports.CollapsibleHeaderComponent = CollapsibleHeaderComponent;
    exports.CollapsibleBodyComponent = CollapsibleBodyComponent;
    exports.CollapsibleListComponent = CollapsibleListComponent;
    exports.CollapsibleListItemComponent = CollapsibleListItemComponent;
    exports.CollapsibleTableComponent = CollapsibleTableComponent;
    exports.CollapsibleTableRowComponent = CollapsibleTableRowComponent;
    exports.CollapsibleTableRowDetailComponent = CollapsibleTableRowDetailComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,