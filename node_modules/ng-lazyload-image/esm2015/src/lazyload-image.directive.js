import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, Optional, Output } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { cretateHooks } from './hooks-factory';
import { lazyLoadImage } from './lazyload-image';
import { isWindowDefined } from './util';
let LazyLoadImageDirective = class LazyLoadImageDirective {
    constructor(el, ngZone, options) {
        this.onLoad = new EventEmitter(); // Callback when an image is loaded
        this.elementRef = el;
        this.ngZone = ngZone;
        this.propertyChanges$ = new ReplaySubject();
        this.hooks = cretateHooks(options);
    }
    ngOnChanges() {
        this.propertyChanges$.next({
            element: this.elementRef.nativeElement,
            imagePath: this.lazyImage,
            defaultImagePath: this.defaultImage,
            errorImagePath: this.errorImage,
            useSrcset: this.useSrcset,
            offset: this.offset | 0,
            scrollContainer: this.scrollTarget,
            scrollObservable: this.scrollObservable
        });
    }
    ngAfterContentInit() {
        // Disable lazy load image in server side
        if (!isWindowDefined()) {
            return null;
        }
        this.ngZone.runOutsideAngular(() => {
            this.scrollSubscription = this.propertyChanges$.pipe(tap(attributes => this.hooks.setup(attributes)), switchMap(attributes => this.hooks.getObservable(attributes).pipe(lazyLoadImage(this.hooks, attributes)))).subscribe(success => this.onLoad.emit(success));
        });
    }
    ngOnDestroy() {
        [this.scrollSubscription]
            .filter(subscription => subscription && !subscription.isUnsubscribed)
            .forEach(subscription => subscription.unsubscribe());
    }
};
tslib_1.__decorate([
    Input('lazyLoad'),
    tslib_1.__metadata("design:type", Object)
], LazyLoadImageDirective.prototype, "lazyImage", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LazyLoadImageDirective.prototype, "defaultImage", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LazyLoadImageDirective.prototype, "errorImage", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LazyLoadImageDirective.prototype, "scrollTarget", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LazyLoadImageDirective.prototype, "scrollObservable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LazyLoadImageDirective.prototype, "offset", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LazyLoadImageDirective.prototype, "useSrcset", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LazyLoadImageDirective.prototype, "onLoad", void 0);
LazyLoadImageDirective = tslib_1.__decorate([
    Directive({
        selector: '[lazyLoad]'
    }),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject('options')),
    tslib_1.__metadata("design:paramtypes", [ElementRef, NgZone, Object])
], LazyLoadImageDirective);
export { LazyLoadImageDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eWxvYWQtaW1hZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvbGF6eWxvYWQtaW1hZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUgsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEVBR04sUUFBUSxFQUNSLE1BQU0sRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBS3pDLElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBZWpDLFlBQVksRUFBYyxFQUFFLE1BQWMsRUFBaUMsT0FBdUI7UUFQeEYsV0FBTSxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDLENBQUMsbUNBQW1DO1FBUS9GLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQztZQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhO1lBQ3RDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsWUFBWTtZQUNuQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDL0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDdkIsZUFBZSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQ2xDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7U0FDeEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtCQUFrQjtRQUNoQix5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FDbEQsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsRUFDL0MsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FDMUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQzthQUN0QixNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDO2FBQ3BFLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRixDQUFBO0FBckRvQjtJQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDOzt5REFBVztBQUNwQjtJQUFSLEtBQUssRUFBRTs7NERBQXNCO0FBQ3JCO0lBQVIsS0FBSyxFQUFFOzswREFBb0I7QUFDbkI7SUFBUixLQUFLLEVBQUU7OzREQUFtQjtBQUNsQjtJQUFSLEtBQUssRUFBRTs7Z0VBQWtCO0FBQ2pCO0lBQVIsS0FBSyxFQUFFOztzREFBZ0I7QUFDZjtJQUFSLEtBQUssRUFBRTs7eURBQW9CO0FBQ2xCO0lBQVQsTUFBTSxFQUFFO3NDQUFTLFlBQVk7c0RBQStCO0FBUmxELHNCQUFzQjtJQUhsQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsWUFBWTtLQUN6QixDQUFDO0lBZ0I2QyxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTs2Q0FBMUQsVUFBVSxFQUFVLE1BQU07R0FmL0Isc0JBQXNCLENBc0RsQztTQXREWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBOZ1pvbmUsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uRGVzdHJveSxcbiAgICBPcHRpb25hbCxcbiAgICBPdXRwdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGNyZXRhdGVIb29rcyB9IGZyb20gJy4vaG9va3MtZmFjdG9yeSc7XG5pbXBvcnQgeyBsYXp5TG9hZEltYWdlIH0gZnJvbSAnLi9sYXp5bG9hZC1pbWFnZSc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVzLCBIb29rU2V0LCBNb2R1bGVPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBpc1dpbmRvd0RlZmluZWQgfSBmcm9tICcuL3V0aWwnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tsYXp5TG9hZF0nXG59KVxuZXhwb3J0IGNsYXNzIExhenlMb2FkSW1hZ2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgnbGF6eUxvYWQnKSBsYXp5SW1hZ2U7ICAgLy8gVGhlIGltYWdlIHRvIGJlIGxhenkgbG9hZGVkXG4gIEBJbnB1dCgpIGRlZmF1bHRJbWFnZTogc3RyaW5nOyAgLy8gVGhlIGltYWdlIHRvIGJlIGRpc3BsYXllZCBiZWZvcmUgbGF6eUltYWdlIGlzIGxvYWRlZFxuICBASW5wdXQoKSBlcnJvckltYWdlOiBzdHJpbmc7ICAgIC8vIFRoZSBpbWFnZSB0byBiZSBkaXNwbGF5ZWQgaWYgbGF6eUltYWdlIGxvYWQgZmFpbHNcbiAgQElucHV0KCkgc2Nyb2xsVGFyZ2V0OiBhbnk7ICAgICAvLyBTY3JvbGwgY29udGFpbmVyIHRoYXQgY29udGFpbnMgdGhlIGltYWdlIGFuZCBlbWl0cyBzY29sbCBldmVudHNcbiAgQElucHV0KCkgc2Nyb2xsT2JzZXJ2YWJsZTsgICAgICAvLyBQYXNzIHlvdXIgb3duIHNjcm9sbCBlbWl0dGVyXG4gIEBJbnB1dCgpIG9mZnNldDogbnVtYmVyOyAgICAgICAgLy8gVGhlIG51bWJlciBvZiBweCBhIGltYWdlIHNob3VsZCBiZSBsb2FkZWQgYmVmb3JlIGl0IGlzIGluIHZpZXcgcG9ydFxuICBASW5wdXQoKSB1c2VTcmNzZXQ6IGJvb2xlYW47ICAgIC8vIFdoZXRoZXIgc3Jjc2V0IGF0dHJpYnV0ZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkIG9mIHNyY1xuICBAT3V0cHV0KCkgb25Mb2FkOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7IC8vIENhbGxiYWNrIHdoZW4gYW4gaW1hZ2UgaXMgbG9hZGVkXG4gIHByaXZhdGUgcHJvcGVydHlDaGFuZ2VzJDogUmVwbGF5U3ViamVjdDxBdHRyaWJ1dGVzPjtcbiAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICBwcml2YXRlIG5nWm9uZTogTmdab25lO1xuICBwcml2YXRlIHNjcm9sbFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBob29rczogSG9va1NldDxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBuZ1pvbmU6IE5nWm9uZSwgQE9wdGlvbmFsKCkgQEluamVjdCgnb3B0aW9ucycpIG9wdGlvbnM/OiBNb2R1bGVPcHRpb25zKSB7XG4gICAgdGhpcy5lbGVtZW50UmVmID0gZWw7XG4gICAgdGhpcy5uZ1pvbmUgPSBuZ1pvbmU7XG4gICAgdGhpcy5wcm9wZXJ0eUNoYW5nZXMkID0gbmV3IFJlcGxheVN1YmplY3QoKTtcbiAgICB0aGlzLmhvb2tzID0gY3JldGF0ZUhvb2tzKG9wdGlvbnMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5wcm9wZXJ0eUNoYW5nZXMkLm5leHQoe1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICBpbWFnZVBhdGg6IHRoaXMubGF6eUltYWdlLFxuICAgICAgZGVmYXVsdEltYWdlUGF0aDogdGhpcy5kZWZhdWx0SW1hZ2UsXG4gICAgICBlcnJvckltYWdlUGF0aDogdGhpcy5lcnJvckltYWdlLFxuICAgICAgdXNlU3Jjc2V0OiB0aGlzLnVzZVNyY3NldCxcbiAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQgfCAwLFxuICAgICAgc2Nyb2xsQ29udGFpbmVyOiB0aGlzLnNjcm9sbFRhcmdldCxcbiAgICAgIHNjcm9sbE9ic2VydmFibGU6IHRoaXMuc2Nyb2xsT2JzZXJ2YWJsZVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIC8vIERpc2FibGUgbGF6eSBsb2FkIGltYWdlIGluIHNlcnZlciBzaWRlXG4gICAgaWYgKCFpc1dpbmRvd0RlZmluZWQoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5zY3JvbGxTdWJzY3JpcHRpb24gPSB0aGlzLnByb3BlcnR5Q2hhbmdlcyQucGlwZShcbiAgICAgICAgdGFwKGF0dHJpYnV0ZXMgPT4gdGhpcy5ob29rcy5zZXR1cChhdHRyaWJ1dGVzKSksXG4gICAgICAgIHN3aXRjaE1hcChhdHRyaWJ1dGVzID0+IHRoaXMuaG9va3MuZ2V0T2JzZXJ2YWJsZShhdHRyaWJ1dGVzKS5waXBlKGxhenlMb2FkSW1hZ2UodGhpcy5ob29rcywgYXR0cmlidXRlcykpKVxuICAgICAgKS5zdWJzY3JpYmUoc3VjY2VzcyA9PiB0aGlzLm9uTG9hZC5lbWl0KHN1Y2Nlc3MpKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIFt0aGlzLnNjcm9sbFN1YnNjcmlwdGlvbl1cbiAgICAgIC5maWx0ZXIoc3Vic2NyaXB0aW9uID0+IHN1YnNjcmlwdGlvbiAmJiAhc3Vic2NyaXB0aW9uLmlzVW5zdWJzY3JpYmVkKVxuICAgICAgLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpKTtcbiAgfVxufVxuIl19