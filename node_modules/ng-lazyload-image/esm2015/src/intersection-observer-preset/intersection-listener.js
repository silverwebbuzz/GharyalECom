import { empty, Observable, Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import { isWindowDefined } from '../util';
const observers = new WeakMap();
const intersectionSubject = new Subject();
function loadingCallback(entrys) {
    entrys.forEach(entry => intersectionSubject.next(entry));
}
export const getIntersectionObserver = (attributes) => {
    if (!attributes.scrollContainer && !isWindowDefined()) {
        return empty();
    }
    const options = {
        root: attributes.scrollContainer
    };
    if (attributes.offset) {
        options.rootMargin = `${attributes.offset}px`;
    }
    const scrollContainer = attributes.scrollContainer || window;
    let observer = observers.get(scrollContainer);
    if (!observer) {
        observer = new IntersectionObserver(loadingCallback, options);
        observers.set(scrollContainer, observer);
    }
    observer.observe(attributes.element);
    return Observable.create(obs => {
        const subscription = intersectionSubject.pipe(filter(entry => entry.target === attributes.element)).subscribe(obs);
        return () => {
            subscription.unsubscribe();
            observer.unobserve(attributes.element);
        };
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLWxpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLXByZXNldC9pbnRlcnNlY3Rpb24tbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBTzFDLE1BQU0sU0FBUyxHQUFHLElBQUksT0FBTyxFQUFzQyxDQUFDO0FBRXBFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxPQUFPLEVBQTZCLENBQUM7QUFFckUsU0FBUyxlQUFlLENBQUMsTUFBbUM7SUFDMUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLFVBQXNCLEVBQUUsRUFBRTtJQUNoRSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO1FBQ3JELE9BQU8sS0FBSyxFQUFFLENBQUM7S0FDaEI7SUFFRCxNQUFNLE9BQU8sR0FBb0I7UUFDL0IsSUFBSSxFQUFFLFVBQVUsQ0FBQyxlQUFlO0tBQ2pDLENBQUM7SUFDRixJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUU7UUFDckIsT0FBTyxDQUFDLFVBQVUsR0FBRyxHQUFHLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQztLQUMvQztJQUVELE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDO0lBRTdELElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFFOUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLFFBQVEsR0FBRyxJQUFJLG9CQUFvQixDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5RCxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUMxQztJQUVELFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXJDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM3QixNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkgsT0FBTyxHQUFHLEVBQUU7WUFDVixZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0IsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbXB0eSwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQXR0cmlidXRlcyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGlzV2luZG93RGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG50eXBlIE9ic2VydmVyT3B0aW9ucyA9IHtcbiAgcm9vdD86IEVsZW1lbnQ7XG4gIHJvb3RNYXJnaW4/OiBzdHJpbmc7XG59O1xuXG5jb25zdCBvYnNlcnZlcnMgPSBuZXcgV2Vha01hcDxFbGVtZW50IHwge30sIEludGVyc2VjdGlvbk9ic2VydmVyPigpO1xuXG5jb25zdCBpbnRlcnNlY3Rpb25TdWJqZWN0ID0gbmV3IFN1YmplY3Q8SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeT4oKTtcblxuZnVuY3Rpb24gbG9hZGluZ0NhbGxiYWNrKGVudHJ5czogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdKSB7XG4gIGVudHJ5cy5mb3JFYWNoKGVudHJ5ID0+IGludGVyc2VjdGlvblN1YmplY3QubmV4dChlbnRyeSkpO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSAoYXR0cmlidXRlczogQXR0cmlidXRlcykgPT4ge1xuICBpZiAoIWF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyICYmICFpc1dpbmRvd0RlZmluZWQoKSkge1xuICAgIHJldHVybiBlbXB0eSgpO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9uczogT2JzZXJ2ZXJPcHRpb25zID0ge1xuICAgIHJvb3Q6IGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyXG4gIH07XG4gIGlmIChhdHRyaWJ1dGVzLm9mZnNldCkge1xuICAgIG9wdGlvbnMucm9vdE1hcmdpbiA9IGAke2F0dHJpYnV0ZXMub2Zmc2V0fXB4YDtcbiAgfVxuXG4gIGNvbnN0IHNjcm9sbENvbnRhaW5lciA9IGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyIHx8IHdpbmRvdztcblxuICBsZXQgb2JzZXJ2ZXIgPSBvYnNlcnZlcnMuZ2V0KHNjcm9sbENvbnRhaW5lcik7XG5cbiAgaWYgKCFvYnNlcnZlcikge1xuICAgIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGxvYWRpbmdDYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgb2JzZXJ2ZXJzLnNldChzY3JvbGxDb250YWluZXIsIG9ic2VydmVyKTtcbiAgfVxuXG4gIG9ic2VydmVyLm9ic2VydmUoYXR0cmlidXRlcy5lbGVtZW50KTtcblxuICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBpbnRlcnNlY3Rpb25TdWJqZWN0LnBpcGUoZmlsdGVyKGVudHJ5ID0+IGVudHJ5LnRhcmdldCA9PT0gYXR0cmlidXRlcy5lbGVtZW50KSkuc3Vic2NyaWJlKG9icyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGF0dHJpYnV0ZXMuZWxlbWVudCk7XG4gICAgfTtcbiAgfSk7XG59O1xuIl19