import { empty, Observable } from 'rxjs';
import { sampleTime, share, startWith } from 'rxjs/operators';
import { isWindowDefined } from '../util';
const scrollListeners = new WeakMap();
export function sampleObservable(obs, scheduler) {
    return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));
}
// Only create one scroll listener per target and share the observable.
// Typical, there will only be one observable per application
export const getScrollListener = (scrollTarget) => {
    if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
        if (isWindowDefined()) {
            console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
        }
        return empty();
    }
    if (scrollListeners.has(scrollTarget)) {
        return scrollListeners.get(scrollTarget);
    }
    const srollEvent = Observable.create(observer => {
        const eventName = 'scroll';
        const handler = event => observer.next(event);
        const options = { passive: true, capture: false };
        scrollTarget.addEventListener(eventName, handler, options);
        return () => scrollTarget.removeEventListener(eventName, handler, options);
    });
    const listener = sampleObservable(srollEvent);
    scrollListeners.set(scrollTarget, listener);
    return listener;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWxpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2Nyb2xsLXByZXNldC9zY3JvbGwtbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUxQyxNQUFNLGVBQWUsR0FBRyxJQUFJLE9BQU8sRUFBd0IsQ0FBQztBQUU1RCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsR0FBb0IsRUFBRSxTQUFlO0lBQ3BFLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FDYixVQUFVLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxFQUMxQixLQUFLLEVBQUUsRUFDUCxTQUFTLENBQUMsRUFBRSxDQUFDLENBQ2QsQ0FBQztBQUNKLENBQUM7QUFFRCx1RUFBdUU7QUFDdkUsNkRBQTZEO0FBQzdELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsWUFBWSxFQUE4QixFQUFFO0lBQzVFLElBQUksQ0FBQyxZQUFZLElBQUksT0FBTyxZQUFZLENBQUMsZ0JBQWdCLEtBQUssVUFBVSxFQUFFO1FBQ3hFLElBQUksZUFBZSxFQUFFLEVBQUU7WUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxZQUFZLEdBQUcseURBQXlELENBQUMsQ0FBQztTQUNuSDtRQUNELE9BQU8sS0FBSyxFQUFFLENBQUM7S0FDaEI7SUFDRCxJQUFJLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDckMsT0FBTyxlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQzFDO0lBRUQsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM5QyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDM0IsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLE1BQU0sT0FBTyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDbEQsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0QsT0FBTyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVtcHR5LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzYW1wbGVUaW1lLCBzaGFyZSwgc3RhcnRXaXRoIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgaXNXaW5kb3dEZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IHNjcm9sbExpc3RlbmVycyA9IG5ldyBXZWFrTWFwPGFueSwgT2JzZXJ2YWJsZTxhbnk+PigpO1xuXG5leHBvcnQgZnVuY3Rpb24gc2FtcGxlT2JzZXJ2YWJsZShvYnM6IE9ic2VydmFibGU8YW55Piwgc2NoZWR1bGVyPzogYW55KSB7XG4gIHJldHVybiBvYnMucGlwZShcbiAgICBzYW1wbGVUaW1lKDEwMCwgc2NoZWR1bGVyKSxcbiAgICBzaGFyZSgpLFxuICAgIHN0YXJ0V2l0aCgnJylcbiAgKTtcbn1cblxuLy8gT25seSBjcmVhdGUgb25lIHNjcm9sbCBsaXN0ZW5lciBwZXIgdGFyZ2V0IGFuZCBzaGFyZSB0aGUgb2JzZXJ2YWJsZS5cbi8vIFR5cGljYWwsIHRoZXJlIHdpbGwgb25seSBiZSBvbmUgb2JzZXJ2YWJsZSBwZXIgYXBwbGljYXRpb25cbmV4cG9ydCBjb25zdCBnZXRTY3JvbGxMaXN0ZW5lciA9IChzY3JvbGxUYXJnZXQpOiBPYnNlcnZhYmxlPEV2ZW50IHwgU3RyaW5nPiA9PiB7XG4gIGlmICghc2Nyb2xsVGFyZ2V0IHx8IHR5cGVvZiBzY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChpc1dpbmRvd0RlZmluZWQoKSkge1xuICAgICAgY29uc29sZS53YXJuKCdgYWRkRXZlbnRMaXN0ZW5lcmAgb24gJyArIHNjcm9sbFRhcmdldCArICcgKHNjcm9sbFRhcmdldCkgaXMgbm90IGEgZnVuY3Rpb24uIFNraXBwaW5nIHRoaXMgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHJldHVybiBlbXB0eSgpO1xuICB9XG4gIGlmIChzY3JvbGxMaXN0ZW5lcnMuaGFzKHNjcm9sbFRhcmdldCkpIHtcbiAgICByZXR1cm4gc2Nyb2xsTGlzdGVuZXJzLmdldChzY3JvbGxUYXJnZXQpO1xuICB9XG5cbiAgY29uc3Qgc3JvbGxFdmVudCA9IE9ic2VydmFibGUuY3JlYXRlKG9ic2VydmVyID0+IHtcbiAgICBjb25zdCBldmVudE5hbWUgPSAnc2Nyb2xsJztcbiAgICBjb25zdCBoYW5kbGVyID0gZXZlbnQgPT4gb2JzZXJ2ZXIubmV4dChldmVudCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfTtcbiAgICBzY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiBzY3JvbGxUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICB9KTtcblxuICBjb25zdCBsaXN0ZW5lciA9IHNhbXBsZU9ic2VydmFibGUoc3JvbGxFdmVudCk7XG4gIHNjcm9sbExpc3RlbmVycy5zZXQoc2Nyb2xsVGFyZ2V0LCBsaXN0ZW5lcik7XG4gIHJldHVybiBsaXN0ZW5lcjtcbn07XG4iXX0=